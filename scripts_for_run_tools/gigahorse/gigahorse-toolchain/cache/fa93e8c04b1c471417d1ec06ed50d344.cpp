
#include "souffle/CompiledSouffle.h"

namespace functors {
 extern "C" {
const char * add_256(const char *,const char *);
const char * and_256(const char *,const char *);
const char * div_256(const char *,const char *);
const char * eq_256(const char *,const char *);
const char * exp_256(const char *,const char *);
const char * gt_256(const char *,const char *);
souffle::RamSigned hex_to_number(const char *);
const char * hex_to_str(const char *);
const char * lt_256(const char *,const char *);
const char * mod_256(const char *,const char *);
const char * mul_256(const char *,const char *);
const char * number_to_hex(souffle::RamSigned);
const char * or_256(const char *,const char *);
const char * sar_256(const char *,const char *);
const char * sdiv_256(const char *,const char *);
const char * sgt_256(const char *,const char *);
const char * shl_256(const char *,const char *);
const char * shr_256(const char *,const char *);
const char * slt_256(const char *,const char *);
const char * smod_256(const char *,const char *);
const char * sub_256(const char *,const char *);
const char * xor_256(const char *,const char *);
}
}

namespace souffle {
static const RamDomain RAM_BIT_SHIFT_MASK = RAM_DOMAIN_SIZE - 1;
struct t_btree_iii__1_2__0_2__0_1_2__011__010__100__101__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,2]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,1,2]\n";
ind_2.printStats(o);
}
};
struct t_btree_ii__1_0__0__11__10__01 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
o << " arity 2 direct b-tree index 1 lex-order [0]\n";
ind_1.printStats(o);
}
};
struct t_btree_ii__0_1__11__10 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [0,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_ii__1_0__11__01 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2__1_2__0_2_1__001__002__011__010__102__100__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_002(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_002(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_002(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_102(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_102(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_102(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,2,1]\n";
ind_2.printStats(o);
}
};
struct t_btree_iiii__2_0_1_3__1__1111__0100__0010 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,0,1,3]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,0,2,3]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [2,1]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__2__1__0_1_2__001__010__100__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,1,2]\n";
ind_2.printStats(o);
}
};
struct t_btree_i__0__1 {
static constexpr Relation::arity_type Arity = 1;
using t_tuple = Tuple<RamDomain, 1>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[1];
std::copy(ramDomain, ramDomain + 1, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0) {
RamDomain data[1] = {a0};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 1 direct b-tree index 0 lex-order [0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__3_0_1_2__2__1111__0010__0001 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [3,0,1,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [2]\n";
ind_1.printStats(o);
}
};
struct t_btree_ii__0_1__11 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [0,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__1_2_3_0__1111__0111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,2,3,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_2_3__1111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_1_2__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_1_2__100__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_2_3__1110__1111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_2_1__100__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,2,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_1_2__110__112__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_112(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2__1_2__0_1_2__001__011__010__100__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,1,2]\n";
ind_2.printStats(o);
}
};
struct t_btree_iii__2__0_1_2__001__100__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__3_0_1_2__1_2__1111__0110__0100__0001 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [3,0,1,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__1_2_0_3__1111__0110 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0110(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,2,0,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiiiiiii__0_1_2_3_4_5_6_7_8__111111111 {
static constexpr Relation::arity_type Arity = 9;
using t_tuple = Tuple<RamDomain, 9>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :((ramBitCast<RamSigned>((*a)[8]) <ramBitCast<RamSigned> ((*b)[8])) ? -1 : ((ramBitCast<RamSigned>((*a)[8]) > ramBitCast<RamSigned>((*b)[8])) ? 1 :(0))))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7])|| ((ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]) && (ramBitCast<RamSigned> ((*a)[8]) < ramBitCast<RamSigned>((*b)[8])))))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7])&&ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[9];
std::copy(ramDomain, ramDomain + 9, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8) {
RamDomain data[9] = {a0,a1,a2,a3,a4,a5,a6,a7,a8};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> lowerUpperRange_111111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> lowerUpperRange_111111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111111(lower, upper, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void purge() {
ind_0.clear();
dataTable.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 9 indirect b-tree index 0 lex-order [0,1,2,3,4,5,6,7,8]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111 {
static constexpr Relation::arity_type Arity = 8;
using t_tuple = Tuple<RamDomain, 8>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :(0))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7]))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[8];
std::copy(ramDomain, ramDomain + 8, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7) {
RamDomain data[8] = {a0,a1,a2,a3,a4,a5,a6,a7};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111111(lower, upper, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void purge() {
ind_0.clear();
dataTable.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 8 indirect b-tree index 0 lex-order [0,1,2,3,4,5,6,7]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__3_0_1_2__1111__0001 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [3,0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2__0_1_2__001__100__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__1_3_0_2__1111__0100__0101 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0101(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,3,0,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__1_0_2__010__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,0,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__1_2_0__011__010__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,2,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__1_3_0_2__1111__0101 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0101(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,3,0,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__2_3_0_1__1_3__1111__0101__0011 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0101(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0011(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,3,0,1]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,3]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__0__1_0_2_3__1000__1111__0100 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,0,2,3]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__1__0_1_2__010__100__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__0__3_0_1_2__1000__1111__0001 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [3,0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__1__0_2_1__010__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,2,1]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__0_2__0_1_2__100__101__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__0_2__1_0_2__010__101__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,0,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiiii__0_4_1_2_3__11111__10001 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,4,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2_1__1_0_2__001__011__010__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2,1]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,0,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__2_1_0__001__011__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2,1,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__1__2_0_1__001__010__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_1::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [2,0,1]\n";
ind_1.printStats(o);
}
};
struct t_btree_ii__1_0__11__02 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_02(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_02(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_02(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_2_1__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,2,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_2_3__1000__1111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_ii__1_0__0_1__11__12__10__01 {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_12(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_12(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_12(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
o << " arity 2 direct b-tree index 1 lex-order [0,1]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__0_3_2__1_0_2_3__1000__1001__1011__1111__1100__0100 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,3,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,0,2,3]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__0_3_2__1_0_3_2__1000__1001__1011__1111__1100__1101__0100 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1101(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,3,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,0,3,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__2__1_2__0_2_1__001__011__012__010__100__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_012(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_012(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_012(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,2,1]\n";
ind_2.printStats(o);
}
};
struct t_btree_iii__1_2__0_1_2__012__100__110__112__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_012(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_012(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_012(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_112(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__0_1_2__112__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_112(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_112(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__2_0_1_3__1111__0010 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,0,1,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2_0_1__001__101__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_101(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2,0,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2_0_1__001__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2,0,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__0_1_2_3_4__11111 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,2,3,4]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_1_2__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_2_1__1_2_0_3__1010__1110__1111__0110 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0110(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,2,1]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,2,0,3]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__1_2_0__011__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,2,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiiiii__3_5_0_1_2_4_6__1111111__0001010 {
static constexpr Relation::arity_type Arity = 7;
using t_tuple = Tuple<RamDomain, 7>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :(0))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[7];
std::copy(ramDomain, ramDomain + 7, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6) {
RamDomain data[7] = {a0,a1,a2,a3,a4,a5,a6};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111(lower, upper, h);
}
range<iterator_0> lowerUpperRange_0001010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> lowerUpperRange_0001010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001010(lower, upper, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void purge() {
ind_0.clear();
dataTable.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 7 indirect b-tree index 0 lex-order [3,5,0,1,2,4,6]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_2_1_3__1010__1110__1111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,2,1,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__1_0_2__010__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,0,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__1_2_4_0_3__11111__01102__01000 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01102(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01102(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01102(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01000(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [1,2,4,0,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__1_2_4_0_3__0_1_3__11111__11020__01102__01000 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_11020(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_11020(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11020(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01102(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01102(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01102(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01000(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [1,2,4,0,3]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [0,1,3]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__0_1_2_3__1110__1112__1111 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1112(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1112(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1112(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__3_4_0_1_2__1_2__11111__01100__01000__00011__00010 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_01100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_01100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01100(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_00011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_00011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00011(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00010(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [3,4,0,1,2]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__1_3_2_0__1111__0111__0100__0101 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0101(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,3,2,0]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_2_3__1110__1111__1100 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_3_2__1111__1101__1102 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1101(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1102(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1102(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1102(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,3,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_2__0_1_3_2__1110__1111__1101 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1101(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [0,1,3,2]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiiii__1_3_0_2_4__11111__01010 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01010(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [1,3,0,2,4]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__2_4_0_1_3__0__11111__10000__00101 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_00101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_00101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00101(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [2,4,0,1,3]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [0]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiii__1_0_2_3__1111__0100 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [1,0,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__2__1_2__0_1_2__001__011__010__100__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_2.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> partition() const {
return ind_2.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_2.begin();
}
iterator end() const {
return ind_2.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [1,2]\n";
ind_1.printStats(o);
o << " arity 3 direct b-tree index 2 lex-order [0,1,2]\n";
ind_2.printStats(o);
}
};
struct t_btree_iiiii__4_0_1_2_3__11111__00001 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [4,0,1,2,3]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_1_3_2__1111__1100__1101 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1101(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1101(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,3,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iii__0_2_1__102__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_102(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_102(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_102(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,2,1]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiii__0_2__2_3_0_1__1000__1010__1111__0011 {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_1.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0011(lower,upper,h);
}
bool empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> partition() const {
return ind_1.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_1.begin();
}
iterator end() const {
return ind_1.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [2,3,0,1]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiiiiii__0_1_2_3_4_5_6__1111111 {
static constexpr Relation::arity_type Arity = 7;
using t_tuple = Tuple<RamDomain, 7>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :(0))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[7];
std::copy(ramDomain, ramDomain + 7, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6) {
RamDomain data[7] = {a0,a1,a2,a3,a4,a5,a6};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111(lower, upper, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void purge() {
ind_0.clear();
dataTable.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 7 indirect b-tree index 0 lex-order [0,1,2,3,4,5,6]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__2_0_1_3_4__0__11111__10000__00100 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10000(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00100(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [2,0,1,3,4]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [0]\n";
ind_1.printStats(o);
}
};
struct t_btree_iii__0_1_2__100__110__111 {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__0_2_1_3_4__11111__10100__10000 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_10100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_10100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_10000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10000(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,2,1,3,4]\n";
ind_0.printStats(o);
}
};
struct t_btree_iiiii__1_0_2_3_4__4_0__11111__10001__01000__00001 {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10001(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_01000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01000(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00001(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [1,0,2,3,4]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [4,0]\n";
ind_1.printStats(o);
}
};
struct t_btree_iiiiii__1_0_2_3_4_5__4__3__111111__000010__000100__010000 {
static constexpr Relation::arity_type Arity = 6;
using t_tuple = Tuple<RamDomain, 6>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5])) ? -1 : (ramBitCast<RamSigned>(a[5]) > ramBitCast<RamSigned>(b[5])) ? 1 :(0))))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5]))))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[5]) == ramBitCast<RamSigned>(b[5]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_2 = btree_multiset<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
ind_2.insert(t, h.hints_2_lower);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111(lower,upper,h);
}
range<t_ind_1::iterator> lowerUpperRange_000010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> lowerUpperRange_000010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_000010(lower,upper,h);
}
range<t_ind_2::iterator> lowerUpperRange_000100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> lowerUpperRange_000100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_000100(lower,upper,h);
}
range<t_ind_0::iterator> lowerUpperRange_010000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> lowerUpperRange_010000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010000(lower,upper,h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printStatistics(std::ostream& o) const {
o << " arity 6 direct b-tree index 0 lex-order [1,0,2,3,4,5]\n";
ind_0.printStats(o);
o << " arity 6 direct b-tree index 1 lex-order [4]\n";
ind_1.printStats(o);
o << " arity 6 direct b-tree index 2 lex-order [3]\n";
ind_2.printStats(o);
}
};

class Sf_fa93e8c04b1c471417d1ec06ed50d344 : public SouffleProgram {
private:
static inline std::string substr_wrapper(const std::string& str, std::size_t idx, std::size_t len) {
   std::string result; 
   try { result = str.substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
public:
// -- initialize symbol table --
SymbolTableImpl symTable{
	R"_(RETURNPRIVATE)_",
	R"_(DIV)_",
	R"_(SMOD)_",
	R"_(MOD)_",
	R"_(SDIV)_",
	R"_(0x0)_",
	R"_(ADD)_",
	R"_(SUB)_",
	R"_(MUL)_",
	R"_(AND)_",
	R"_(OR)_",
	R"_(XOR)_",
	R"_(GT)_",
	R"_(EQ)_",
	R"_(LT)_",
	R"_(EXP)_",
	R"_(SGT)_",
	R"_(SLT)_",
	R"_(SHL)_",
	R"_(SHR)_",
	R"_(SAR)_",
	R"_(CALLPRIVATE)_",
	R"_(0x40)_",
	R"_(PHI)_",
	R"_(0x1)_",
	R"_(00)_",
	R"_(++)_",
	R"_(0)_",
	R"_(_gen)_",
	R"_(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)_",
	R"_(0x3f)_",
	R"_(0x60)_",
	R"_(ff)_",
	R"_(CONST)_",
	R"_(SYMBOLIC)_",
	R"_(MSIZE)_",
	R"_(0x20)_",
	R"_(VAR)_",
	R"_(RETURNDATA)_",
	R"_(CALLDATA)_",
	R"_(None)_",
	R"_(')_",
	R"_(MSTORE)_",
	R"_(0x1f)_",
	R"_(CALLDATASIZE)_",
	R"_(SIGNEXTEND)_",
	R"_(BYTE)_",
	R"_(ADDMOD)_",
	R"_(MULMOD)_",
	R"_(ISZERO)_",
	R"_(NOT)_",
	R"_(CALLDATACOPY)_",
	R"_(Regular)_",
	R"_(??)_",
	R"_(LOG0)_",
	R"_(LOG1)_",
	R"_(LOG2)_",
	R"_(LOG3)_",
	R"_(LOG4)_",
	R"_(Data)_",
	R"_(REVERT)_",
	R"_(0xffffffff)_",
	R"_(approve(address,uint256))_",
	R"_(transfer(address,uint256))_",
	R"_(transferFrom(address,address,uint256))_",
	R"_(CALLER)_",
	R"_(ORIGIN)_",
	R"_(CALL)_",
	R"_(B)_",
	R"_()_",
	R"_(DELEGATECALL)_",
	R"_(V)_",
	R"_(RETURNDATASIZE)_",
	R"_(STATICCALL)_",
	R"_(JUMP)_",
	R"_(JUMPI)_",
	R"_(MSTORE8)_",
	R"_(RETURN)_",
	R"_(SHA3)_",
	R"_(LOG)_",
	R"_(RETURNDATACOPY)_",
	R"_(CODECOPY)_",
	R"_(EXTCODECOPY)_",
	R"_(SLOAD)_",
	R"_(SSTORE)_",
	R"_(CALLDATALOAD)_",
	R"_(CALLCODE)_",
	R"_(THROW)_",
	R"_(MLOAD)_",
};// -- initialize record table --
SpecializedRecordTable<0,2,3> recordTable{};
// -- Table: Statement_Defines
Own<t_btree_iii__1_2__0_2__0_1_2__011__010__100__101__110__111> rel_1_Statement_Defines = mk<t_btree_iii__1_2__0_2__0_1_2__011__010__100__101__110__111>();
souffle::RelationWrapper<t_btree_iii__1_2__0_2__0_1_2__011__010__100__101__110__111> wrapper_rel_1_Statement_Defines;
// -- Table: Statement_Opcode
Own<t_btree_ii__1_0__0__11__10__01> rel_2_Statement_Opcode = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_2_Statement_Opcode;
// -- Table: MSIZE
Own<t_btree_ii__1_0__0__11__10__01> rel_3_MSIZE = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_3_MSIZE;
// -- Table: LOGStatement
Own<t_btree_ii__0_1__11__10> rel_4_LOGStatement = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_4_LOGStatement;
// -- Table: RETURNDATASIZE
Own<t_btree_ii__0_1__11__10> rel_5_RETURNDATASIZE = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_5_RETURNDATASIZE;
// -- Table: CALLDATASIZE
Own<t_btree_ii__1_0__11__01> rel_6_CALLDATASIZE = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_6_CALLDATASIZE;
// -- Table: Statement_Uses
Own<t_btree_iii__2__1_2__0_2_1__001__002__011__010__102__100__101__111> rel_7_Statement_Uses = mk<t_btree_iii__2__1_2__0_2_1__001__002__011__010__102__100__101__111>();
souffle::RelationWrapper<t_btree_iii__2__1_2__0_2_1__001__002__011__010__102__100__101__111> wrapper_rel_7_Statement_Uses;
// -- Table: ADD
Own<t_btree_iiii__2_0_1_3__1__1111__0100__0010> rel_8_ADD = mk<t_btree_iiii__2_0_1_3__1__1111__0100__0010>();
souffle::RelationWrapper<t_btree_iiii__2_0_1_3__1__1111__0100__0010> wrapper_rel_8_ADD;
// -- Table: ADDFix
Own<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010> rel_9_ADDFix = mk<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010>();
souffle::RelationWrapper<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010> wrapper_rel_9_ADDFix;
// -- Table: MLOAD
Own<t_btree_iii__2__1__0_1_2__001__010__100__110__111> rel_10_MLOAD = mk<t_btree_iii__2__1__0_1_2__001__010__100__110__111>();
souffle::RelationWrapper<t_btree_iii__2__1__0_1_2__001__010__100__110__111> wrapper_rel_10_MLOAD;
// -- Table: __agg_single16
Own<t_btree_i__0__1> rel_11_agg_single16 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_11_agg_single16;
// -- Table: AuxStatementOpAndArgs
Own<t_btree_iiii__3_0_1_2__2__1111__0010__0001> rel_12_AuxStatementOpAndArgs = mk<t_btree_iiii__3_0_1_2__2__1111__0010__0001>();
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__2__1111__0010__0001> wrapper_rel_12_AuxStatementOpAndArgs;
// -- Table: BasicVariable_Value
Own<t_btree_ii__1_0__0__11__10__01> rel_13_BasicVariable_Value = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_13_BasicVariable_Value;
// -- Table: @delta_BasicVariable_Value
Own<t_btree_ii__0_1__11> rel_14_delta_BasicVariable_Value = mk<t_btree_ii__0_1__11>();
// -- Table: @new_BasicVariable_Value
Own<t_btree_ii__0_1__11> rel_15_new_BasicVariable_Value = mk<t_btree_ii__0_1__11>();
// -- Table: BasicAuxStatementOpAndConstantArgValues
Own<t_btree_iiii__1_2_3_0__1111__0111> rel_16_BasicAuxStatementOpAndConstantArgValues = mk<t_btree_iiii__1_2_3_0__1111__0111>();
souffle::RelationWrapper<t_btree_iiii__1_2_3_0__1111__0111> wrapper_rel_16_BasicAuxStatementOpAndConstantArgValues;
// -- Table: @delta_BasicAuxStatementOpAndConstantArgValues
Own<t_btree_iiii__0_1_2_3__1111> rel_17_delta_BasicAuxStatementOpAndConstantArgValues = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_BasicAuxStatementOpAndConstantArgValues
Own<t_btree_iiii__0_1_2_3__1111> rel_18_new_BasicAuxStatementOpAndConstantArgValues = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: basicVariableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__111> rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation;
// -- Table: @delta_basicVariableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__100__111> rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_basicVariableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__100__111> rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: basicVariableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_22_basicVariableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_22_basicVariableValueConstantFolding_RequestConstantFold2;
// -- Table: @delta_basicVariableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_basicVariableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
// -- Table: basicVariableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_25_basicVariableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_25_basicVariableValueConstantFolding_ConstantFoldResult2;
// -- Table: @delta_basicVariableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1111> rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_basicVariableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1111> rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: MLOADFreePtr
Own<t_btree_i__0__1> rel_28_MLOADFreePtr = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_28_MLOADFreePtr;
// -- Table: MLOADFreePtr_To
Own<t_btree_ii__1_0__11__01> rel_29_MLOADFreePtr_To = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_29_MLOADFreePtr_To;
// -- Table: __agg_single17
Own<t_btree_i__0__1> rel_30_agg_single17 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_30_agg_single17;
// -- Table: VarPlusConst
Own<t_btree_iii__0_2_1__100__101__111> rel_31_VarPlusConst = mk<t_btree_iii__0_2_1__100__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__100__101__111> wrapper_rel_31_VarPlusConst;
// -- Table: ValueWithEvenLength
Own<t_btree_ii__0_1__11> rel_32_ValueWithEvenLength = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_32_ValueWithEvenLength;
// -- Table: ValueMasksOrKeepsByteAtIndex
Own<t_btree_iii__0_1_2__110__112__111> rel_33_ValueMasksOrKeepsByteAtIndex = mk<t_btree_iii__0_1_2__110__112__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__110__112__111> wrapper_rel_33_ValueMasksOrKeepsByteAtIndex;
// -- Table: ValueIsByteMask
Own<t_btree_i__0__1> rel_34_ValueIsByteMask = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_34_ValueIsByteMask;
// -- Table: ByteMask_ZerosMinMax
Own<t_btree_iii__0_1_2__111> rel_35_ByteMask_ZerosMinMax = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_35_ByteMask_ZerosMinMax;
// -- Table: ValueIsNotAntiByteMask
Own<t_btree_i__0__1> rel_36_ValueIsNotAntiByteMask = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_36_ValueIsNotAntiByteMask;
// -- Table: AntiByteMask
Own<t_btree_iii__0_1_2__100__111> rel_37_AntiByteMask = mk<t_btree_iii__0_1_2__100__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111> wrapper_rel_37_AntiByteMask;
// -- Table: VarPlusThirtyTwo
Own<t_btree_ii__1_0__0__11__10__01> rel_38_VarPlusThirtyTwo = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_38_VarPlusThirtyTwo;
// -- Table: CALLPRIVATE
Own<t_btree_ii__0_1__11__10> rel_39_CALLPRIVATE = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_39_CALLPRIVATE;
// -- Table: MSTORE
Own<t_btree_iii__2__1_2__0_1_2__001__011__010__100__111> rel_40_MSTORE = mk<t_btree_iii__2__1_2__0_1_2__001__011__010__100__111>();
souffle::RelationWrapper<t_btree_iii__2__1_2__0_1_2__001__011__010__100__111> wrapper_rel_40_MSTORE;
// -- Table: MSTOREFreePtr
Own<t_btree_i__0__1> rel_41_MSTOREFreePtr = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_41_MSTOREFreePtr;
// -- Table: mstoreFreePtrOrder.To
Own<t_btree_i__0__1> rel_42_mstoreFreePtrOrder_To = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_42_mstoreFreePtrOrder_To;
// -- Table: __agg_single7
Own<t_btree_i__0__1> rel_43_agg_single7 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_43_agg_single7;
// -- Table: MLOADMSTORESameAddrVar
Own<t_btree_ii__1_0__11__01> rel_44_MLOADMSTORESameAddrVar = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_44_MLOADMSTORESameAddrVar;
// -- Table: NonUniqueMLOADMSTOREForAddrVar
Own<t_btree_ii__0_1__11> rel_45_NonUniqueMLOADMSTOREForAddrVar = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_45_NonUniqueMLOADMSTOREForAddrVar;
// -- Table: UniqueMSTOREMLOADForAddrVar
Own<t_btree_ii__0_1__11> rel_46_UniqueMSTOREMLOADForAddrVar = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_46_UniqueMSTOREMLOADForAddrVar;
// -- Table: __agg_single6
Own<t_btree_i__0__1> rel_47_agg_single6 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_47_agg_single6;
// -- Table: PHI
Own<t_btree_iii__2__0_1_2__001__100__111> rel_48_PHI = mk<t_btree_iii__2__0_1_2__001__100__111>();
souffle::RelationWrapper<t_btree_iii__2__0_1_2__001__100__111> wrapper_rel_48_PHI;
// -- Table: PHIStmtTwoUses
Own<t_btree_iiii__3_0_1_2__1_2__1111__0110__0100__0001> rel_49_PHIStmtTwoUses = mk<t_btree_iiii__3_0_1_2__1_2__1111__0110__0100__0001>();
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__1_2__1111__0110__0100__0001> wrapper_rel_49_PHIStmtTwoUses;
// -- Table: PossibleArray
Own<t_btree_i__0__1> rel_50_PossibleArray = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_50_PossibleArray;
// -- Table: SUB
Own<t_btree_iiii__0_1_2_3__1111> rel_51_SUB = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_51_SUB;
// -- Table: ADDFixx
Own<t_btree_iiii__1_2_0_3__1111__0110> rel_52_ADDFixx = mk<t_btree_iiii__1_2_0_3__1111__0110>();
souffle::RelationWrapper<t_btree_iiii__1_2_0_3__1111__0110> wrapper_rel_52_ADDFixx;
// -- Table: CALL
Own<t_btree_iiiiiiiii__0_1_2_3_4_5_6_7_8__111111111> rel_53_CALL = mk<t_btree_iiiiiiiii__0_1_2_3_4_5_6_7_8__111111111>();
souffle::RelationWrapper<t_btree_iiiiiiiii__0_1_2_3_4_5_6_7_8__111111111> wrapper_rel_53_CALL;
// -- Table: DELEGATECALL
Own<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> rel_54_DELEGATECALL = mk<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111>();
souffle::RelationWrapper<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> wrapper_rel_54_DELEGATECALL;
// -- Table: STATICCALL
Own<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> rel_55_STATICCALL = mk<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111>();
souffle::RelationWrapper<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> wrapper_rel_55_STATICCALL;
// -- Table: CALLReturnDataStartVar
Own<t_btree_ii__0_1__11__10> rel_56_CALLReturnDataStartVar = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_56_CALLReturnDataStartVar;
// -- Table: callToReturnDataOp.Bypassing
Own<t_btree_i__0__1> rel_57_callToReturnDataOp_Bypassing = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_57_callToReturnDataOp_Bypassing;
// -- Table: __agg_single
Own<t_btree_i__0__1> rel_58_agg_single = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_58_agg_single;
// -- Table: CALLReturnDataLengthVar
Own<t_btree_ii__0_1__11> rel_59_CALLReturnDataLengthVar = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_59_CALLReturnDataLengthVar;
// -- Table: MSTORE8
Own<t_btree_iii__0_1_2__111> rel_60_MSTORE8 = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_60_MSTORE8;
// -- Table: RETURN
Own<t_btree_iii__0_1_2__111> rel_61_RETURN = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_61_RETURN;
// -- Table: REVERT
Own<t_btree_iii__0_1_2__111> rel_62_REVERT = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_62_REVERT;
// -- Table: SHA3
Own<t_btree_iiii__3_0_1_2__1111__0001> rel_63_SHA3 = mk<t_btree_iiii__3_0_1_2__1111__0001>();
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__1111__0001> wrapper_rel_63_SHA3;
// -- Table: StatementUsesMemory_StartVar
Own<t_btree_iii__2__0_1_2__001__100__110__111> rel_64_StatementUsesMemory_StartVar = mk<t_btree_iii__2__0_1_2__001__100__110__111>();
souffle::RelationWrapper<t_btree_iii__2__0_1_2__001__100__110__111> wrapper_rel_64_StatementUsesMemory_StartVar;
// -- Table: StatementUsesMemoryReadsFromZero
Own<t_btree_ii__0_1__11__10> rel_65_StatementUsesMemoryReadsFromZero = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_65_StatementUsesMemoryReadsFromZero;
// -- Table: StatementUsesMemory_LengthVar
Own<t_btree_iii__0_1_2__111> rel_66_StatementUsesMemory_LengthVar = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_66_StatementUsesMemory_LengthVar;
// -- Table: StatementUsesMemory
Own<t_btree_ii__1_0__11__01> rel_67_StatementUsesMemory = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_67_StatementUsesMemory;
// -- Table: mloadAliasesPrecise.Bypassing
Own<t_btree_i__0__1> rel_68_mloadAliasesPrecise_Bypassing = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_68_mloadAliasesPrecise_Bypassing;
// -- Table: StatementUsesMemoryReadsABIEnc
Own<t_btree_ii__0_1__11> rel_69_StatementUsesMemoryReadsABIEnc = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_69_StatementUsesMemoryReadsABIEnc;
// -- Table: StatementUsesMemoryReadsABIEncWSelector
Own<t_btree_ii__0_1__11> rel_70_StatementUsesMemoryReadsABIEncWSelector = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_70_StatementUsesMemoryReadsABIEncWSelector;
// -- Table: StatementUsesMemoryReadsRawData
Own<t_btree_ii__0_1__11__10> rel_71_StatementUsesMemoryReadsRawData = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_71_StatementUsesMemoryReadsRawData;
// -- Table: StatementUsesMemoryOfInitiallyComputableLength
Own<t_btree_iii__0_1_2__111> rel_72_StatementUsesMemoryOfInitiallyComputableLength = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_72_StatementUsesMemoryOfInitiallyComputableLength;
// -- Table: __agg_single4
Own<t_btree_i__0__1> rel_73_agg_single4 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_73_agg_single4;
// -- Table: __agg_single5
Own<t_btree_i__0__1> rel_74_agg_single5 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_74_agg_single5;
// -- Table: VariableLengthMemoryCopyStatement
Own<t_btree_iii__0_1_2__111> rel_75_VariableLengthMemoryCopyStatement = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_75_VariableLengthMemoryCopyStatement;
// -- Table: LT
Own<t_btree_iiii__1_3_0_2__1111__0100__0101> rel_76_LT = mk<t_btree_iiii__1_3_0_2__1111__0100__0101>();
souffle::RelationWrapper<t_btree_iiii__1_3_0_2__1111__0100__0101> wrapper_rel_76_LT;
// -- Table: JUMPI
Own<t_btree_iii__0_1_2__100__111> rel_77_JUMPI = mk<t_btree_iii__0_1_2__100__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111> wrapper_rel_77_JUMPI;
// -- Table: SLOAD
Own<t_btree_iii__1_0_2__010__111> rel_78_SLOAD = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_78_SLOAD;
// -- Table: SSTORE
Own<t_btree_iii__1_2_0__011__010__111> rel_79_SSTORE = mk<t_btree_iii__1_2_0__011__010__111>();
souffle::RelationWrapper<t_btree_iii__1_2_0__011__010__111> wrapper_rel_79_SSTORE;
// -- Table: RETURNPRIVATE
Own<t_btree_ii__0_1__11__10> rel_80_RETURNPRIVATE = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_80_RETURNPRIVATE;
// -- Table: GT
Own<t_btree_iiii__1_3_0_2__1111__0101> rel_81_GT = mk<t_btree_iiii__1_3_0_2__1111__0101>();
souffle::RelationWrapper<t_btree_iiii__1_3_0_2__1111__0101> wrapper_rel_81_GT;
// -- Table: ISZERO
Own<t_btree_iii__1_2_0__011__010__111> rel_82_ISZERO = mk<t_btree_iii__1_2_0__011__010__111>();
souffle::RelationWrapper<t_btree_iii__1_2_0__011__010__111> wrapper_rel_82_ISZERO;
// -- Table: MUL
Own<t_btree_iiii__0_1_2_3__1111> rel_83_MUL = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_83_MUL;
// -- Table: SHL
Own<t_btree_iiii__0_1_2_3__1111> rel_84_SHL = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_84_SHL;
// -- Table: AND
Own<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010> rel_85_AND = mk<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010>();
souffle::RelationWrapper<t_btree_iiii__1_0_2_3__2_1__1111__0110__0100__0010> wrapper_rel_85_AND;
// -- Table: AntiMaskOp
Own<t_btree_iiii__0_1_2_3__1111> rel_86_AntiMaskOp = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_86_AntiMaskOp;
// -- Table: @delta_AntiMaskOp
Own<t_btree_iiii__0_1_2_3__1111> rel_87_delta_AntiMaskOp = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_AntiMaskOp
Own<t_btree_iiii__0_1_2_3__1111> rel_88_new_AntiMaskOp = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: OR
Own<t_btree_iiii__2_3_0_1__1_3__1111__0101__0011> rel_89_OR = mk<t_btree_iiii__2_3_0_1__1_3__1111__0101__0011>();
souffle::RelationWrapper<t_btree_iiii__2_3_0_1__1_3__1111__0101__0011> wrapper_rel_89_OR;
// -- Table: RETURNDATACOPY
Own<t_btree_iiii__0__1_0_2_3__1000__1111__0100> rel_90_RETURNDATACOPY = mk<t_btree_iiii__0__1_0_2_3__1000__1111__0100>();
souffle::RelationWrapper<t_btree_iiii__0__1_0_2_3__1000__1111__0100> wrapper_rel_90_RETURNDATACOPY;
// -- Table: callToReturnDataOp.To
Own<t_btree_i__0__1> rel_91_callToReturnDataOp_To = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_91_callToReturnDataOp_To;
// -- Table: CALLDATALOAD
Own<t_btree_iii__1__0_1_2__010__100__111> rel_92_CALLDATALOAD = mk<t_btree_iii__1__0_1_2__010__100__111>();
souffle::RelationWrapper<t_btree_iii__1__0_1_2__010__100__111> wrapper_rel_92_CALLDATALOAD;
// -- Table: __agg_single13
Own<t_btree_i__0__1> rel_93_agg_single13 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_93_agg_single13;
// -- Table: CALLDATACOPY
Own<t_btree_iiii__0__3_0_1_2__1000__1111__0001> rel_94_CALLDATACOPY = mk<t_btree_iiii__0__3_0_1_2__1000__1111__0001>();
souffle::RelationWrapper<t_btree_iiii__0__3_0_1_2__1000__1111__0001> wrapper_rel_94_CALLDATACOPY;
// -- Table: DIV
Own<t_btree_iiii__0_1_2_3__1111> rel_95_DIV = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_95_DIV;
// -- Table: CALLCODE
Own<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> rel_96_CALLCODE = mk<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111>();
souffle::RelationWrapper<t_btree_iiiiiiii__0_1_2_3_4_5_6_7__11111111> wrapper_rel_96_CALLCODE;
// -- Table: CALLStatement
Own<t_btree_ii__0_1__11__10> rel_97_CALLStatement = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_97_CALLStatement;
// -- Table: LOGIndexedArg
Own<t_btree_iii__0_1_2__111> rel_98_LOGIndexedArg = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_98_LOGIndexedArg;
// -- Table: Statement_Block
Own<t_btree_ii__1_0__0__11__10__01> rel_99_Statement_Block = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_99_Statement_Block;
// -- Table: ActualArgs
Own<t_btree_iii__1__0_2_1__010__101__111> rel_100_ActualArgs = mk<t_btree_iii__1__0_2_1__010__101__111>();
souffle::RelationWrapper<t_btree_iii__1__0_2_1__010__101__111> wrapper_rel_100_ActualArgs;
// -- Table: mloadAliases.BlockHasFromStmt
Own<t_btree_ii__1_0__0__11__10__01> rel_101_mloadAliases_BlockHasFromStmt = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_101_mloadAliases_BlockHasFromStmt;
// -- Table: mstoreFreePtrOrder.BlockHasFromStmt
Own<t_btree_ii__1_0__11__01> rel_102_mstoreFreePtrOrder_BlockHasFromStmt = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_102_mstoreFreePtrOrder_BlockHasFromStmt;
// -- Table: mstoreFreePtrOrder.BlockHasToStmt
Own<t_btree_ii__0_1__11__10> rel_103_mstoreFreePtrOrder_BlockHasToStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_103_mstoreFreePtrOrder_BlockHasToStmt;
// -- Table: DirectThrowBlock
Own<t_btree_i__0__1> rel_104_DirectThrowBlock = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_104_DirectThrowBlock;
// -- Table: mloadAliasesPrecise.BlockHasBypassingStmt
Own<t_btree_ii__0_1__11__10> rel_105_mloadAliasesPrecise_BlockHasBypassingStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_105_mloadAliasesPrecise_BlockHasBypassingStmt;
// -- Table: callToReturnDataOp.BlockHasBypassingStmt
Own<t_btree_ii__1_0__0__11__10__01> rel_106_callToReturnDataOp_BlockHasBypassingStmt = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_106_callToReturnDataOp_BlockHasBypassingStmt;
// -- Table: callToReturnDataOp.BlockHasToStmt
Own<t_btree_ii__0_1__11__10> rel_107_callToReturnDataOp_BlockHasToStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_107_callToReturnDataOp_BlockHasToStmt;
// -- Table: inliner.In_ActualArgs
Own<t_btree_iii__1_0_2__010__111> rel_108_inliner_In_ActualArgs = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_108_inliner_In_ActualArgs;
// -- Table: inliner.ThrowBlock
Own<t_btree_i__0__1> rel_109_inliner_ThrowBlock = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_109_inliner_ThrowBlock;
// -- Table: CallGraphEdge
Own<t_btree_ii__1_0__0__11__10__01> rel_110_CallGraphEdge = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_110_CallGraphEdge;
// -- Table: FormalArgs
Own<t_btree_iii__0_2__0_1_2__100__101__110__111> rel_111_FormalArgs = mk<t_btree_iii__0_2__0_1_2__100__101__110__111>();
souffle::RelationWrapper<t_btree_iii__0_2__0_1_2__100__101__110__111> wrapper_rel_111_FormalArgs;
// -- Table: isVariable
Own<t_btree_i__0__1> rel_112_isVariable = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_112_isVariable;
// -- Table: inliner.FunHasArgMismatch
Own<t_btree_i__0__1> rel_113_inliner_FunHasArgMismatch = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_113_inliner_FunHasArgMismatch;
// -- Table: FunctionEntry
Own<t_btree_i__0__1> rel_114_FunctionEntry = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_114_FunctionEntry;
// -- Table: InFunction
Own<t_btree_ii__1_0__0__11__10__01> rel_115_InFunction = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_115_InFunction;
// -- Table: Statement_Function
Own<t_btree_ii__1_0__0__11__10__01> rel_116_Statement_Function = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_116_Statement_Function;
// -- Table: inliner.FunctionContainsMemConsStmt
Own<t_btree_i__0__1> rel_117_inliner_FunctionContainsMemConsStmt = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_117_inliner_FunctionContainsMemConsStmt;
// -- Table: Variable_Function
Own<t_btree_ii__0_1__11__10> rel_118_Variable_Function = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_118_Variable_Function;
// -- Table: FormalReturnArgs
Own<t_btree_iii__1__0_2_1__010__101__111> rel_119_FormalReturnArgs = mk<t_btree_iii__1__0_2_1__010__101__111>();
souffle::RelationWrapper<t_btree_iii__1__0_2_1__010__101__111> wrapper_rel_119_FormalReturnArgs;
// -- Table: inliner.In_FormalReturnArgs
Own<t_btree_iii__0_2__1_0_2__010__101__110__111> rel_120_inliner_In_FormalReturnArgs = mk<t_btree_iii__0_2__1_0_2__010__101__110__111>();
souffle::RelationWrapper<t_btree_iii__0_2__1_0_2__010__101__110__111> wrapper_rel_120_inliner_In_FormalReturnArgs;
// -- Table: LocalBlockEdge
Own<t_btree_ii__1_0__0__11__10__01> rel_121_LocalBlockEdge = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_121_LocalBlockEdge;
// -- Table: DoesNotDominate
Own<t_btree_ii__0_1__11> rel_122_DoesNotDominate = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_122_DoesNotDominate;
// -- Table: @delta_DoesNotDominate
Own<t_btree_ii__0_1__11> rel_123_delta_DoesNotDominate = mk<t_btree_ii__0_1__11>();
// -- Table: @new_DoesNotDominate
Own<t_btree_ii__0_1__11> rel_124_new_DoesNotDominate = mk<t_btree_ii__0_1__11>();
// -- Table: Dominates
Own<t_btree_ii__0_1__11> rel_125_Dominates = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_125_Dominates;
// -- Table: StructuredLoopBackEdge
Own<t_btree_ii__0_1__11> rel_126_StructuredLoopBackEdge = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_126_StructuredLoopBackEdge;
// -- Table: StructuredLoopHead
Own<t_btree_i__0__1> rel_127_StructuredLoopHead = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_127_StructuredLoopHead;
// -- Table: BlockInStructuredLoop
Own<t_btree_ii__0_1__11> rel_128_BlockInStructuredLoop = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_128_BlockInStructuredLoop;
// -- Table: @delta_BlockInStructuredLoop
Own<t_btree_ii__0_1__11> rel_129_delta_BlockInStructuredLoop = mk<t_btree_ii__0_1__11>();
// -- Table: @new_BlockInStructuredLoop
Own<t_btree_ii__0_1__11> rel_130_new_BlockInStructuredLoop = mk<t_btree_ii__0_1__11>();
// -- Table: StatementInStructuredLoop
Own<t_btree_ii__0_1__11__10> rel_131_StatementInStructuredLoop = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_131_StatementInStructuredLoop;
// -- Table: inductionVariableFlow.TransferBoundary
Own<t_btree_i__0__1> rel_132_inductionVariableFlow_TransferBoundary = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_132_inductionVariableFlow_TransferBoundary;
// -- Table: LocalBlockPath
Own<t_btree_ii__0_1__11__10> rel_133_LocalBlockPath = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_133_LocalBlockPath;
// -- Table: @delta_LocalBlockPath
Own<t_btree_ii__0_1__11> rel_134_delta_LocalBlockPath = mk<t_btree_ii__0_1__11>();
// -- Table: @new_LocalBlockPath
Own<t_btree_ii__0_1__11> rel_135_new_LocalBlockPath = mk<t_btree_ii__0_1__11>();
// -- Table: mloadAliases.FromStmtToStmtDiffBlockHavePath
Own<t_btree_iiii__0_1_2_3__1111> rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath
Own<t_btree_iiii__0_1_2_3__1111> rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath;
// -- Table: callToReturnDataOp.FromStmtToStmtDiffBlockHavePath
Own<t_btree_iiii__0_1_2_3__1111> rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath;
// -- Table: AfterCALLCheckRetDataSize
Own<t_btree_i__0__1> rel_139_AfterCALLCheckRetDataSize = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_139_AfterCALLCheckRetDataSize;
// -- Table: IsBlock
Own<t_btree_i__0__1> rel_140_IsBlock = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_140_IsBlock;
// -- Table: inliner.FunCalledWithImpreciseControlFlow
Own<t_btree_i__0__1> rel_141_inliner_FunCalledWithImpreciseControlFlow = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_141_inliner_FunCalledWithImpreciseControlFlow;
// -- Table: inliner.Function_Exit
Own<t_btree_ii__0_1__11__10> rel_142_inliner_Function_Exit = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_142_inliner_Function_Exit;
// -- Table: inliner.FunHasRetMismatch
Own<t_btree_i__0__1> rel_143_inliner_FunHasRetMismatch = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_143_inliner_FunHasRetMismatch;
// -- Table: inliner.In_ValidBlock
Own<t_btree_i__0__1> rel_144_inliner_In_ValidBlock = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_144_inliner_In_ValidBlock;
// -- Table: Statement_Next
Own<t_btree_ii__1_0__0__11__10__01> rel_145_Statement_Next = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_145_Statement_Next;
// -- Table: Helper_NextStatementInSameBlock
Own<t_btree_ii__0_1__11__10> rel_146_Helper_NextStatementInSameBlock = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_146_Helper_NextStatementInSameBlock;
// -- Table: LocalStatementPathInBlock
Own<t_btree_ii__0_1__11__10> rel_147_LocalStatementPathInBlock = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_147_LocalStatementPathInBlock;
// -- Table: @delta_LocalStatementPathInBlock
Own<t_btree_ii__0_1__11> rel_148_delta_LocalStatementPathInBlock = mk<t_btree_ii__0_1__11>();
// -- Table: @new_LocalStatementPathInBlock
Own<t_btree_ii__0_1__11> rel_149_new_LocalStatementPathInBlock = mk<t_btree_ii__0_1__11>();
// -- Table: mloadAliases.FromStmtToStmtSameBlock
Own<t_btree_ii__0_1__11> rel_150_mloadAliases_FromStmtToStmtSameBlock = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_150_mloadAliases_FromStmtToStmtSameBlock;
// -- Table: mloadAliasesPrecise.FromStmtToStmtSameBlockInterrupted
Own<t_btree_ii__0_1__11> rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted;
// -- Table: mloadAliasesPrecise.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_ii__0_1__11> rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtSameBlock
Own<t_btree_ii__0_1__11> rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock;
// -- Table: mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiii__0_1_2_3__1111> rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_ii__0_1__11> rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: mloadAliasesPrecise.ReachableBypassingAny
Own<t_btree_ii__0_1__11> rel_156_mloadAliasesPrecise_ReachableBypassingAny = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_156_mloadAliasesPrecise_ReachableBypassingAny;
// -- Table: MLOADSFreePtrUnchangedNoMemReuse
Own<t_btree_ii__0_1__11> rel_157_MLOADSFreePtrUnchangedNoMemReuse = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_157_MLOADSFreePtrUnchangedNoMemReuse;
// -- Table: callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiii__0_1_2_3__1111> rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: callToReturnDataOp.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_ii__0_1__11> rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: callToReturnDataOp.FromStmtToStmtSameBlock
Own<t_btree_ii__0_1__11> rel_160_callToReturnDataOp_FromStmtToStmtSameBlock = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_160_callToReturnDataOp_FromStmtToStmtSameBlock;
// -- Table: callToReturnDataOp.FromStmtToStmtSameBlockInterrupted
Own<t_btree_ii__0_1__11> rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted;
// -- Table: callToReturnDataOp.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_ii__0_1__11> rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted;
// -- Table: callToReturnDataOp.ReachableBypassingAny
Own<t_btree_ii__0_1__11> rel_163_callToReturnDataOp_ReachableBypassingAny = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_163_callToReturnDataOp_ReachableBypassingAny;
// -- Table: RETURNDATACOPYOfCALL
Own<t_btree_iiiii__0_4_1_2_3__11111__10001> rel_164_RETURNDATACOPYOfCALL = mk<t_btree_iiiii__0_4_1_2_3__11111__10001>();
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001> wrapper_rel_164_RETURNDATACOPYOfCALL;
// -- Table: RETURNDATASIZEOfCALL
Own<t_btree_iii__2_1__1_0_2__001__011__010__111> rel_165_RETURNDATASIZEOfCALL = mk<t_btree_iii__2_1__1_0_2__001__011__010__111>();
souffle::RelationWrapper<t_btree_iii__2_1__1_0_2__001__011__010__111> wrapper_rel_165_RETURNDATASIZEOfCALL;
// -- Table: RETURNDATACOPYAllDataOfCALL
Own<t_btree_iii__2_1_0__001__011__111> rel_166_RETURNDATACOPYAllDataOfCALL = mk<t_btree_iii__2_1_0__001__011__111>();
souffle::RelationWrapper<t_btree_iii__2_1_0__001__011__111> wrapper_rel_166_RETURNDATACOPYAllDataOfCALL;
// -- Table: Block_Tail
Own<t_btree_ii__0_1__11__10> rel_167_Block_Tail = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_167_Block_Tail;
// -- Table: CALLUpdatesFreePtr
Own<t_btree_i__0__1> rel_168_CALLUpdatesFreePtr = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_168_CALLUpdatesFreePtr;
// -- Table: @delta_CALLUpdatesFreePtr
Own<t_btree_i__0__1> rel_169_delta_CALLUpdatesFreePtr = mk<t_btree_i__0__1>();
// -- Table: @new_CALLUpdatesFreePtr
Own<t_btree_i__0__1> rel_170_new_CALLUpdatesFreePtr = mk<t_btree_i__0__1>();
// -- Table: FunctionUpdatesFreePtr
Own<t_btree_i__0__1> rel_171_FunctionUpdatesFreePtr = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_171_FunctionUpdatesFreePtr;
// -- Table: @delta_FunctionUpdatesFreePtr
Own<t_btree_i__0__1> rel_172_delta_FunctionUpdatesFreePtr = mk<t_btree_i__0__1>();
// -- Table: @new_FunctionUpdatesFreePtr
Own<t_btree_i__0__1> rel_173_new_FunctionUpdatesFreePtr = mk<t_btree_i__0__1>();
// -- Table: mloadAliases.Bypassing
Own<t_btree_i__0__1> rel_174_mloadAliases_Bypassing = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_174_mloadAliases_Bypassing;
// -- Table: mloadAliases.BlockHasBypassingStmt
Own<t_btree_ii__0_1__11__10> rel_175_mloadAliases_BlockHasBypassingStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_175_mloadAliases_BlockHasBypassingStmt;
// -- Table: mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiii__0_1_2_3__1111> rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: mloadAliases.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_ii__0_1__11> rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: mloadAliases.FromStmtToStmtSameBlockInterrupted
Own<t_btree_ii__0_1__11> rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted;
// -- Table: mloadAliases.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_ii__0_1__11> rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted;
// -- Table: mloadAliases.ReachableBypassingAny
Own<t_btree_ii__0_1__11> rel_180_mloadAliases_ReachableBypassingAny = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_180_mloadAliases_ReachableBypassingAny;
// -- Table: MLOADSFreePtrUnchanged
Own<t_btree_ii__1_0__0__11__10__01> rel_181_MLOADSFreePtrUnchanged = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_181_MLOADSFreePtrUnchanged;
// -- Table: mstoreFreePtrOrder.Bypassing
Own<t_btree_i__0__1> rel_182_mstoreFreePtrOrder_Bypassing = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_182_mstoreFreePtrOrder_Bypassing;
// -- Table: mstoreFreePtrOrder.BlockHasBypassingStmt
Own<t_btree_ii__0_1__11__10> rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiii__0_1_2_3__1111> rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_ii__0_1__11> rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtSameBlockInterrupted
Own<t_btree_ii__0_1__11> rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted;
// -- Table: mstoreFreePtrOrder.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_ii__0_1__11> rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted;
// -- Table: mstoreFreePtrOrder.ReachableBypassingAny
Own<t_btree_ii__0_1__11> rel_188_mstoreFreePtrOrder_ReachableBypassingAny = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_188_mstoreFreePtrOrder_ReachableBypassingAny;
// -- Table: MLOADFreePtrLoadsValueStoredAt
Own<t_btree_ii__1_0__0__11__10__01> rel_189_MLOADFreePtrLoadsValueStoredAt = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_189_MLOADFreePtrLoadsValueStoredAt;
// -- Table: MSTOREFreePtrOrder
Own<t_btree_ii__1_0__0__11__10__01> rel_190_MSTOREFreePtrOrder = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_190_MSTOREFreePtrOrder;
// -- Table: LoopExitCond
Own<t_btree_ii__0_1__11> rel_191_LoopExitCond = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_191_LoopExitCond;
// -- Table: ActualReturnArgs
Own<t_btree_iii__1__2_0_1__001__010__101__111> rel_192_ActualReturnArgs = mk<t_btree_iii__1__2_0_1__001__010__101__111>();
souffle::RelationWrapper<t_btree_iii__1__2_0_1__001__010__101__111> wrapper_rel_192_ActualReturnArgs;
// -- Table: FunctionCallReturn
Own<t_btree_iii__1_0_2__010__111> rel_193_FunctionCallReturn = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_193_FunctionCallReturn;
// -- Table: inductionVariableFlow.TransferOpcode
Own<t_btree_i__0__1> rel_194_inductionVariableFlow_TransferOpcode = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_194_inductionVariableFlow_TransferOpcode;
// -- Table: inductionVariableFlow.Flows
Own<t_btree_ii__1_0__0__11__10__01> rel_195_inductionVariableFlow_Flows = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_195_inductionVariableFlow_Flows;
// -- Table: @delta_inductionVariableFlow.Flows
Own<t_btree_ii__0_1__11> rel_196_delta_inductionVariableFlow_Flows = mk<t_btree_ii__0_1__11>();
// -- Table: @new_inductionVariableFlow.Flows
Own<t_btree_ii__0_1__11> rel_197_new_inductionVariableFlow_Flows = mk<t_btree_ii__0_1__11>();
// -- Table: inductionVariableFlow.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_198_inductionVariableFlow_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_198_inductionVariableFlow_FunctionFlowSummary;
// -- Table: @delta_inductionVariableFlow.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_199_delta_inductionVariableFlow_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_inductionVariableFlow.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_200_new_inductionVariableFlow_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: ShiftConst
Own<t_btree_ii__0_1__11__10> rel_201_ShiftConst = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_201_ShiftConst;
// -- Table: @delta_ShiftConst
Own<t_btree_ii__1_0__11__02> rel_202_delta_ShiftConst = mk<t_btree_ii__1_0__11__02>();
// -- Table: @new_ShiftConst
Own<t_btree_ii__1_0__11__02> rel_203_new_ShiftConst = mk<t_btree_ii__1_0__11__02>();
// -- Table: LShiftBytes
Own<t_btree_iii__0_2_1__101__111> rel_204_LShiftBytes = mk<t_btree_iii__0_2_1__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__101__111> wrapper_rel_204_LShiftBytes;
// -- Table: Mask_Length
Own<t_btree_ii__0_1__11__10> rel_205_Mask_Length = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_205_Mask_Length;
// -- Table: LowBytesMaskOp
Own<t_btree_iii__0_1_2__100__111> rel_206_LowBytesMaskOp = mk<t_btree_iii__0_1_2__100__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111> wrapper_rel_206_LowBytesMaskOp;
// -- Table: PartialMSTORE
Own<t_btree_iiii__0_1_2_3__1000__1111> rel_207_PartialMSTORE = mk<t_btree_iiii__0_1_2_3__1000__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1000__1111> wrapper_rel_207_PartialMSTORE;
// -- Table: variableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_208_variableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_208_variableValueConstantFolding_RequestConstantFold2;
// -- Table: @delta_variableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_209_delta_variableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_variableValueConstantFolding.RequestConstantFold2
Own<t_btree_iii__0_1_2__111> rel_210_new_variableValueConstantFolding_RequestConstantFold2 = mk<t_btree_iii__0_1_2__111>();
// -- Table: Variable_Value
Own<t_btree_ii__1_0__0__11__10__01> rel_211_Variable_Value = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_211_Variable_Value;
// -- Table: @delta_Variable_Value
Own<t_btree_ii__0_1__11__10> rel_212_delta_Variable_Value = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_Variable_Value
Own<t_btree_ii__0_1__11__10> rel_213_new_Variable_Value = mk<t_btree_ii__0_1__11__10>();
// -- Table: AuxStatementOpAndConstantArgValues
Own<t_btree_iiii__1_2_3_0__1111__0111> rel_214_AuxStatementOpAndConstantArgValues = mk<t_btree_iiii__1_2_3_0__1111__0111>();
souffle::RelationWrapper<t_btree_iiii__1_2_3_0__1111__0111> wrapper_rel_214_AuxStatementOpAndConstantArgValues;
// -- Table: @delta_AuxStatementOpAndConstantArgValues
Own<t_btree_iiii__0_1_2_3__1111> rel_215_delta_AuxStatementOpAndConstantArgValues = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_AuxStatementOpAndConstantArgValues
Own<t_btree_iiii__0_1_2_3__1111> rel_216_new_AuxStatementOpAndConstantArgValues = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: InductionVariable
Own<t_btree_ii__0_1__11> rel_217_InductionVariable = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_217_InductionVariable;
// -- Table: @delta_InductionVariable
Own<t_btree_ii__0_1__11> rel_218_delta_InductionVariable = mk<t_btree_ii__0_1__11>();
// -- Table: @new_InductionVariable
Own<t_btree_ii__0_1__11> rel_219_new_InductionVariable = mk<t_btree_ii__0_1__11>();
// -- Table: GlobalInductionVariableStore
Own<t_btree_ii__0_1__11__10> rel_220_GlobalInductionVariableStore = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_220_GlobalInductionVariableStore;
// -- Table: @delta_GlobalInductionVariableStore
Own<t_btree_ii__0_1__11__10> rel_221_delta_GlobalInductionVariableStore = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_GlobalInductionVariableStore
Own<t_btree_ii__0_1__11__10> rel_222_new_GlobalInductionVariableStore = mk<t_btree_ii__0_1__11__10>();
// -- Table: Variable_NumericValue
Own<t_btree_ii__1_0__0_1__11__12__10__01> rel_223_Variable_NumericValue = mk<t_btree_ii__1_0__0_1__11__12__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0_1__11__12__10__01> wrapper_rel_223_Variable_NumericValue;
// -- Table: @delta_Variable_NumericValue
Own<t_btree_ii__0_1__11__10> rel_224_delta_Variable_NumericValue = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_Variable_NumericValue
Own<t_btree_ii__0_1__11__10> rel_225_new_Variable_NumericValue = mk<t_btree_ii__0_1__11__10>();
// -- Table: MSTOREFreePtr_IncByAmount
Own<t_btree_ii__0_1__11__10> rel_226_MSTOREFreePtr_IncByAmount = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_226_MSTOREFreePtr_IncByAmount;
// -- Table: @delta_MSTOREFreePtr_IncByAmount
Own<t_btree_ii__0_1__11__10> rel_227_delta_MSTOREFreePtr_IncByAmount = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_MSTOREFreePtr_IncByAmount
Own<t_btree_ii__0_1__11__10> rel_228_new_MSTOREFreePtr_IncByAmount = mk<t_btree_ii__0_1__11__10>();
// -- Table: Variable_SymbolicValue
Own<t_btree_ii__1_0__0__11__10__01> rel_229_Variable_SymbolicValue = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_229_Variable_SymbolicValue;
// -- Table: @delta_Variable_SymbolicValue
Own<t_btree_ii__1_0__0__11__10__01> rel_230_delta_Variable_SymbolicValue = mk<t_btree_ii__1_0__0__11__10__01>();
// -- Table: @new_Variable_SymbolicValue
Own<t_btree_ii__1_0__0__11__10__01> rel_231_new_Variable_SymbolicValue = mk<t_btree_ii__1_0__0__11__10__01>();
// -- Table: FreePointerBasedValue
Own<t_btree_iiii__0_3_2__1_0_2_3__1000__1001__1011__1111__1100__0100> rel_232_FreePointerBasedValue = mk<t_btree_iiii__0_3_2__1_0_2_3__1000__1001__1011__1111__1100__0100>();
souffle::RelationWrapper<t_btree_iiii__0_3_2__1_0_2_3__1000__1001__1011__1111__1100__0100> wrapper_rel_232_FreePointerBasedValue;
// -- Table: @delta_FreePointerBasedValue
Own<t_btree_iiii__0_3_2__1_0_3_2__1000__1001__1011__1111__1100__1101__0100> rel_233_delta_FreePointerBasedValue = mk<t_btree_iiii__0_3_2__1_0_3_2__1000__1001__1011__1111__1100__1101__0100>();
// -- Table: @new_FreePointerBasedValue
Own<t_btree_iiii__0_3_2__1_0_3_2__1000__1001__1011__1111__1100__1101__0100> rel_234_new_FreePointerBasedValue = mk<t_btree_iiii__0_3_2__1_0_3_2__1000__1001__1011__1111__1100__1101__0100>();
// -- Table: FreePointerBasedValuesWithFreePointerAliases
Own<t_btree_ii__1_0__0__11__10__01> rel_235_FreePointerBasedValuesWithFreePointerAliases = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_235_FreePointerBasedValuesWithFreePointerAliases;
// -- Table: @delta_FreePointerBasedValuesWithFreePointerAliases
Own<t_btree_ii__0_1__11> rel_236_delta_FreePointerBasedValuesWithFreePointerAliases = mk<t_btree_ii__0_1__11>();
// -- Table: @new_FreePointerBasedValuesWithFreePointerAliases
Own<t_btree_ii__0_1__11> rel_237_new_FreePointerBasedValuesWithFreePointerAliases = mk<t_btree_ii__0_1__11>();
// -- Table: FreePointerBasedValuesNumDiff
Own<t_btree_iii__2__1_2__0_2_1__001__011__012__010__100__101__111> rel_238_FreePointerBasedValuesNumDiff = mk<t_btree_iii__2__1_2__0_2_1__001__011__012__010__100__101__111>();
souffle::RelationWrapper<t_btree_iii__2__1_2__0_2_1__001__011__012__010__100__101__111> wrapper_rel_238_FreePointerBasedValuesNumDiff;
// -- Table: @delta_FreePointerBasedValuesNumDiff
Own<t_btree_iii__0_1_2__111> rel_239_delta_FreePointerBasedValuesNumDiff = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_FreePointerBasedValuesNumDiff
Own<t_btree_iii__0_1_2__111> rel_240_new_FreePointerBasedValuesNumDiff = mk<t_btree_iii__0_1_2__111>();
// -- Table: FreePointerBasedValuesWithFreePointerAliasesNumVals
Own<t_btree_iiii__0_1_2_3__1111> rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals;
// -- Table: @delta_FreePointerBasedValuesWithFreePointerAliasesNumVals
Own<t_btree_iiii__0_1_2_3__1111> rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_FreePointerBasedValuesWithFreePointerAliasesNumVals
Own<t_btree_iiii__0_1_2_3__1111> rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: StatementWritesMemoryOfConstantLength
Own<t_btree_iii__0_1_2__111> rel_244_StatementWritesMemoryOfConstantLength = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_244_StatementWritesMemoryOfConstantLength;
// -- Table: @delta_StatementWritesMemoryOfConstantLength
Own<t_btree_iii__0_1_2__111> rel_245_delta_StatementWritesMemoryOfConstantLength = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_StatementWritesMemoryOfConstantLength
Own<t_btree_iii__0_1_2__111> rel_246_new_StatementWritesMemoryOfConstantLength = mk<t_btree_iii__0_1_2__111>();
// -- Table: MemoryAddressVar
Own<t_btree_i__0__1> rel_247_MemoryAddressVar = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_247_MemoryAddressVar;
// -- Table: @delta_MemoryAddressVar
Own<t_btree_i__0__1> rel_248_delta_MemoryAddressVar = mk<t_btree_i__0__1>();
// -- Table: @new_MemoryAddressVar
Own<t_btree_i__0__1> rel_249_new_MemoryAddressVar = mk<t_btree_i__0__1>();
// -- Table: MemoryAddressVariable_Function
Own<t_btree_ii__1_0__0__11__10__01> rel_250_MemoryAddressVariable_Function = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_250_MemoryAddressVariable_Function;
// -- Table: @delta_MemoryAddressVariable_Function
Own<t_btree_ii__0_1__11> rel_251_delta_MemoryAddressVariable_Function = mk<t_btree_ii__0_1__11>();
// -- Table: @new_MemoryAddressVariable_Function
Own<t_btree_ii__0_1__11> rel_252_new_MemoryAddressVariable_Function = mk<t_btree_ii__0_1__11>();
// -- Table: MemoryAddressVarsNumDiff
Own<t_btree_iii__1_2__0_1_2__012__100__110__112__111> rel_253_MemoryAddressVarsNumDiff = mk<t_btree_iii__1_2__0_1_2__012__100__110__112__111>();
souffle::RelationWrapper<t_btree_iii__1_2__0_1_2__012__100__110__112__111> wrapper_rel_253_MemoryAddressVarsNumDiff;
// -- Table: @delta_MemoryAddressVarsNumDiff
Own<t_btree_iii__0_1_2__112__111> rel_254_delta_MemoryAddressVarsNumDiff = mk<t_btree_iii__0_1_2__112__111>();
// -- Table: @new_MemoryAddressVarsNumDiff
Own<t_btree_iii__0_1_2__112__111> rel_255_new_MemoryAddressVarsNumDiff = mk<t_btree_iii__0_1_2__112__111>();
// -- Table: PossibleStructAllocation
Own<t_btree_iiii__0_1_2_3__1111> rel_256_PossibleStructAllocation = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_256_PossibleStructAllocation;
// -- Table: @delta_PossibleStructAllocation
Own<t_btree_iiii__2_0_1_3__1111__0010> rel_257_delta_PossibleStructAllocation = mk<t_btree_iiii__2_0_1_3__1111__0010>();
// -- Table: @new_PossibleStructAllocation
Own<t_btree_iiii__2_0_1_3__1111__0010> rel_258_new_PossibleStructAllocation = mk<t_btree_iiii__2_0_1_3__1111__0010>();
// -- Table: PossibleStructArg
Own<t_btree_iii__0_1_2__111> rel_259_PossibleStructArg = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_259_PossibleStructArg;
// -- Table: @delta_PossibleStructArg
Own<t_btree_iii__0_1_2__111> rel_260_delta_PossibleStructArg = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_PossibleStructArg
Own<t_btree_iii__0_1_2__111> rel_261_new_PossibleStructArg = mk<t_btree_iii__0_1_2__111>();
// -- Table: InductionVariableIncreasesByConst
Own<t_btree_iii__2_0_1__001__101__111> rel_262_InductionVariableIncreasesByConst = mk<t_btree_iii__2_0_1__001__101__111>();
souffle::RelationWrapper<t_btree_iii__2_0_1__001__101__111> wrapper_rel_262_InductionVariableIncreasesByConst;
// -- Table: @delta_InductionVariableIncreasesByConst
Own<t_btree_iii__2_0_1__001__101__111> rel_263_delta_InductionVariableIncreasesByConst = mk<t_btree_iii__2_0_1__001__101__111>();
// -- Table: @new_InductionVariableIncreasesByConst
Own<t_btree_iii__2_0_1__001__101__111> rel_264_new_InductionVariableIncreasesByConst = mk<t_btree_iii__2_0_1__001__101__111>();
// -- Table: InductionVariableLowerBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_265_InductionVariableLowerBoundVar = mk<t_btree_iii__0_1_2__100__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111> wrapper_rel_265_InductionVariableLowerBoundVar;
// -- Table: @delta_InductionVariableLowerBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_266_delta_InductionVariableLowerBoundVar = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_InductionVariableLowerBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_267_new_InductionVariableLowerBoundVar = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: InductionVariableUpperBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_268_InductionVariableUpperBoundVar = mk<t_btree_iii__0_1_2__100__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111> wrapper_rel_268_InductionVariableUpperBoundVar;
// -- Table: @delta_InductionVariableUpperBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_269_delta_InductionVariableUpperBoundVar = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_InductionVariableUpperBoundVar
Own<t_btree_iii__0_1_2__100__111> rel_270_new_InductionVariableUpperBoundVar = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: MemoryCopyLoop
Own<t_btree_iii__2_0_1__001__111> rel_271_MemoryCopyLoop = mk<t_btree_iii__2_0_1__001__111>();
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111> wrapper_rel_271_MemoryCopyLoop;
// -- Table: @delta_MemoryCopyLoop
Own<t_btree_iii__0_1_2__111> rel_272_delta_MemoryCopyLoop = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_MemoryCopyLoop
Own<t_btree_iii__0_1_2__111> rel_273_new_MemoryCopyLoop = mk<t_btree_iii__0_1_2__111>();
// -- Table: MemoryCopyLoopConstLength
Own<t_btree_iiii__0_1_2_3__1111> rel_274_MemoryCopyLoopConstLength = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_274_MemoryCopyLoopConstLength;
// -- Table: @delta_MemoryCopyLoopConstLength
Own<t_btree_iiii__0_1_2_3__1111> rel_275_delta_MemoryCopyLoopConstLength = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_MemoryCopyLoopConstLength
Own<t_btree_iiii__0_1_2_3__1111> rel_276_new_MemoryCopyLoopConstLength = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: WellFormedLoopInductionVariable
Own<t_btree_iii__0_1_2__111> rel_277_WellFormedLoopInductionVariable = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_277_WellFormedLoopInductionVariable;
// -- Table: @delta_WellFormedLoopInductionVariable
Own<t_btree_iii__0_1_2__100__111> rel_278_delta_WellFormedLoopInductionVariable = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_WellFormedLoopInductionVariable
Own<t_btree_iii__0_1_2__100__111> rel_279_new_WellFormedLoopInductionVariable = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: StatementWritesMemoryCopiedFromLoop
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_280_StatementWritesMemoryCopiedFromLoop = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_280_StatementWritesMemoryCopiedFromLoop;
// -- Table: @delta_StatementWritesMemoryCopiedFromLoop
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_281_delta_StatementWritesMemoryCopiedFromLoop = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: @new_StatementWritesMemoryCopiedFromLoop
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_282_new_StatementWritesMemoryCopiedFromLoop = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: CALLReturnDataLengthVal
Own<t_btree_ii__1_0__11__01> rel_283_CALLReturnDataLengthVal = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_283_CALLReturnDataLengthVal;
// -- Table: @delta_CALLReturnDataLengthVal
Own<t_btree_ii__0_1__11> rel_284_delta_CALLReturnDataLengthVal = mk<t_btree_ii__0_1__11>();
// -- Table: @new_CALLReturnDataLengthVal
Own<t_btree_ii__0_1__11> rel_285_new_CALLReturnDataLengthVal = mk<t_btree_ii__0_1__11>();
// -- Table: CALLReturnsFixedSizeData
Own<t_btree_ii__0_1__11> rel_286_CALLReturnsFixedSizeData = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_286_CALLReturnsFixedSizeData;
// -- Table: @delta_CALLReturnsFixedSizeData
Own<t_btree_ii__0_1__11> rel_287_delta_CALLReturnsFixedSizeData = mk<t_btree_ii__0_1__11>();
// -- Table: @new_CALLReturnsFixedSizeData
Own<t_btree_ii__0_1__11> rel_288_new_CALLReturnsFixedSizeData = mk<t_btree_ii__0_1__11>();
// -- Table: variableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_289_variableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_289_variableValueConstantFolding_ConstantFoldResult2;
// -- Table: @delta_variableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1111> rel_290_delta_variableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_variableValueConstantFolding.ConstantFoldResult2
Own<t_btree_iiii__0_1_2_3__1111> rel_291_new_variableValueConstantFolding_ConstantFoldResult2 = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: variableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__111> rel_292_variableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_292_variableValueConstantFolding_ValidConstantFoldOperation;
// -- Table: @delta_variableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__100__111> rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_variableValueConstantFolding.ValidConstantFoldOperation
Own<t_btree_iii__0_1_2__100__111> rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: FreePointerBasedValuesEqual
Own<t_btree_ii__0_1__11__10> rel_295_FreePointerBasedValuesEqual = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_295_FreePointerBasedValuesEqual;
// -- Table: FreePointerBasedValue_AliasRep
Own<t_btree_ii__0_1__11__10> rel_296_FreePointerBasedValue_AliasRep = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_296_FreePointerBasedValue_AliasRep;
// -- Table: PossibleArrayAlias
Own<t_btree_ii__0_1__11__10> rel_297_PossibleArrayAlias = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_297_PossibleArrayAlias;
// -- Table: CALLReturnsArray
Own<t_btree_i__0__1> rel_298_CALLReturnsArray = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_298_CALLReturnsArray;
// -- Table: __agg_single2
Own<t_btree_i__0__1> rel_299_agg_single2 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_299_agg_single2;
// -- Table: VarPlusSixtyThreeAndNotThirtyOne
Own<t_btree_ii__0_1__11__10> rel_300_VarPlusSixtyThreeAndNotThirtyOne = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_300_VarPlusSixtyThreeAndNotThirtyOne;
// -- Table: ReturnDataByteArray
Own<t_btree_iii__0_1_2__111> rel_301_ReturnDataByteArray = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_301_ReturnDataByteArray;
// -- Table: IsABIEncodedArrayVar
Own<t_btree_i__0__1> rel_302_IsABIEncodedArrayVar = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_302_IsABIEncodedArrayVar;
// -- Table: @delta_IsABIEncodedArrayVar
Own<t_btree_i__0__1> rel_303_delta_IsABIEncodedArrayVar = mk<t_btree_i__0__1>();
// -- Table: @new_IsABIEncodedArrayVar
Own<t_btree_i__0__1> rel_304_new_IsABIEncodedArrayVar = mk<t_btree_i__0__1>();
// -- Table: ABIEncodedArrayVarsInSameClass
Own<t_btree_ii__0_1__11__10> rel_305_ABIEncodedArrayVarsInSameClass = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_305_ABIEncodedArrayVarsInSameClass;
// -- Table: ABIEncodedArrayVar_ClassRep
Own<t_btree_ii__0_1__11__10> rel_306_ABIEncodedArrayVar_ClassRep = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_306_ABIEncodedArrayVar_ClassRep;
// -- Table: ABIEncodedArrayNoFunctionSelector
Own<t_btree_i__0__1> rel_307_ABIEncodedArrayNoFunctionSelector = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_307_ABIEncodedArrayNoFunctionSelector;
// -- Table: ABIEncodedArrayReadByStmt
Own<t_btree_ii__0_1__11__10> rel_308_ABIEncodedArrayReadByStmt = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_308_ABIEncodedArrayReadByStmt;
// -- Table: ABIEncodedArrayWFunctionSelector
Own<t_btree_i__0__1> rel_309_ABIEncodedArrayWFunctionSelector = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_309_ABIEncodedArrayWFunctionSelector;
// -- Table: StatementUsesMemoryOfComputableLength
Own<t_btree_iii__0_2__0_1_2__100__101__110__111> rel_310_StatementUsesMemoryOfComputableLength = mk<t_btree_iii__0_2__0_1_2__100__101__110__111>();
souffle::RelationWrapper<t_btree_iii__0_2__0_1_2__100__101__110__111> wrapper_rel_310_StatementUsesMemoryOfComputableLength;
// -- Table: StatementReadsMemoryOfConstantLength
Own<t_btree_iii__0_1_2__111> rel_311_StatementReadsMemoryOfConstantLength = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_311_StatementReadsMemoryOfConstantLength;
// -- Table: Analytics_LenVarHasManyVars
Own<t_btree_ii__0_1__11> rel_312_Analytics_LenVarHasManyVars = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_312_Analytics_LenVarHasManyVars;
// -- Table: __agg_single3
Own<t_btree_i__0__1> rel_313_agg_single3 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_313_agg_single3;
// -- Table: Verbatim_MemConsStmtsLengths
Own<t_btree_iii__0_1_2__111> rel_314_Verbatim_MemConsStmtsLengths = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_314_Verbatim_MemConsStmtsLengths;
// -- Table: StatementWritesMemoryOfLength
Own<t_btree_iii__1__0_1_2__010__100__111> rel_315_StatementWritesMemoryOfLength = mk<t_btree_iii__1__0_1_2__010__100__111>();
souffle::RelationWrapper<t_btree_iii__1__0_1_2__010__100__111> wrapper_rel_315_StatementWritesMemoryOfLength;
// -- Table: StatementWritesMemoryOfConstantLengthAtMemAlias
Own<t_btree_iii__0_1_2__110__111> rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias = mk<t_btree_iii__0_1_2__110__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__110__111> wrapper_rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias;
// -- Table: memWriteToMemConsStmtImpr.BlockHasBypassingStmt
Own<t_btree_iiii__0_2_1__1_2_0_3__1010__1110__1111__0110> rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt = mk<t_btree_iiii__0_2_1__1_2_0_3__1010__1110__1111__0110>();
souffle::RelationWrapper<t_btree_iiii__0_2_1__1_2_0_3__1010__1110__1111__0110> wrapper_rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt;
// -- Table: mstoreToMemConsStmt.From
Own<t_btree_ii__0_1__11> rel_318_mstoreToMemConsStmt_From = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_318_mstoreToMemConsStmt_From;
// -- Table: mstoreToMemConsStmt.BlockHasFromStmt
Own<t_btree_iii__1_2_0__011__111> rel_319_mstoreToMemConsStmt_BlockHasFromStmt = mk<t_btree_iii__1_2_0__011__111>();
souffle::RelationWrapper<t_btree_iii__1_2_0__011__111> wrapper_rel_319_mstoreToMemConsStmt_BlockHasFromStmt;
// -- Table: StatementUsesMemoryOfNonComputableLength
Own<t_btree_iii__0_1_2__111> rel_320_StatementUsesMemoryOfNonComputableLength = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_320_StatementUsesMemoryOfNonComputableLength;
// -- Table: mstoreToMemConsStmt.To
Own<t_btree_ii__0_1__11> rel_321_mstoreToMemConsStmt_To = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_321_mstoreToMemConsStmt_To;
// -- Table: mstoreToMemConsStmt.BlockHasToStmt
Own<t_btree_iii__0_2_1__101__111> rel_322_mstoreToMemConsStmt_BlockHasToStmt = mk<t_btree_iii__0_2_1__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__101__111> wrapper_rel_322_mstoreToMemConsStmt_BlockHasToStmt;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtSameBlock
Own<t_btree_iii__0_1_2__111> rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock;
// -- Table: mstoreToMemConsStmt.Bypassing
Own<t_btree_ii__0_1__11> rel_325_mstoreToMemConsStmt_Bypassing = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_325_mstoreToMemConsStmt_Bypassing;
// -- Table: mstoreToMemConsStmt.BlockHasBypassingStmt
Own<t_btree_iii__0_2_1__101__111> rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt = mk<t_btree_iii__0_2_1__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__101__111> wrapper_rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_iii__0_1_2__111> rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtSameBlockInterrupted
Own<t_btree_iii__0_1_2__111> rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted;
// -- Table: mstoreToMemConsStmt.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_iii__0_1_2__111> rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted;
// -- Table: mstoreToMemConsStmt.ReachableBypassingAny
Own<t_btree_iii__1_0_2__010__111> rel_331_mstoreToMemConsStmt_ReachableBypassingAny = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_331_mstoreToMemConsStmt_ReachableBypassingAny;
// -- Table: InitialMemWriteToMemConsStmtWithNonComputableLength
Own<t_btree_ii__1_0__11__01> rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength;
// -- Table: __agg_subclause
Own<t_btree_iiiiiii__3_5_0_1_2_4_6__1111111__0001010> rel_333_agg_subclause = mk<t_btree_iiiiiii__3_5_0_1_2_4_6__1111111__0001010>();
souffle::RelationWrapper<t_btree_iiiiiii__3_5_0_1_2_4_6__1111111__0001010> wrapper_rel_333_agg_subclause;
// -- Table: StatementUsesMemoryOfNonComputableLength_LengthApprox
Own<t_btree_iii__0_1_2__111> rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox;
// -- Table: StatementReadsMemoryOfConstantLengthAtMemAlias
Own<t_btree_iii__0_1_2__112__111> rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias = mk<t_btree_iii__0_1_2__112__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__112__111> wrapper_rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias;
// -- Table: memWriteToMemConsStmtImpr.BlockHasToStmt
Own<t_btree_iiii__0_2_1_3__1010__1110__1111> rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt = mk<t_btree_iiii__0_2_1_3__1010__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_2_1_3__1010__1110__1111> wrapper_rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted
Own<t_btree_iii__0_1_2__111> rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock
Own<t_btree_iii__0_1_2__111> rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockInterrupted
Own<t_btree_iii__0_1_2__111> rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted;
// -- Table: memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted
Own<t_btree_iii__0_1_2__111> rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted;
// -- Table: memWriteToMemConsStmtImpr.ReachableBypassingAny
Own<t_btree_iii__1_0_2__010__110__111> rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny = mk<t_btree_iii__1_0_2__010__110__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__110__111> wrapper_rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny;
// -- Table: MemWriteToMemConsStmtWithConstantLength
Own<t_btree_iii__0_1_2__111> rel_344_MemWriteToMemConsStmtWithConstantLength = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_344_MemWriteToMemConsStmtWithConstantLength;
// -- Table: MemWriteToMemConsStmtWithNonComputableLength
Own<t_btree_ii__0_1__11> rel_345_MemWriteToMemConsStmtWithNonComputableLength = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_345_MemWriteToMemConsStmtWithNonComputableLength;
// -- Table: MemWriteToMemConsStmt
Own<t_btree_ii__0_1__11> rel_346_MemWriteToMemConsStmt = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_346_MemWriteToMemConsStmt;
// -- Table: MemWriteToMemConsStmtInfoInit
Own<t_btree_iiiii__1_2_4_0_3__11111__01102__01000> rel_347_MemWriteToMemConsStmtInfoInit = mk<t_btree_iiiii__1_2_4_0_3__11111__01102__01000>();
souffle::RelationWrapper<t_btree_iiiii__1_2_4_0_3__11111__01102__01000> wrapper_rel_347_MemWriteToMemConsStmtInfoInit;
// -- Table: MemWriteToMemConsStmtInvalid
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_348_MemWriteToMemConsStmtInvalid = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_348_MemWriteToMemConsStmtInvalid;
// -- Table: MemWriteToMemConsStmtInfo
Own<t_btree_iiiii__1_2_4_0_3__0_1_3__11111__11020__01102__01000> rel_349_MemWriteToMemConsStmtInfo = mk<t_btree_iiiii__1_2_4_0_3__0_1_3__11111__11020__01102__01000>();
souffle::RelationWrapper<t_btree_iiiii__1_2_4_0_3__0_1_3__11111__11020__01102__01000> wrapper_rel_349_MemWriteToMemConsStmtInfo;
// -- Table: MemWriteToMemConsStmtConflLowerLimit
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_350_MemWriteToMemConsStmtConflLowerLimit = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_350_MemWriteToMemConsStmtConflLowerLimit;
// -- Table: MemWriteToMemConsStmtLowerLimit
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_351_MemWriteToMemConsStmtLowerLimit = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_351_MemWriteToMemConsStmtLowerLimit;
// -- Table: MemWriteToMemConsStmtConflUpperLimit
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_352_MemWriteToMemConsStmtConflUpperLimit = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_352_MemWriteToMemConsStmtConflUpperLimit;
// -- Table: MemWriteToMemConsStmtUpperLimit
Own<t_btree_iiii__0_1_2_3__1110__1112__1111> rel_353_MemWriteToMemConsStmtUpperLimit = mk<t_btree_iiii__0_1_2_3__1110__1112__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1112__1111> wrapper_rel_353_MemWriteToMemConsStmtUpperLimit;
// -- Table: MemWriteToMemConsStmtPartOfPrev
Own<t_btree_iii__0_1_2__111> rel_354_MemWriteToMemConsStmtPartOfPrev = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_354_MemWriteToMemConsStmtPartOfPrev;
// -- Table: MemWriteToMemConsStmtResolved
Own<t_btree_iiiii__3_4_0_1_2__1_2__11111__01100__01000__00011__00010> rel_355_MemWriteToMemConsStmtResolved = mk<t_btree_iiiii__3_4_0_1_2__1_2__11111__01100__01000__00011__00010>();
souffle::RelationWrapper<t_btree_iiiii__3_4_0_1_2__1_2__11111__01100__01000__00011__00010> wrapper_rel_355_MemWriteToMemConsStmtResolved;
// -- Table: ABIEncodedArrayWriteTo
Own<t_btree_iiii__1_3_2_0__1111__0111__0100__0101> rel_356_ABIEncodedArrayWriteTo = mk<t_btree_iiii__1_3_2_0__1111__0111__0100__0101>();
souffle::RelationWrapper<t_btree_iiii__1_3_2_0__1111__0111__0100__0101> wrapper_rel_356_ABIEncodedArrayWriteTo;
// -- Table: MSTOREToMemConsStmtWritesShiftedVar
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_357_MSTOREToMemConsStmtWritesShiftedVar = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_357_MSTOREToMemConsStmtWritesShiftedVar;
// -- Table: MSTOREToMemConsStmt_WrittenVar
Own<t_btree_iiii__0_1_2_3__1110__1111__1100> rel_358_MSTOREToMemConsStmt_WrittenVar = mk<t_btree_iiii__0_1_2_3__1110__1111__1100>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111__1100> wrapper_rel_358_MSTOREToMemConsStmt_WrittenVar;
// -- Table: StatementUsesMemoryWriteAtRelativeIndex
Own<t_btree_iiii__0_1_3_2__1111__1101__1102> rel_359_StatementUsesMemoryWriteAtRelativeIndex = mk<t_btree_iiii__0_1_3_2__1111__1101__1102>();
souffle::RelationWrapper<t_btree_iiii__0_1_3_2__1111__1101__1102> wrapper_rel_359_StatementUsesMemoryWriteAtRelativeIndex;
// -- Table: StatementUsesMemoryWritesAtRelativeIndexOrdered
Own<t_btree_iiii__0_1_2_3__1110__1111> rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered = mk<t_btree_iiii__0_1_2_3__1110__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111> wrapper_rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered;
// -- Table: StatementUsesMemoryWritesAtRelativeIndexNotNext
Own<t_btree_iiii__0_1_2_3__1111> rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext;
// -- Table: StatementUsesMemoryWritesAtRelativeIndexNext
Own<t_btree_iiii__0_1_2__0_1_3_2__1110__1111__1101> rel_362_StatementUsesMemoryWritesAtRelativeIndexNext = mk<t_btree_iiii__0_1_2__0_1_3_2__1110__1111__1101>();
souffle::RelationWrapper<t_btree_iiii__0_1_2__0_1_3_2__1110__1111__1101> wrapper_rel_362_StatementUsesMemoryWritesAtRelativeIndexNext;
// -- Table: StatementUsesMemoryWriteAtRelativeIndex_Order
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order;
// -- Table: @delta_StatementUsesMemoryWriteAtRelativeIndex_Order
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: @new_StatementUsesMemoryWriteAtRelativeIndex_Order
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: StatementUsesMemoryMemoryArgumentNew
Own<t_btree_iiii__0_1_2_3__1111> rel_366_StatementUsesMemoryMemoryArgumentNew = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_366_StatementUsesMemoryMemoryArgumentNew;
// -- Table: CDArg
Own<t_btree_i__0__1> rel_367_CDArg = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_367_CDArg;
// -- Table: StatementUsesMemoryMemoryArgument
Own<t_btree_iiii__0_1_2_3__1111> rel_368_StatementUsesMemoryMemoryArgument = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_368_StatementUsesMemoryMemoryArgument;
// -- Table: MemoryStatement_ActualArgNew
Own<t_btree_iii__0_1_2__111> rel_369_MemoryStatement_ActualArgNew = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_369_MemoryStatement_ActualArgNew;
// -- Table: MSTOREToMemConsStmt_WrittenValue
Own<t_btree_iiiii__1_3_0_2_4__11111__01010> rel_370_MSTOREToMemConsStmt_WrittenValue = mk<t_btree_iiiii__1_3_0_2_4__11111__01010>();
souffle::RelationWrapper<t_btree_iiiii__1_3_0_2_4__11111__01010> wrapper_rel_370_MSTOREToMemConsStmt_WrittenValue;
// -- Table: MLOADReadsReturnOfCALL
Own<t_btree_iii__0_1_2__111> rel_371_MLOADReadsReturnOfCALL = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_371_MLOADReadsReturnOfCALL;
// -- Table: __agg_single18
Own<t_btree_i__0__1> rel_372_agg_single18 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_372_agg_single18;
// -- Table: memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict
Own<t_btree_iii__0_1_2__111> rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict;
// -- Table: CallDataLoadReadsLength
Own<t_btree_iiiii__2_4_0_1_3__0__11111__10000__00101> rel_374_CallDataLoadReadsLength = mk<t_btree_iiiii__2_4_0_1_3__0__11111__10000__00101>();
souffle::RelationWrapper<t_btree_iiiii__2_4_0_1_3__0__11111__10000__00101> wrapper_rel_374_CallDataLoadReadsLength;
// -- Table: ArgArrayLenWrittenTo
Own<t_btree_ii__0_1__11__10> rel_375_ArgArrayLenWrittenTo = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_375_ArgArrayLenWrittenTo;
// -- Table: InitialStoreToPossibleStruct
Own<t_btree_iiii__1_0_2_3__1111__0100> rel_376_InitialStoreToPossibleStruct = mk<t_btree_iiii__1_0_2_3__1111__0100>();
souffle::RelationWrapper<t_btree_iiii__1_0_2_3__1111__0100> wrapper_rel_376_InitialStoreToPossibleStruct;
// -- Table: FreePointerBasedValuesNumDiffNoMemReuse
Own<t_btree_iii__1_2_0__011__010__111> rel_377_FreePointerBasedValuesNumDiffNoMemReuse = mk<t_btree_iii__1_2_0__011__010__111>();
souffle::RelationWrapper<t_btree_iii__1_2_0__011__010__111> wrapper_rel_377_FreePointerBasedValuesNumDiffNoMemReuse;
// -- Table: IsCallDataArrayVar
Own<t_btree_ii__0_1__11__10> rel_378_IsCallDataArrayVar = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_378_IsCallDataArrayVar;
// -- Table: VarPlusThrirtyOneAndNotThirtyOne
Own<t_btree_ii__0_1__11__10> rel_379_VarPlusThrirtyOneAndNotThirtyOne = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_379_VarPlusThrirtyOneAndNotThirtyOne;
// -- Table: VarDivByConstant
Own<t_btree_iii__0_1_2__110__111> rel_380_VarDivByConstant = mk<t_btree_iii__0_1_2__110__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__110__111> wrapper_rel_380_VarDivByConstant;
// -- Table: VarTimesConstant
Own<t_btree_iii__2__1_2__0_1_2__001__011__010__100__110__111> rel_381_VarTimesConstant = mk<t_btree_iii__2__1_2__0_1_2__001__011__010__100__110__111>();
souffle::RelationWrapper<t_btree_iii__2__1_2__0_1_2__001__011__010__100__110__111> wrapper_rel_381_VarTimesConstant;
// -- Table: VarPlusThrirtyOneDivMulSixtyFour
Own<t_btree_ii__0_1__11__10> rel_382_VarPlusThrirtyOneDivMulSixtyFour = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_382_VarPlusThrirtyOneDivMulSixtyFour;
// -- Table: CallDataCopyArgInfo
Own<t_btree_iii__1_0_2__010__111> rel_383_CallDataCopyArgInfo = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_383_CallDataCopyArgInfo;
// -- Table: __agg_single0
Own<t_btree_i__0__1> rel_384_agg_single0 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_384_agg_single0;
// -- Table: CALLReturnsNoData
Own<t_btree_i__0__1> rel_385_CALLReturnsNoData = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_385_CALLReturnsNoData;
// -- Table: __agg_single1
Own<t_btree_i__0__1> rel_386_agg_single1 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_386_agg_single1;
// -- Table: AllCALLsClassified
Own<t_btree_i__0__1> rel_387_AllCALLsClassified = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_387_AllCALLsClassified;
// -- Table: CALLDATACOPY_AllCalldata
Own<t_btree_i__0__1> rel_388_CALLDATACOPY_AllCalldata = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_388_CALLDATACOPY_AllCalldata;
// -- Table: CALLDATALOADOfConstant
Own<t_btree_iii__0_1_2__111> rel_389_CALLDATALOADOfConstant = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_389_CALLDATALOADOfConstant;
// -- Table: PublicFunctionArg
Own<t_btree_iii__0_1_2__111> rel_390_PublicFunctionArg = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_390_PublicFunctionArg;
// -- Table: Analytics_PublicFunctionArg
Own<t_btree_i__0__1> rel_391_Analytics_PublicFunctionArg = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_391_Analytics_PublicFunctionArg;
// -- Table: Analytics_PublicFunctionArrayArg
Own<t_btree_i__0__1> rel_392_Analytics_PublicFunctionArrayArg = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_392_Analytics_PublicFunctionArrayArg;
// -- Table: CALLDATALOADOfStaticAddr
Own<t_btree_i__0__1> rel_393_CALLDATALOADOfStaticAddr = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_393_CALLDATALOADOfStaticAddr;
// -- Table: __agg_single15
Own<t_btree_i__0__1> rel_394_agg_single15 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_394_agg_single15;
// -- Table: CALLToPrecompiledFunction
Own<t_btree_ii__0_1__11> rel_395_CALLToPrecompiledFunction = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_395_CALLToPrecompiledFunction;
// -- Table: StoreFreeMemPtrToMemZero
Own<t_btree_i__0__1> rel_396_StoreFreeMemPtrToMemZero = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_396_StoreFreeMemPtrToMemZero;
// -- Table: EcrecoverCompilerBug
Own<t_btree_i__0__1> rel_397_EcrecoverCompilerBug = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_397_EcrecoverCompilerBug;
// -- Table: BinArith
Own<t_btree_i__0__1> rel_398_BinArith = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_398_BinArith;
// -- Table: TernArith
Own<t_btree_i__0__1> rel_399_TernArith = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_399_TernArith;
// -- Table: UnaryArith
Own<t_btree_i__0__1> rel_400_UnaryArith = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_400_UnaryArith;
// -- Table: FlowOp
Own<t_btree_i__0__1> rel_401_FlowOp = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_401_FlowOp;
// -- Table: standardflowanalysis.Flows
Own<t_btree_ii__0_1__11__10> rel_402_standardflowanalysis_Flows = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_402_standardflowanalysis_Flows;
// -- Table: @delta_standardflowanalysis.Flows
Own<t_btree_ii__0_1__11__10> rel_403_delta_standardflowanalysis_Flows = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_standardflowanalysis.Flows
Own<t_btree_ii__0_1__11__10> rel_404_new_standardflowanalysis_Flows = mk<t_btree_ii__0_1__11__10>();
// -- Table: standardflowanalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_405_standardflowanalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_405_standardflowanalysis_FunctionFlowSummary;
// -- Table: @delta_standardflowanalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_406_delta_standardflowanalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_standardflowanalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_407_new_standardflowanalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: standardflowanalysis.InterFunctionActualArgFlow
Own<t_btree_ii__0_1__11> rel_408_standardflowanalysis_InterFunctionActualArgFlow = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_408_standardflowanalysis_InterFunctionActualArgFlow;
// -- Table: standardflowanalysis.GlobalFlows
Own<t_btree_ii__0_1__11__10> rel_409_standardflowanalysis_GlobalFlows = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_409_standardflowanalysis_GlobalFlows;
// -- Table: @delta_standardflowanalysis.GlobalFlows
Own<t_btree_ii__1_0__11__01> rel_410_delta_standardflowanalysis_GlobalFlows = mk<t_btree_ii__1_0__11__01>();
// -- Table: @new_standardflowanalysis.GlobalFlows
Own<t_btree_ii__1_0__11__01> rel_411_new_standardflowanalysis_GlobalFlows = mk<t_btree_ii__1_0__11__01>();
// -- Table: StructAllocation
Own<t_btree_iii__0_1_2__111> rel_412_StructAllocation = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_412_StructAllocation;
// -- Table: Struct_WordWidth
Own<t_btree_ii__0_1__11__10> rel_413_Struct_WordWidth = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_413_Struct_WordWidth;
// -- Table: @delta_Struct_WordWidth
Own<t_btree_ii__0_1__11__10> rel_414_delta_Struct_WordWidth = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_Struct_WordWidth
Own<t_btree_ii__0_1__11__10> rel_415_new_Struct_WordWidth = mk<t_btree_ii__0_1__11__10>();
// -- Table: StructArg
Own<t_btree_iiiii__4_0_1_2_3__11111__00001> rel_416_StructArg = mk<t_btree_iiiii__4_0_1_2_3__11111__00001>();
souffle::RelationWrapper<t_btree_iiiii__4_0_1_2_3__11111__00001> wrapper_rel_416_StructArg;
// -- Table: @delta_StructArg
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_417_delta_StructArg = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: @new_StructArg
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_418_new_StructArg = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: StructIndex
Own<t_btree_iii__0_1_2__111> rel_419_StructIndex = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_419_StructIndex;
// -- Table: StructLoad
Own<t_btree_iiii__1_2_0_3__1111__0110> rel_420_StructLoad = mk<t_btree_iiii__1_2_0_3__1111__0110>();
souffle::RelationWrapper<t_btree_iiii__1_2_0_3__1111__0110> wrapper_rel_420_StructLoad;
// -- Table: _StructLoad
Own<t_btree_i__0__1> rel_421_StructLoad = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_421_StructLoad;
// -- Table: __agg_single22
Own<t_btree_i__0__1> rel_422_agg_single22 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_422_agg_single22;
// -- Table: StructStore
Own<t_btree_iiii__0_1_2_3__1111> rel_423_StructStore = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_423_StructStore;
// -- Table: IsRegularArrayVar
Own<t_btree_i__0__1> rel_424_IsRegularArrayVar = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_424_IsRegularArrayVar;
// -- Table: @delta_IsRegularArrayVar
Own<t_btree_i__0__1> rel_425_delta_IsRegularArrayVar = mk<t_btree_i__0__1>();
// -- Table: @new_IsRegularArrayVar
Own<t_btree_i__0__1> rel_426_new_IsRegularArrayVar = mk<t_btree_i__0__1>();
// -- Table: IsRawDataArrayVar
Own<t_btree_i__0__1> rel_427_IsRawDataArrayVar = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_427_IsRawDataArrayVar;
// -- Table: @delta_IsRawDataArrayVar
Own<t_btree_i__0__1> rel_428_delta_IsRawDataArrayVar = mk<t_btree_i__0__1>();
// -- Table: @new_IsRawDataArrayVar
Own<t_btree_i__0__1> rel_429_new_IsRawDataArrayVar = mk<t_btree_i__0__1>();
// -- Table: Array_ElementLength
Own<t_btree_ii__0_1__11__10> rel_430_Array_ElementLength = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_430_Array_ElementLength;
// -- Table: @delta_Array_ElementLength
Own<t_btree_ii__0_1__11__10> rel_431_delta_Array_ElementLength = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_Array_ElementLength
Own<t_btree_ii__0_1__11__10> rel_432_new_Array_ElementLength = mk<t_btree_ii__0_1__11__10>();
// -- Table: ArrayVarLengthVar
Own<t_btree_ii__1_0__11__01> rel_433_ArrayVarLengthVar = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_433_ArrayVarLengthVar;
// -- Table: @delta_ArrayVarLengthVar
Own<t_btree_ii__1_0__11__01> rel_434_delta_ArrayVarLengthVar = mk<t_btree_ii__1_0__11__01>();
// -- Table: @new_ArrayVarLengthVar
Own<t_btree_ii__1_0__11__01> rel_435_new_ArrayVarLengthVar = mk<t_btree_ii__1_0__11__01>();
// -- Table: ArrayDataStartVar
Own<t_btree_ii__1_0__0__11__10__01> rel_436_ArrayDataStartVar = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_436_ArrayDataStartVar;
// -- Table: @delta_ArrayDataStartVar
Own<t_btree_ii__1_0__0__11__10__01> rel_437_delta_ArrayDataStartVar = mk<t_btree_ii__1_0__0__11__10__01>();
// -- Table: @new_ArrayDataStartVar
Own<t_btree_ii__1_0__0__11__10__01> rel_438_new_ArrayDataStartVar = mk<t_btree_ii__1_0__0__11__10__01>();
// -- Table: PossibleArrayLoose
Own<t_btree_i__0__1> rel_439_PossibleArrayLoose = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_439_PossibleArrayLoose;
// -- Table: @delta_PossibleArrayLoose
Own<t_btree_i__0__1> rel_440_delta_PossibleArrayLoose = mk<t_btree_i__0__1>();
// -- Table: @new_PossibleArrayLoose
Own<t_btree_i__0__1> rel_441_new_PossibleArrayLoose = mk<t_btree_i__0__1>();
// -- Table: ArrayActualArg
Own<t_btree_iiii__3_0_1_2__1111__0001> rel_442_ArrayActualArg = mk<t_btree_iiii__3_0_1_2__1111__0001>();
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__1111__0001> wrapper_rel_442_ArrayActualArg;
// -- Table: @delta_ArrayActualArg
Own<t_btree_iiii__3_0_1_2__1111__0001> rel_443_delta_ArrayActualArg = mk<t_btree_iiii__3_0_1_2__1111__0001>();
// -- Table: @new_ArrayActualArg
Own<t_btree_iiii__3_0_1_2__1111__0001> rel_444_new_ArrayActualArg = mk<t_btree_iiii__3_0_1_2__1111__0001>();
// -- Table: ArrayFormalRet
Own<t_btree_iii__2_0_1__001__111> rel_445_ArrayFormalRet = mk<t_btree_iii__2_0_1__001__111>();
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111> wrapper_rel_445_ArrayFormalRet;
// -- Table: @delta_ArrayFormalRet
Own<t_btree_iii__2_0_1__001__111> rel_446_delta_ArrayFormalRet = mk<t_btree_iii__2_0_1__001__111>();
// -- Table: @new_ArrayFormalRet
Own<t_btree_iii__2_0_1__001__111> rel_447_new_ArrayFormalRet = mk<t_btree_iii__2_0_1__001__111>();
// -- Table: RegularArrayVarsInSameClass
Own<t_btree_ii__1_0__0__11__10__01> rel_448_RegularArrayVarsInSameClass = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_448_RegularArrayVarsInSameClass;
// -- Table: @delta_RegularArrayVarsInSameClass
Own<t_btree_ii__0_1__11__10> rel_449_delta_RegularArrayVarsInSameClass = mk<t_btree_ii__0_1__11__10>();
// -- Table: @new_RegularArrayVarsInSameClass
Own<t_btree_ii__0_1__11__10> rel_450_new_RegularArrayVarsInSameClass = mk<t_btree_ii__0_1__11__10>();
// -- Table: StructContainsArray
Own<t_btree_iii__0_1_2__111> rel_451_StructContainsArray = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_451_StructContainsArray;
// -- Table: @delta_StructContainsArray
Own<t_btree_iii__0_1_2__100__111> rel_452_delta_StructContainsArray = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: @new_StructContainsArray
Own<t_btree_iii__0_1_2__100__111> rel_453_new_StructContainsArray = mk<t_btree_iii__0_1_2__100__111>();
// -- Table: ABIEncodedArrayIncludesArray
Own<t_btree_iiii__0_1_3_2__1111__1100__1101> rel_454_ABIEncodedArrayIncludesArray = mk<t_btree_iiii__0_1_3_2__1111__1100__1101>();
souffle::RelationWrapper<t_btree_iiii__0_1_3_2__1111__1100__1101> wrapper_rel_454_ABIEncodedArrayIncludesArray;
// -- Table: @delta_ABIEncodedArrayIncludesArray
Own<t_btree_iiii__0_1_2_3__1111> rel_455_delta_ABIEncodedArrayIncludesArray = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: @new_ABIEncodedArrayIncludesArray
Own<t_btree_iiii__0_1_2_3__1111> rel_456_new_ABIEncodedArrayIncludesArray = mk<t_btree_iiii__0_1_2_3__1111>();
// -- Table: ABIEncodedArrayIncludesArrayAtConcreteIndex
Own<t_btree_iiiii__0_4_1_2_3__11111__10001> rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex = mk<t_btree_iiiii__0_4_1_2_3__11111__10001>();
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001> wrapper_rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex;
// -- Table: @delta_ABIEncodedArrayIncludesArrayAtConcreteIndex
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: @new_ABIEncodedArrayIncludesArrayAtConcreteIndex
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex = mk<t_btree_iiiii__0_1_2_3_4__11111>();
// -- Table: ArrayAllocationInternal
Own<t_btree_iiii__0_1_2_3__1111> rel_460_ArrayAllocationInternal = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_460_ArrayAllocationInternal;
// -- Table: ArrayHasConstantLength
Own<t_btree_ii__0_1__11> rel_461_ArrayHasConstantLength = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_461_ArrayHasConstantLength;
// -- Table: ArrayIndexAccess
Own<t_btree_iii__0_1_2__111> rel_462_ArrayIndexAccess = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_462_ArrayIndexAccess;
// -- Table: MemArrayPut
Own<t_btree_iiii__0_1_2_3__1111> rel_463_MemArrayPut = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_463_MemArrayPut;
// -- Table: MemArrayGet
Own<t_btree_iiii__0_1_2_3__1111> rel_464_MemArrayGet = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_464_MemArrayGet;
// -- Table: CallDataArrayGet
Own<t_btree_iiii__0_1_2_3__1111> rel_465_CallDataArrayGet = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_465_CallDataArrayGet;
// -- Table: CALLDATALOADArrayRelated
Own<t_btree_i__0__1> rel_466_CALLDATALOADArrayRelated = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_466_CALLDATALOADArrayRelated;
// -- Table: __agg_single14
Own<t_btree_i__0__1> rel_467_agg_single14 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_467_agg_single14;
// -- Table: Verbatim_CDLAllVSStaticVSArr
Own<t_btree_iii__0_1_2__111> rel_468_Verbatim_CDLAllVSStaticVSArr = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_468_Verbatim_CDLAllVSStaticVSArr;
// -- Table: arrayClassRep.LoadInBlock
Own<t_btree_iii__0_2_1__100__101__111> rel_469_arrayClassRep_LoadInBlock = mk<t_btree_iii__0_2_1__100__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__100__101__111> wrapper_rel_469_arrayClassRep_LoadInBlock;
// -- Table: arrayClassRep.DominatesInClass
Own<t_btree_iiii__1_3_0_2__1111__0101> rel_470_arrayClassRep_DominatesInClass = mk<t_btree_iiii__1_3_0_2__1111__0101>();
souffle::RelationWrapper<t_btree_iiii__1_3_0_2__1111__0101> wrapper_rel_470_arrayClassRep_DominatesInClass;
// -- Table: arrayClassRep.DominatesAllInClass
Own<t_btree_ii__0_1__11> rel_471_arrayClassRep_DominatesAllInClass = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_471_arrayClassRep_DominatesAllInClass;
// -- Table: arrayClassRep.Var_ClassRep
Own<t_btree_ii__0_1__11> rel_472_arrayClassRep_Var_ClassRep = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_472_arrayClassRep_Var_ClassRep;
// -- Table: RegularArrayVar_ClassRep
Own<t_btree_ii__0_1__11__10> rel_473_RegularArrayVar_ClassRep = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_473_RegularArrayVar_ClassRep;
// -- Table: ArrayStoreAtIndex
Own<t_btree_iiii__0__1_0_2_3__1000__1111__0100> rel_474_ArrayStoreAtIndex = mk<t_btree_iiii__0__1_0_2_3__1000__1111__0100>();
souffle::RelationWrapper<t_btree_iiii__0__1_0_2_3__1000__1111__0100> wrapper_rel_474_ArrayStoreAtIndex;
// -- Table: ArrayStoreI
Own<t_btree_i__0__1> rel_475_ArrayStoreI = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_475_ArrayStoreI;
// -- Table: __agg_single8
Own<t_btree_i__0__1> rel_476_agg_single8 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_476_agg_single8;
// -- Table: ArrayLoadAtIndex
Own<t_btree_iiii__0_1_2_3__1000__1111> rel_477_ArrayLoadAtIndex = mk<t_btree_iiii__0_1_2_3__1000__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1000__1111> wrapper_rel_477_ArrayLoadAtIndex;
// -- Table: ArrayLoadI
Own<t_btree_i__0__1> rel_478_ArrayLoadI = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_478_ArrayLoadI;
// -- Table: __agg_single20
Own<t_btree_i__0__1> rel_479_agg_single20 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_479_agg_single20;
// -- Table: assertVarIsArray.FromHasNoEdges
Own<t_btree_i__0__1> rel_480_assertVarIsArray_FromHasNoEdges = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_480_assertVarIsArray_FromHasNoEdges;
// -- Table: assertVarIsArray.FromHasTwoEdges
Own<t_btree_i__0__1> rel_481_assertVarIsArray_FromHasTwoEdges = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_481_assertVarIsArray_FromHasTwoEdges;
// -- Table: ArrayWriteToRelativeIndex
Own<t_btree_iii__0_2_1__102__111> rel_482_ArrayWriteToRelativeIndex = mk<t_btree_iii__0_2_1__102__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__102__111> wrapper_rel_482_ArrayWriteToRelativeIndex;
// -- Table: RawDataArrayVarsInSameClass
Own<t_btree_ii__1_0__0__11__10__01> rel_483_RawDataArrayVarsInSameClass = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_483_RawDataArrayVarsInSameClass;
// -- Table: rawDataArrayClassRep.LoadInBlock
Own<t_btree_iii__0_2_1__100__101__111> rel_484_rawDataArrayClassRep_LoadInBlock = mk<t_btree_iii__0_2_1__100__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__100__101__111> wrapper_rel_484_rawDataArrayClassRep_LoadInBlock;
// -- Table: rawDataArrayClassRep.DominatesInClass
Own<t_btree_iiii__1_3_0_2__1111__0101> rel_485_rawDataArrayClassRep_DominatesInClass = mk<t_btree_iiii__1_3_0_2__1111__0101>();
souffle::RelationWrapper<t_btree_iiii__1_3_0_2__1111__0101> wrapper_rel_485_rawDataArrayClassRep_DominatesInClass;
// -- Table: rawDataArrayClassRep.DominatesAllInClass
Own<t_btree_ii__0_1__11> rel_486_rawDataArrayClassRep_DominatesAllInClass = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_486_rawDataArrayClassRep_DominatesAllInClass;
// -- Table: rawDataArrayClassRep.Var_ClassRep
Own<t_btree_ii__0_1__11> rel_487_rawDataArrayClassRep_Var_ClassRep = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_487_rawDataArrayClassRep_Var_ClassRep;
// -- Table: RawDataArrayVar_ClassRep
Own<t_btree_ii__0_1__11__10> rel_488_RawDataArrayVar_ClassRep = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_488_RawDataArrayVar_ClassRep;
// -- Table: VarIsArray
Own<t_btree_ii__0_1__11__10> rel_489_VarIsArray = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_489_VarIsArray;
// -- Table: MSTOREToMLOAD
Own<t_btree_iii__0_1_2__111> rel_490_MSTOREToMLOAD = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_490_MSTOREToMLOAD;
// -- Table: ArbitraryCall
Own<t_btree_i__0__1> rel_491_ArbitraryCall = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_491_ArbitraryCall;
// -- Table: AllocationAny
Own<t_btree_i__0__1> rel_492_AllocationAny = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_492_AllocationAny;
// -- Table: __agg_single10
Own<t_btree_i__0__1> rel_493_agg_single10 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_493_agg_single10;
// -- Table: StatementUsesMemory_UsesArray
Own<t_btree_iii__0_1_2__111> rel_494_StatementUsesMemory_UsesArray = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_494_StatementUsesMemory_UsesArray;
// -- Table: MLOADReadsArrayLength
Own<t_btree_i__0__1> rel_495_MLOADReadsArrayLength = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_495_MLOADReadsArrayLength;
// -- Table: __agg_single19
Own<t_btree_i__0__1> rel_496_agg_single19 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_496_agg_single19;
// -- Table: ArrayDataActualArg
Own<t_btree_iiii__0_1_2_3__1111> rel_497_ArrayDataActualArg = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_497_ArrayDataActualArg;
// -- Table: ExternalCallTakesWholeCallData
Own<t_btree_i__0__1> rel_498_ExternalCallTakesWholeCallData = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_498_ExternalCallTakesWholeCallData;
// -- Table: _StructStore
Own<t_btree_i__0__1> rel_499_StructStore = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_499_StructStore;
// -- Table: __agg_single12
Own<t_btree_i__0__1> rel_500_agg_single12 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_500_agg_single12;
// -- Table: localFlowAnalysis.TransferOpcode
Own<t_btree_i__0__1> rel_501_localFlowAnalysis_TransferOpcode = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_501_localFlowAnalysis_TransferOpcode;
// -- Table: localFlowAnalysis.Flows
Own<t_btree_ii__1_0__0__11__10__01> rel_502_localFlowAnalysis_Flows = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_502_localFlowAnalysis_Flows;
// -- Table: @delta_localFlowAnalysis.Flows
Own<t_btree_ii__0_1__11> rel_503_delta_localFlowAnalysis_Flows = mk<t_btree_ii__0_1__11>();
// -- Table: @new_localFlowAnalysis.Flows
Own<t_btree_ii__0_1__11> rel_504_new_localFlowAnalysis_Flows = mk<t_btree_ii__0_1__11>();
// -- Table: localFlowAnalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_505_localFlowAnalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_505_localFlowAnalysis_FunctionFlowSummary;
// -- Table: @delta_localFlowAnalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_506_delta_localFlowAnalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: @new_localFlowAnalysis.FunctionFlowSummary
Own<t_btree_iii__0_1_2__111> rel_507_new_localFlowAnalysis_FunctionFlowSummary = mk<t_btree_iii__0_1_2__111>();
// -- Table: ArrayStore
Own<t_btree_iii__1_0_2__010__111> rel_508_ArrayStore = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_508_ArrayStore;
// -- Table: WriteToArrayUsedByABIEncodedArray
Own<t_btree_ii__0_1__11> rel_509_WriteToArrayUsedByABIEncodedArray = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_509_WriteToArrayUsedByABIEncodedArray;
// -- Table: ABIEncodedArrayWriteToIsNotArrayOrLen
Own<t_btree_iiii__0_1_2_3__1111> rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen;
// -- Table: ABIEncodedArrayHasVarAtIndex
Own<t_btree_iiii__0_1_3_2__1111__1100__1101> rel_511_ABIEncodedArrayHasVarAtIndex = mk<t_btree_iiii__0_1_3_2__1111__1100__1101>();
souffle::RelationWrapper<t_btree_iiii__0_1_3_2__1111__1100__1101> wrapper_rel_511_ABIEncodedArrayHasVarAtIndex;
// -- Table: StatementUsesMemory_ActualMemoryArg
Own<t_btree_iiii__0_2__2_3_0_1__1000__1010__1111__0011> rel_512_StatementUsesMemory_ActualMemoryArg = mk<t_btree_iiii__0_2__2_3_0_1__1000__1010__1111__0011>();
souffle::RelationWrapper<t_btree_iiii__0_2__2_3_0_1__1000__1010__1111__0011> wrapper_rel_512_StatementUsesMemory_ActualMemoryArg;
// -- Table: CALLWithPossibleSigHashFromSHA3
Own<t_btree_ii__0_1__11> rel_513_CALLWithPossibleSigHashFromSHA3 = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_513_CALLWithPossibleSigHashFromSHA3;
// -- Table: StatementUsesMemory_ActualArg
Own<t_btree_iii__0_1_2__111> rel_514_StatementUsesMemory_ActualArg = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_514_StatementUsesMemory_ActualArg;
// -- Table: MemoryStatement_ActualArg
Own<t_btree_iii__0_2_1__101__111> rel_515_MemoryStatement_ActualArg = mk<t_btree_iii__0_2_1__101__111>();
souffle::RelationWrapper<t_btree_iii__0_2_1__101__111> wrapper_rel_515_MemoryStatement_ActualArg;
// -- Table: SHA3_1ARG
Own<t_btree_iii__0_1_2__111> rel_516_SHA3_1ARG = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_516_SHA3_1ARG;
// -- Table: SHA3_2ARG
Own<t_btree_iiii__0_1_2_3__1111> rel_517_SHA3_2ARG = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_517_SHA3_2ARG;
// -- Table: SHA3_3ARG
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_518_SHA3_3ARG = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_518_SHA3_3ARG;
// -- Table: SHA3_KnownContent
Own<t_btree_ii__0_1__11__10> rel_519_SHA3_KnownContent = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_519_SHA3_KnownContent;
// -- Table: CallToSignatureFromSHA3
Own<t_btree_ii__0_1__11> rel_520_CallToSignatureFromSHA3 = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_520_CallToSignatureFromSHA3;
// -- Table: StatementConsumesMemoryNoArgs
Own<t_btree_i__0__1> rel_521_StatementConsumesMemoryNoArgs = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_521_StatementConsumesMemoryNoArgs;
// -- Table: ABIWriteMSTORE
Own<t_btree_i__0__1> rel_522_ABIWriteMSTORE = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_522_ABIWriteMSTORE;
// -- Table: ArgWriteAny
Own<t_btree_i__0__1> rel_523_ArgWriteAny = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_523_ArgWriteAny;
// -- Table: ModeledMSTORE
Own<t_btree_i__0__1> rel_524_ModeledMSTORE = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_524_ModeledMSTORE;
// -- Table: NonModeledMSTORE
Own<t_btree_i__0__1> rel_525_NonModeledMSTORE = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_525_NonModeledMSTORE;
// -- Table: Analytics_NonModeledMSTORE
Own<t_btree_i__0__1> rel_526_Analytics_NonModeledMSTORE = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_526_Analytics_NonModeledMSTORE;
// -- Table: ArrayStoreSimple
Own<t_btree_i__0__1> rel_527_ArrayStoreSimple = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_527_ArrayStoreSimple;
// -- Table: __agg_single9
Own<t_btree_i__0__1> rel_528_agg_single9 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_528_agg_single9;
// -- Table: __agg_single11
Own<t_btree_i__0__1> rel_529_agg_single11 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_529_agg_single11;
// -- Table: Verbatim_AllVsModeledMSTOREs
Own<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111> rel_530_Verbatim_AllVsModeledMSTOREs = mk<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111>();
souffle::RelationWrapper<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111> wrapper_rel_530_Verbatim_AllVsModeledMSTOREs;
// -- Table: Analytics_MemConsStmtUsesFromDistinctPaths
Own<t_btree_i__0__1> rel_531_Analytics_MemConsStmtUsesFromDistinctPaths = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_531_Analytics_MemConsStmtUsesFromDistinctPaths;
// -- Table: ArrayLoad
Own<t_btree_iii__0_1_2__111> rel_532_ArrayLoad = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_532_ArrayLoad;
// -- Table: ModeledMLOAD
Own<t_btree_i__0__1> rel_533_ModeledMLOAD = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_533_ModeledMLOAD;
// -- Table: NonModeledMLOAD
Own<t_btree_i__0__1> rel_534_NonModeledMLOAD = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_534_NonModeledMLOAD;
// -- Table: Analytics_NonModeledMLOAD
Own<t_btree_i__0__1> rel_535_Analytics_NonModeledMLOAD = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_535_Analytics_NonModeledMLOAD;
// -- Table: ArrayLoadSimple
Own<t_btree_i__0__1> rel_536_ArrayLoadSimple = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_536_ArrayLoadSimple;
// -- Table: __agg_single21
Own<t_btree_i__0__1> rel_537_agg_single21 = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_537_agg_single21;
// -- Table: Verbatim_AllVsModeledMLOADs
Own<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111> rel_538_Verbatim_AllVsModeledMLOADs = mk<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111>();
souffle::RelationWrapper<t_btree_iiiiiii__0_1_2_3_4_5_6__1111111> wrapper_rel_538_Verbatim_AllVsModeledMLOADs;
// -- Table: ConstantPossibleSigHash
Own<t_btree_iii__0_1_2__111> rel_539_ConstantPossibleSigHash = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_539_ConstantPossibleSigHash;
// -- Table: CallToSignature
Own<t_btree_ii__1_0__11__01> rel_540_CallToSignature = mk<t_btree_ii__1_0__11__01>();
souffle::RelationWrapper<t_btree_ii__1_0__11__01> wrapper_rel_540_CallToSignature;
// -- Table: Analytics_CallWithSig
Own<t_btree_i__0__1> rel_541_Analytics_CallWithSig = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_541_Analytics_CallWithSig;
// -- Table: ERC20ApproveCall
Own<t_btree_iii__0_1_2__111> rel_542_ERC20ApproveCall = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_542_ERC20ApproveCall;
// -- Table: Analytics_ERC20ApproveCall
Own<t_btree_i__0__1> rel_543_Analytics_ERC20ApproveCall = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_543_Analytics_ERC20ApproveCall;
// -- Table: ERC20TransferCall
Own<t_btree_iii__0_1_2__111> rel_544_ERC20TransferCall = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_544_ERC20TransferCall;
// -- Table: Analytics_ERC20TransferCall
Own<t_btree_i__0__1> rel_545_Analytics_ERC20TransferCall = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_545_Analytics_ERC20TransferCall;
// -- Table: ERC20TransferFromCall
Own<t_btree_iiii__0_1_2_3__1111> rel_546_ERC20TransferFromCall = mk<t_btree_iiii__0_1_2_3__1111>();
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111> wrapper_rel_546_ERC20TransferFromCall;
// -- Table: Analytics_ERC20TransferFromCall
Own<t_btree_i__0__1> rel_547_Analytics_ERC20TransferFromCall = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_547_Analytics_ERC20TransferFromCall;
// -- Table: Block_CodeChunkAccessed
Own<t_btree_ii__0_1__11> rel_548_Block_CodeChunkAccessed = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_548_Block_CodeChunkAccessed;
// -- Table: Block_Gas
Own<t_btree_ii__0_1__11> rel_549_Block_Gas = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_549_Block_Gas;
// -- Table: FallthroughEdge
Own<t_btree_ii__0_1__11> rel_550_FallthroughEdge = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_550_FallthroughEdge;
// -- Table: IsFunction
Own<t_btree_i__0__1> rel_551_IsFunction = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_551_IsFunction;
// -- Table: inliner.FunctionReturnRestriction
Own<t_btree_i__0__1> rel_552_inliner_FunctionReturnRestriction = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_552_inliner_FunctionReturnRestriction;
// -- Table: PublicFunctionSelector
Own<t_btree_ii__0_1__11> rel_553_PublicFunctionSelector = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_553_PublicFunctionSelector;
// -- Table: IsPublicFunction
Own<t_btree_i__0__1> rel_554_IsPublicFunction = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_554_IsPublicFunction;
// -- Table: inliner.InlineCandidate
Own<t_btree_i__0__1> rel_555_inliner_InlineCandidate = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_555_inliner_InlineCandidate;
// -- Table: inliner.SafelyInlinableFunction
Own<t_btree_i__0__1> rel_556_inliner_SafelyInlinableFunction = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_556_inliner_SafelyInlinableFunction;
// -- Table: inliner.CGEToInlineCandidate
Own<t_btree_ii__0_1__11__10> rel_557_inliner_CGEToInlineCandidate = mk<t_btree_ii__0_1__11__10>();
souffle::RelationWrapper<t_btree_ii__0_1__11__10> wrapper_rel_557_inliner_CGEToInlineCandidate;
// -- Table: inliner.FunctionToInline
Own<t_btree_i__0__1> rel_558_inliner_FunctionToInline = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_558_inliner_FunctionToInline;
// -- Table: NeedsMoreInlining
Own<t_btree_i__0__1> rel_559_NeedsMoreInlining = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_559_NeedsMoreInlining;
// -- Table: inliner.BlockToClone
Own<t_btree_iiiii__2_0_1_3_4__0__11111__10000__00100> rel_560_inliner_BlockToClone = mk<t_btree_iiiii__2_0_1_3_4__0__11111__10000__00100>();
souffle::RelationWrapper<t_btree_iiiii__2_0_1_3_4__0__11111__10000__00100> wrapper_rel_560_inliner_BlockToClone;
// -- Table: inliner.InBlock_OutBlock
Own<t_btree_iii__0_1_2__100__110__111> rel_561_inliner_InBlock_OutBlock = mk<t_btree_iii__0_1_2__100__110__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__110__111> wrapper_rel_561_inliner_InBlock_OutBlock;
// -- Table: inliner.Out_Block_CodeChunkAccessed
Own<t_btree_ii__0_1__11> rel_562_inliner_Out_Block_CodeChunkAccessed = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_562_inliner_Out_Block_CodeChunkAccessed;
// -- Table: inliner.Out_Block_Gas
Own<t_btree_ii__0_1__11> rel_563_inliner_Out_Block_Gas = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_563_inliner_Out_Block_Gas;
// -- Table: inliner.Out_CallGraphEdge
Own<t_btree_ii__0_1__11> rel_564_inliner_Out_CallGraphEdge = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_564_inliner_Out_CallGraphEdge;
// -- Table: inliner.Out_FallthroughEdge
Own<t_btree_ii__0_1__11> rel_565_inliner_Out_FallthroughEdge = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_565_inliner_Out_FallthroughEdge;
// -- Table: inliner.Out_FunctionCallReturn
Own<t_btree_iii__0_1_2__111> rel_566_inliner_Out_FunctionCallReturn = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_566_inliner_Out_FunctionCallReturn;
// -- Table: inliner.Out_LocalBlockEdge
Own<t_btree_ii__0_1__11> rel_567_inliner_Out_LocalBlockEdge = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_567_inliner_Out_LocalBlockEdge;
// -- Table: inliner.StatementToClone
Own<t_btree_iiiii__0_2_1_3_4__11111__10100__10000> rel_568_inliner_StatementToClone = mk<t_btree_iiiii__0_2_1_3_4__11111__10100__10000>();
souffle::RelationWrapper<t_btree_iiiii__0_2_1_3_4__11111__10100__10000> wrapper_rel_568_inliner_StatementToClone;
// -- Table: inliner.InStatement_OutStatement
Own<t_btree_iii__0_1_2__100__110__111> rel_569_inliner_InStatement_OutStatement = mk<t_btree_iii__0_1_2__100__110__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__110__111> wrapper_rel_569_inliner_InStatement_OutStatement;
// -- Table: inliner.Out_IsStatement
Own<t_btree_i__0__1> rel_570_inliner_Out_IsStatement = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_570_inliner_Out_IsStatement;
// -- Table: inliner.Out_Statement_Block
Own<t_btree_ii__0_1__11> rel_571_inliner_Out_Statement_Block = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_571_inliner_Out_Statement_Block;
// -- Table: inliner.VariableToClone
Own<t_btree_iiiii__0_1_2_3_4__11111> rel_572_inliner_VariableToClone = mk<t_btree_iiiii__0_1_2_3_4__11111>();
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111> wrapper_rel_572_inliner_VariableToClone;
// -- Table: inliner.Out_FunctionEntry
Own<t_btree_i__0__1> rel_573_inliner_Out_FunctionEntry = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_573_inliner_Out_FunctionEntry;
// -- Table: inliner.Out_InFunction
Own<t_btree_ii__0_1__11> rel_574_inliner_Out_InFunction = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_574_inliner_Out_InFunction;
// -- Table: inliner.CallToClonedFunction
Own<t_btree_iii__1_0_2__010__111> rel_575_inliner_CallToClonedFunction = mk<t_btree_iii__1_0_2__010__111>();
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111> wrapper_rel_575_inliner_CallToClonedFunction;
// -- Table: inliner.ClonedCallArgs
Own<t_btree_iiiii__1_0_2_3_4__4_0__11111__10001__01000__00001> rel_576_inliner_ClonedCallArgs = mk<t_btree_iiiii__1_0_2_3_4__4_0__11111__10001__01000__00001>();
souffle::RelationWrapper<t_btree_iiiii__1_0_2_3_4__4_0__11111__10001__01000__00001> wrapper_rel_576_inliner_ClonedCallArgs;
// -- Table: inliner.FunctionToInline_RetStmt
Own<t_btree_ii__1_0__0__11__10__01> rel_577_inliner_FunctionToInline_RetStmt = mk<t_btree_ii__1_0__0__11__10__01>();
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01> wrapper_rel_577_inliner_FunctionToInline_RetStmt;
// -- Table: inliner.ClonedCallRets
Own<t_btree_iiiiii__1_0_2_3_4_5__4__3__111111__000010__000100__010000> rel_578_inliner_ClonedCallRets = mk<t_btree_iiiiii__1_0_2_3_4_5__4__3__111111__000010__000100__010000>();
souffle::RelationWrapper<t_btree_iiiiii__1_0_2_3_4_5__4__3__111111__000010__000100__010000> wrapper_rel_578_inliner_ClonedCallRets;
// -- Table: inliner.InVar_OutVar
Own<t_btree_iii__0_1_2__100__110__111> rel_579_inliner_InVar_OutVar = mk<t_btree_iii__0_1_2__100__110__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__100__110__111> wrapper_rel_579_inliner_InVar_OutVar;
// -- Table: @delta_inliner.InVar_OutVar
Own<t_btree_iii__0_1_2__110__111> rel_580_delta_inliner_InVar_OutVar = mk<t_btree_iii__0_1_2__110__111>();
// -- Table: @new_inliner.InVar_OutVar
Own<t_btree_iii__0_1_2__110__111> rel_581_new_inliner_InVar_OutVar = mk<t_btree_iii__0_1_2__110__111>();
// -- Table: inliner.Out_ActualReturnArgs
Own<t_btree_iii__0_1_2__111> rel_582_inliner_Out_ActualReturnArgs = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_582_inliner_Out_ActualReturnArgs;
// -- Table: inliner.Out_Statement_Uses
Own<t_btree_iii__0_1_2__111> rel_583_inliner_Out_Statement_Uses = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_583_inliner_Out_Statement_Uses;
// -- Table: inliner.Out_Variable_Value
Own<t_btree_ii__0_1__11> rel_584_inliner_Out_Variable_Value = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_584_inliner_Out_Variable_Value;
// -- Table: inliner.Out_Statement_Defines
Own<t_btree_iii__0_1_2__111> rel_585_inliner_Out_Statement_Defines = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_585_inliner_Out_Statement_Defines;
// -- Table: inliner.Out_Statement_Next
Own<t_btree_ii__0_1__11> rel_586_inliner_Out_Statement_Next = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_586_inliner_Out_Statement_Next;
// -- Table: inliner.Out_Statement_Opcode
Own<t_btree_ii__0_1__11> rel_587_inliner_Out_Statement_Opcode = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_587_inliner_Out_Statement_Opcode;
// -- Table: inliner.Out_FormalArgs
Own<t_btree_iii__0_1_2__111> rel_588_inliner_Out_FormalArgs = mk<t_btree_iii__0_1_2__111>();
souffle::RelationWrapper<t_btree_iii__0_1_2__111> wrapper_rel_588_inliner_Out_FormalArgs;
// -- Table: inliner.Out_IsFunction
Own<t_btree_i__0__1> rel_589_inliner_Out_IsFunction = mk<t_btree_i__0__1>();
souffle::RelationWrapper<t_btree_i__0__1> wrapper_rel_589_inliner_Out_IsFunction;
// -- Table: OriginalStatement_Block
Own<t_btree_ii__0_1__11> rel_590_OriginalStatement_Block = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_590_OriginalStatement_Block;
// -- Table: inliner.Out_OriginalStatement_Block
Own<t_btree_ii__0_1__11> rel_591_inliner_Out_OriginalStatement_Block = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_591_inliner_Out_OriginalStatement_Block;
// -- Table: Statement_OriginalStatement
Own<t_btree_ii__0_1__11> rel_592_Statement_OriginalStatement = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_592_Statement_OriginalStatement;
// -- Table: inliner.Out_Statement_OriginalStatement
Own<t_btree_ii__0_1__11> rel_593_inliner_Out_Statement_OriginalStatement = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_593_inliner_Out_Statement_OriginalStatement;
// -- Table: Variable_BlockValue
Own<t_btree_ii__0_1__11> rel_594_Variable_BlockValue = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_594_Variable_BlockValue;
// -- Table: inliner.Out_Variable_BlockValue
Own<t_btree_ii__0_1__11> rel_595_inliner_Out_Variable_BlockValue = mk<t_btree_ii__0_1__11>();
souffle::RelationWrapper<t_btree_ii__0_1__11> wrapper_rel_595_inliner_Out_Variable_BlockValue;
public:
Sf_fa93e8c04b1c471417d1ec06ed50d344()
: wrapper_rel_1_Statement_Defines(0, *rel_1_Statement_Defines, *this, "Statement_Defines", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","n"}}, 0)
, wrapper_rel_2_Statement_Opcode(1, *rel_2_Statement_Opcode, *this, "Statement_Opcode", std::array<const char *,2>{{"s:Statement","s:Opcode"}}, std::array<const char *,2>{{"stmt","op"}}, 0)
, wrapper_rel_3_MSIZE(2, *rel_3_MSIZE, *this, "MSIZE", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"stmt","to"}}, 0)
, wrapper_rel_4_LOGStatement(3, *rel_4_LOGStatement, *this, "LOGStatement", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"logStmt","nIndexedArgs"}}, 0)
, wrapper_rel_5_RETURNDATASIZE(4, *rel_5_RETURNDATASIZE, *this, "RETURNDATASIZE", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"s","f"}}, 0)
, wrapper_rel_6_CALLDATASIZE(5, *rel_6_CALLDATASIZE, *this, "CALLDATASIZE", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"stmt","to"}}, 0)
, wrapper_rel_7_Statement_Uses(6, *rel_7_Statement_Uses, *this, "Statement_Uses", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","i"}}, 0)
, wrapper_rel_8_ADD(7, *rel_8_ADD, *this, "ADD", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_9_ADDFix(8, *rel_9_ADDFix, *this, "ADDFix", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_10_MLOAD(9, *rel_10_MLOAD, *this, "MLOAD", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","a","to"}}, 0)
, wrapper_rel_11_agg_single16(10, *rel_11_agg_single16, *this, "__agg_single16", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0)
, wrapper_rel_12_AuxStatementOpAndArgs(11, *rel_12_AuxStatementOpAndArgs, *this, "AuxStatementOpAndArgs", std::array<const char *,4>{{"s:Statement","s:Opcode","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","op","a","b_val"}}, 0)
, wrapper_rel_13_BasicVariable_Value(12, *rel_13_BasicVariable_Value, *this, "BasicVariable_Value", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_16_BasicAuxStatementOpAndConstantArgValues(13, *rel_16_BasicAuxStatementOpAndConstantArgValues, *this, "BasicAuxStatementOpAndConstantArgValues", std::array<const char *,4>{{"s:Statement","s:Opcode","s:Value","s:Value"}}, std::array<const char *,4>{{"stmt","op","a_val","b_val"}}, 0)
, wrapper_rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation(14, *rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation, *this, "basicVariableValueConstantFolding.ValidConstantFoldOperation", std::array<const char *,3>{{"s:Opcode","s:Value","s:Value"}}, std::array<const char *,3>{{"op","arg1","arg2"}}, 0)
, wrapper_rel_22_basicVariableValueConstantFolding_RequestConstantFold2(15, *rel_22_basicVariableValueConstantFolding_RequestConstantFold2, *this, "basicVariableValueConstantFolding.RequestConstantFold2", std::array<const char *,3>{{"s:Opcode","s:Value","s:Value"}}, std::array<const char *,3>{{"op","arg1","arg2"}}, 0)
, wrapper_rel_25_basicVariableValueConstantFolding_ConstantFoldResult2(16, *rel_25_basicVariableValueConstantFolding_ConstantFoldResult2, *this, "basicVariableValueConstantFolding.ConstantFoldResult2", std::array<const char *,4>{{"s:Opcode","s:Value","s:Value","s:Value"}}, std::array<const char *,4>{{"op","arg1","arg2","result"}}, 0)
, wrapper_rel_28_MLOADFreePtr(17, *rel_28_MLOADFreePtr, *this, "MLOADFreePtr", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mload"}}, 0)
, wrapper_rel_29_MLOADFreePtr_To(18, *rel_29_MLOADFreePtr_To, *this, "MLOADFreePtr_To", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"mload","to"}}, 0)
, wrapper_rel_30_agg_single17(19, *rel_30_agg_single17, *this, "__agg_single17", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0)
, wrapper_rel_31_VarPlusConst(20, *rel_31_VarPlusConst, *this, "VarPlusConst", std::array<const char *,3>{{"s:Variable","s:Value","s:Variable"}}, std::array<const char *,3>{{"var","const","varPlus"}}, 0)
, wrapper_rel_32_ValueWithEvenLength(21, *rel_32_ValueWithEvenLength, *this, "ValueWithEvenLength", std::array<const char *,2>{{"s:Value","i:number"}}, std::array<const char *,2>{{"val","len"}}, 0)
, wrapper_rel_33_ValueMasksOrKeepsByteAtIndex(22, *rel_33_ValueMasksOrKeepsByteAtIndex, *this, "ValueMasksOrKeepsByteAtIndex", std::array<const char *,3>{{"s:Value","i:number","i:number"}}, std::array<const char *,3>{{"val","masksOrKeeps","byte"}}, 0)
, wrapper_rel_34_ValueIsByteMask(23, *rel_34_ValueIsByteMask, *this, "ValueIsByteMask", std::array<const char *,1>{{"s:Value"}}, std::array<const char *,1>{{"val"}}, 0)
, wrapper_rel_35_ByteMask_ZerosMinMax(24, *rel_35_ByteMask_ZerosMinMax, *this, "ByteMask_ZerosMinMax", std::array<const char *,3>{{"s:Value","i:number","i:number"}}, std::array<const char *,3>{{"val","minV","maxV"}}, 0)
, wrapper_rel_36_ValueIsNotAntiByteMask(25, *rel_36_ValueIsNotAntiByteMask, *this, "ValueIsNotAntiByteMask", std::array<const char *,1>{{"s:Value"}}, std::array<const char *,1>{{"val"}}, 0)
, wrapper_rel_37_AntiByteMask(26, *rel_37_AntiByteMask, *this, "AntiByteMask", std::array<const char *,3>{{"s:Value","i:number","i:number"}}, std::array<const char *,3>{{"val","low","high"}}, 0)
, wrapper_rel_38_VarPlusThirtyTwo(27, *rel_38_VarPlusThirtyTwo, *this, "VarPlusThirtyTwo", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"var","varPlus"}}, 0)
, wrapper_rel_39_CALLPRIVATE(28, *rel_39_CALLPRIVATE, *this, "CALLPRIVATE", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"s","f"}}, 0)
, wrapper_rel_40_MSTORE(29, *rel_40_MSTORE, *this, "MSTORE", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","index","var"}}, 0)
, wrapper_rel_41_MSTOREFreePtr(30, *rel_41_MSTOREFreePtr, *this, "MSTOREFreePtr", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mstore"}}, 0)
, wrapper_rel_42_mstoreFreePtrOrder_To(31, *rel_42_mstoreFreePtrOrder_To, *this, "mstoreFreePtrOrder.To", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_43_agg_single7(32, *rel_43_agg_single7, *this, "__agg_single7", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0)
, wrapper_rel_44_MLOADMSTORESameAddrVar(33, *rel_44_MLOADMSTORESameAddrVar, *this, "MLOADMSTORESameAddrVar", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"store","load"}}, 0)
, wrapper_rel_45_NonUniqueMLOADMSTOREForAddrVar(34, *rel_45_NonUniqueMLOADMSTOREForAddrVar, *this, "NonUniqueMLOADMSTOREForAddrVar", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"store","load"}}, 0)
, wrapper_rel_46_UniqueMSTOREMLOADForAddrVar(35, *rel_46_UniqueMSTOREMLOADForAddrVar, *this, "UniqueMSTOREMLOADForAddrVar", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"store","load"}}, 0)
, wrapper_rel_47_agg_single6(36, *rel_47_agg_single6, *this, "__agg_single6", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0)
, wrapper_rel_48_PHI(37, *rel_48_PHI, *this, "PHI", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"s","fro","to"}}, 0)
, wrapper_rel_49_PHIStmtTwoUses(38, *rel_49_PHIStmtTwoUses, *this, "PHIStmtTwoUses", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"phi","var1","var2","def"}}, 0)
, wrapper_rel_50_PossibleArray(39, *rel_50_PossibleArray, *this, "PossibleArray", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"array"}}, 0)
, wrapper_rel_51_SUB(40, *rel_51_SUB, *this, "SUB", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_52_ADDFixx(41, *rel_52_ADDFixx, *this, "ADDFixx", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_53_CALL(42, *rel_53_CALL, *this, "CALL", std::array<const char *,9>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,9>{{"stmt","gas","target","value","data_start","data_length","return_start","return_length","success"}}, 0)
, wrapper_rel_54_DELEGATECALL(43, *rel_54_DELEGATECALL, *this, "DELEGATECALL", std::array<const char *,8>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,8>{{"stmt","gas","target","data_start","data_length","return_start","return_length","success"}}, 0)
, wrapper_rel_55_STATICCALL(44, *rel_55_STATICCALL, *this, "STATICCALL", std::array<const char *,8>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,8>{{"stmt","gas","target","data_start","data_length","return_start","return_length","success"}}, 0)
, wrapper_rel_56_CALLReturnDataStartVar(45, *rel_56_CALLReturnDataStartVar, *this, "CALLReturnDataStartVar", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"call","startVar"}}, 0)
, wrapper_rel_57_callToReturnDataOp_Bypassing(46, *rel_57_callToReturnDataOp_Bypassing, *this, "callToReturnDataOp.Bypassing", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_58_agg_single(47, *rel_58_agg_single, *this, "__agg_single", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0)
, wrapper_rel_59_CALLReturnDataLengthVar(48, *rel_59_CALLReturnDataLengthVar, *this, "CALLReturnDataLengthVar", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"call","lenVar"}}, 0)
, wrapper_rel_60_MSTORE8(49, *rel_60_MSTORE8, *this, "MSTORE8", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","index","from"}}, 0)
, wrapper_rel_61_RETURN(50, *rel_61_RETURN, *this, "RETURN", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","start","length"}}, 0)
, wrapper_rel_62_REVERT(51, *rel_62_REVERT, *this, "REVERT", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","memStart","memLength"}}, 0)
, wrapper_rel_63_SHA3(52, *rel_63_SHA3, *this, "SHA3", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_64_StatementUsesMemory_StartVar(53, *rel_64_StatementUsesMemory_StartVar, *this, "StatementUsesMemory_StartVar", std::array<const char *,3>{{"s:Statement","s:symbol","s:Variable"}}, std::array<const char *,3>{{"stmt","kind","var"}}, 0)
, wrapper_rel_65_StatementUsesMemoryReadsFromZero(54, *rel_65_StatementUsesMemoryReadsFromZero, *this, "StatementUsesMemoryReadsFromZero", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","kind"}}, 0)
, wrapper_rel_66_StatementUsesMemory_LengthVar(55, *rel_66_StatementUsesMemory_LengthVar, *this, "StatementUsesMemory_LengthVar", std::array<const char *,3>{{"s:Statement","s:symbol","s:Variable"}}, std::array<const char *,3>{{"stmt","kind","var"}}, 0)
, wrapper_rel_67_StatementUsesMemory(56, *rel_67_StatementUsesMemory, *this, "StatementUsesMemory", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","kind"}}, 0)
, wrapper_rel_68_mloadAliasesPrecise_Bypassing(57, *rel_68_mloadAliasesPrecise_Bypassing, *this, "mloadAliasesPrecise.Bypassing", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_69_StatementUsesMemoryReadsABIEnc(58, *rel_69_StatementUsesMemoryReadsABIEnc, *this, "StatementUsesMemoryReadsABIEnc", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","kind"}}, 0)
, wrapper_rel_70_StatementUsesMemoryReadsABIEncWSelector(59, *rel_70_StatementUsesMemoryReadsABIEncWSelector, *this, "StatementUsesMemoryReadsABIEncWSelector", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","kind"}}, 0)
, wrapper_rel_71_StatementUsesMemoryReadsRawData(60, *rel_71_StatementUsesMemoryReadsRawData, *this, "StatementUsesMemoryReadsRawData", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","kind"}}, 0)
, wrapper_rel_72_StatementUsesMemoryOfInitiallyComputableLength(61, *rel_72_StatementUsesMemoryOfInitiallyComputableLength, *this, "StatementUsesMemoryOfInitiallyComputableLength", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","length"}}, 0)
, wrapper_rel_73_agg_single4(62, *rel_73_agg_single4, *this, "__agg_single4", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0)
, wrapper_rel_74_agg_single5(63, *rel_74_agg_single5, *this, "__agg_single5", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z1"}}, 0)
, wrapper_rel_75_VariableLengthMemoryCopyStatement(64, *rel_75_VariableLengthMemoryCopyStatement, *this, "VariableLengthMemoryCopyStatement", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","memAddrVar","lenVar"}}, 0)
, wrapper_rel_76_LT(65, *rel_76_LT, *this, "LT", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_77_JUMPI(66, *rel_77_JUMPI, *this, "JUMPI", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","dest","condVar"}}, 0)
, wrapper_rel_78_SLOAD(67, *rel_78_SLOAD, *this, "SLOAD", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","a","to"}}, 0)
, wrapper_rel_79_SSTORE(68, *rel_79_SSTORE, *this, "SSTORE", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","index","var"}}, 0)
, wrapper_rel_80_RETURNPRIVATE(69, *rel_80_RETURNPRIVATE, *this, "RETURNPRIVATE", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"s","b"}}, 0)
, wrapper_rel_81_GT(70, *rel_81_GT, *this, "GT", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_82_ISZERO(71, *rel_82_ISZERO, *this, "ISZERO", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","a","to"}}, 0)
, wrapper_rel_83_MUL(72, *rel_83_MUL, *this, "MUL", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_84_SHL(73, *rel_84_SHL, *this, "SHL", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_85_AND(74, *rel_85_AND, *this, "AND", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_86_AntiMaskOp(75, *rel_86_AntiMaskOp, *this, "AntiMaskOp", std::array<const char *,4>{{"s:Variable","s:Variable","i:number","i:number"}}, std::array<const char *,4>{{"fromVar","toVar","byteLow","byteHigh"}}, 0)
, wrapper_rel_89_OR(76, *rel_89_OR, *this, "OR", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_90_RETURNDATACOPY(77, *rel_90_RETURNDATACOPY, *this, "RETURNDATACOPY", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"s","a","b","c"}}, 0)
, wrapper_rel_91_callToReturnDataOp_To(78, *rel_91_callToReturnDataOp_To, *this, "callToReturnDataOp.To", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_92_CALLDATALOAD(79, *rel_92_CALLDATALOAD, *this, "CALLDATALOAD", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","a","to"}}, 0)
, wrapper_rel_93_agg_single13(80, *rel_93_agg_single13, *this, "__agg_single13", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0)
, wrapper_rel_94_CALLDATACOPY(81, *rel_94_CALLDATACOPY, *this, "CALLDATACOPY", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"s","mem_start","calldata_start","length"}}, 0)
, wrapper_rel_95_DIV(82, *rel_95_DIV, *this, "DIV", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","a","b","to"}}, 0)
, wrapper_rel_96_CALLCODE(83, *rel_96_CALLCODE, *this, "CALLCODE", std::array<const char *,8>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,8>{{"stmt","gas","target","data_start","data_length","return_start","return_length","success"}}, 0)
, wrapper_rel_97_CALLStatement(84, *rel_97_CALLStatement, *this, "CALLStatement", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"call","nOtherArgs"}}, 0)
, wrapper_rel_98_LOGIndexedArg(85, *rel_98_LOGIndexedArg, *this, "LOGIndexedArg", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"logStmt","indexedArg","index"}}, 0)
, wrapper_rel_99_Statement_Block(86, *rel_99_Statement_Block, *this, "Statement_Block", std::array<const char *,2>{{"s:Statement","s:Block"}}, std::array<const char *,2>{{"stmt","block"}}, 0)
, wrapper_rel_100_ActualArgs(87, *rel_100_ActualArgs, *this, "ActualArgs", std::array<const char *,3>{{"s:Block","s:Variable","i:number"}}, std::array<const char *,3>{{"caller","a","pos"}}, 0)
, wrapper_rel_101_mloadAliases_BlockHasFromStmt(88, *rel_101_mloadAliases_BlockHasFromStmt, *this, "mloadAliases.BlockHasFromStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_102_mstoreFreePtrOrder_BlockHasFromStmt(89, *rel_102_mstoreFreePtrOrder_BlockHasFromStmt, *this, "mstoreFreePtrOrder.BlockHasFromStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_103_mstoreFreePtrOrder_BlockHasToStmt(90, *rel_103_mstoreFreePtrOrder_BlockHasToStmt, *this, "mstoreFreePtrOrder.BlockHasToStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_104_DirectThrowBlock(91, *rel_104_DirectThrowBlock, *this, "DirectThrowBlock", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_105_mloadAliasesPrecise_BlockHasBypassingStmt(92, *rel_105_mloadAliasesPrecise_BlockHasBypassingStmt, *this, "mloadAliasesPrecise.BlockHasBypassingStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_106_callToReturnDataOp_BlockHasBypassingStmt(93, *rel_106_callToReturnDataOp_BlockHasBypassingStmt, *this, "callToReturnDataOp.BlockHasBypassingStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_107_callToReturnDataOp_BlockHasToStmt(94, *rel_107_callToReturnDataOp_BlockHasToStmt, *this, "callToReturnDataOp.BlockHasToStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_108_inliner_In_ActualArgs(95, *rel_108_inliner_In_ActualArgs, *this, "inliner.In_ActualArgs", std::array<const char *,3>{{"s:Block","s:Variable","i:number"}}, std::array<const char *,3>{{"caller","a","pos"}}, 0)
, wrapper_rel_109_inliner_ThrowBlock(96, *rel_109_inliner_ThrowBlock, *this, "inliner.ThrowBlock", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_110_CallGraphEdge(97, *rel_110_CallGraphEdge, *this, "CallGraphEdge", std::array<const char *,2>{{"s:Block","s:Function"}}, std::array<const char *,2>{{"block","function"}}, 0)
, wrapper_rel_111_FormalArgs(98, *rel_111_FormalArgs, *this, "FormalArgs", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","a","pos"}}, 0)
, wrapper_rel_112_isVariable(99, *rel_112_isVariable, *this, "isVariable", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"v"}}, 0)
, wrapper_rel_113_inliner_FunHasArgMismatch(100, *rel_113_inliner_FunHasArgMismatch, *this, "inliner.FunHasArgMismatch", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_114_FunctionEntry(101, *rel_114_FunctionEntry, *this, "FunctionEntry", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_115_InFunction(102, *rel_115_InFunction, *this, "InFunction", std::array<const char *,2>{{"s:Block","s:Function"}}, std::array<const char *,2>{{"block","function"}}, 0)
, wrapper_rel_116_Statement_Function(103, *rel_116_Statement_Function, *this, "Statement_Function", std::array<const char *,2>{{"s:Statement","s:Function"}}, std::array<const char *,2>{{"s","f"}}, 0)
, wrapper_rel_117_inliner_FunctionContainsMemConsStmt(104, *rel_117_inliner_FunctionContainsMemConsStmt, *this, "inliner.FunctionContainsMemConsStmt", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_118_Variable_Function(105, *rel_118_Variable_Function, *this, "Variable_Function", std::array<const char *,2>{{"s:Variable","s:Function"}}, std::array<const char *,2>{{"v","f"}}, 0)
, wrapper_rel_119_FormalReturnArgs(106, *rel_119_FormalReturnArgs, *this, "FormalReturnArgs", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","a","pos"}}, 0)
, wrapper_rel_120_inliner_In_FormalReturnArgs(107, *rel_120_inliner_In_FormalReturnArgs, *this, "inliner.In_FormalReturnArgs", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","a","pos"}}, 0)
, wrapper_rel_121_LocalBlockEdge(108, *rel_121_LocalBlockEdge, *this, "LocalBlockEdge", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"block","nextBlock"}}, 0)
, wrapper_rel_122_DoesNotDominate(109, *rel_122_DoesNotDominate, *this, "DoesNotDominate", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"candidate","b"}}, 0)
, wrapper_rel_125_Dominates(110, *rel_125_Dominates, *this, "Dominates", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"dominator","s"}}, 0)
, wrapper_rel_126_StructuredLoopBackEdge(111, *rel_126_StructuredLoopBackEdge, *this, "StructuredLoopBackEdge", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"from","to"}}, 0)
, wrapper_rel_127_StructuredLoopHead(112, *rel_127_StructuredLoopHead, *this, "StructuredLoopHead", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"s"}}, 0)
, wrapper_rel_128_BlockInStructuredLoop(113, *rel_128_BlockInStructuredLoop, *this, "BlockInStructuredLoop", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"s","loophead"}}, 0)
, wrapper_rel_131_StatementInStructuredLoop(114, *rel_131_StatementInStructuredLoop, *this, "StatementInStructuredLoop", std::array<const char *,2>{{"s:Statement","s:Block"}}, std::array<const char *,2>{{"s","loop"}}, 0)
, wrapper_rel_132_inductionVariableFlow_TransferBoundary(115, *rel_132_inductionVariableFlow_TransferBoundary, *this, "inductionVariableFlow.TransferBoundary", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_133_LocalBlockPath(116, *rel_133_LocalBlockPath, *this, "LocalBlockPath", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"from","to"}}, 0)
, wrapper_rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath(117, *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath, *this, "mloadAliases.FromStmtToStmtDiffBlockHavePath", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block2"}}, 0)
, wrapper_rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath(118, *rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath, *this, "mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block2"}}, 0)
, wrapper_rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath(119, *rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath, *this, "callToReturnDataOp.FromStmtToStmtDiffBlockHavePath", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block2"}}, 0)
, wrapper_rel_139_AfterCALLCheckRetDataSize(120, *rel_139_AfterCALLCheckRetDataSize, *this, "AfterCALLCheckRetDataSize", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_140_IsBlock(121, *rel_140_IsBlock, *this, "IsBlock", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"b"}}, 0)
, wrapper_rel_141_inliner_FunCalledWithImpreciseControlFlow(122, *rel_141_inliner_FunCalledWithImpreciseControlFlow, *this, "inliner.FunCalledWithImpreciseControlFlow", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_142_inliner_Function_Exit(123, *rel_142_inliner_Function_Exit, *this, "inliner.Function_Exit", std::array<const char *,2>{{"s:Function","s:Block"}}, std::array<const char *,2>{{"fun","block"}}, 0)
, wrapper_rel_143_inliner_FunHasRetMismatch(124, *rel_143_inliner_FunHasRetMismatch, *this, "inliner.FunHasRetMismatch", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_144_inliner_In_ValidBlock(125, *rel_144_inliner_In_ValidBlock, *this, "inliner.In_ValidBlock", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_145_Statement_Next(126, *rel_145_Statement_Next, *this, "Statement_Next", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt","next"}}, 0)
, wrapper_rel_146_Helper_NextStatementInSameBlock(127, *rel_146_Helper_NextStatementInSameBlock, *this, "Helper_NextStatementInSameBlock", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt","stmtNext"}}, 0)
, wrapper_rel_147_LocalStatementPathInBlock(128, *rel_147_LocalStatementPathInBlock, *this, "LocalStatementPathInBlock", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt2"}}, 0)
, wrapper_rel_150_mloadAliases_FromStmtToStmtSameBlock(129, *rel_150_mloadAliases_FromStmtToStmtSameBlock, *this, "mloadAliases.FromStmtToStmtSameBlock", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted(130, *rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted, *this, "mloadAliasesPrecise.FromStmtToStmtSameBlockInterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted(131, *rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted, *this, "mloadAliasesPrecise.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock(132, *rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock, *this, "mstoreFreePtrOrder.FromStmtToStmtSameBlock", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted(133, *rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block3"}}, 0)
, wrapper_rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted(134, *rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_156_mloadAliasesPrecise_ReachableBypassingAny(135, *rel_156_mloadAliasesPrecise_ReachableBypassingAny, *this, "mloadAliasesPrecise.ReachableBypassingAny", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt2"}}, 0)
, wrapper_rel_157_MLOADSFreePtrUnchangedNoMemReuse(136, *rel_157_MLOADSFreePtrUnchangedNoMemReuse, *this, "MLOADSFreePtrUnchangedNoMemReuse", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mload1","mload2"}}, 0)
, wrapper_rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted(137, *rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block3"}}, 0)
, wrapper_rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted(138, *rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "callToReturnDataOp.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_160_callToReturnDataOp_FromStmtToStmtSameBlock(139, *rel_160_callToReturnDataOp_FromStmtToStmtSameBlock, *this, "callToReturnDataOp.FromStmtToStmtSameBlock", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted(140, *rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted, *this, "callToReturnDataOp.FromStmtToStmtSameBlockInterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted(141, *rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted, *this, "callToReturnDataOp.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_163_callToReturnDataOp_ReachableBypassingAny(142, *rel_163_callToReturnDataOp_ReachableBypassingAny, *this, "callToReturnDataOp.ReachableBypassingAny", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt2"}}, 0)
, wrapper_rel_164_RETURNDATACOPYOfCALL(143, *rel_164_RETURNDATACOPYOfCALL, *this, "RETURNDATACOPYOfCALL", std::array<const char *,5>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Statement"}}, std::array<const char *,5>{{"returndatacopy","memoryStart","retDataStart","length","call"}}, 0)
, wrapper_rel_165_RETURNDATASIZEOfCALL(144, *rel_165_RETURNDATASIZEOfCALL, *this, "RETURNDATASIZEOfCALL", std::array<const char *,3>{{"s:Statement","s:Variable","s:Statement"}}, std::array<const char *,3>{{"returndatasize","sizevar","call"}}, 0)
, wrapper_rel_166_RETURNDATACOPYAllDataOfCALL(145, *rel_166_RETURNDATACOPYAllDataOfCALL, *this, "RETURNDATACOPYAllDataOfCALL", std::array<const char *,3>{{"s:Statement","s:Variable","s:Statement"}}, std::array<const char *,3>{{"returndatacopy","memoryStart","call"}}, 0)
, wrapper_rel_167_Block_Tail(146, *rel_167_Block_Tail, *this, "Block_Tail", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"b","t"}}, 0)
, wrapper_rel_168_CALLUpdatesFreePtr(147, *rel_168_CALLUpdatesFreePtr, *this, "CALLUpdatesFreePtr", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_171_FunctionUpdatesFreePtr(148, *rel_171_FunctionUpdatesFreePtr, *this, "FunctionUpdatesFreePtr", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_174_mloadAliases_Bypassing(149, *rel_174_mloadAliases_Bypassing, *this, "mloadAliases.Bypassing", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_175_mloadAliases_BlockHasBypassingStmt(150, *rel_175_mloadAliases_BlockHasBypassingStmt, *this, "mloadAliases.BlockHasBypassingStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted(151, *rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block3"}}, 0)
, wrapper_rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted(152, *rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "mloadAliases.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted(153, *rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted, *this, "mloadAliases.FromStmtToStmtSameBlockInterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted(154, *rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted, *this, "mloadAliases.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_180_mloadAliases_ReachableBypassingAny(155, *rel_180_mloadAliases_ReachableBypassingAny, *this, "mloadAliases.ReachableBypassingAny", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt2"}}, 0)
, wrapper_rel_181_MLOADSFreePtrUnchanged(156, *rel_181_MLOADSFreePtrUnchanged, *this, "MLOADSFreePtrUnchanged", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mload1","mload2"}}, 0)
, wrapper_rel_182_mstoreFreePtrOrder_Bypassing(157, *rel_182_mstoreFreePtrOrder_Bypassing, *this, "mstoreFreePtrOrder.Bypassing", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt(158, *rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt, *this, "mstoreFreePtrOrder.BlockHasBypassingStmt", std::array<const char *,2>{{"s:Block","s:Statement"}}, std::array<const char *,2>{{"block","stmt"}}, 0)
, wrapper_rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted(159, *rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,4>{{"s:Statement","s:Block","s:Statement","s:Block"}}, std::array<const char *,4>{{"stmt1","block1","stmt3","block3"}}, 0)
, wrapper_rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted(160, *rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted(161, *rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted, *this, "mstoreFreePtrOrder.FromStmtToStmtSameBlockInterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted(162, *rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted, *this, "mstoreFreePtrOrder.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt3"}}, 0)
, wrapper_rel_188_mstoreFreePtrOrder_ReachableBypassingAny(163, *rel_188_mstoreFreePtrOrder_ReachableBypassingAny, *this, "mstoreFreePtrOrder.ReachableBypassingAny", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt1","stmt2"}}, 0)
, wrapper_rel_189_MLOADFreePtrLoadsValueStoredAt(164, *rel_189_MLOADFreePtrLoadsValueStoredAt, *this, "MLOADFreePtrLoadsValueStoredAt", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mload","mstore"}}, 0)
, wrapper_rel_190_MSTOREFreePtrOrder(165, *rel_190_MSTOREFreePtrOrder, *this, "MSTOREFreePtrOrder", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mstore1","mstore2"}}, 0)
, wrapper_rel_191_LoopExitCond(166, *rel_191_LoopExitCond, *this, "LoopExitCond", std::array<const char *,2>{{"s:Variable","s:Block"}}, std::array<const char *,2>{{"condVar","loop"}}, 0)
, wrapper_rel_192_ActualReturnArgs(167, *rel_192_ActualReturnArgs, *this, "ActualReturnArgs", std::array<const char *,3>{{"s:Block","s:Variable","i:number"}}, std::array<const char *,3>{{"caller","a","pos"}}, 0)
, wrapper_rel_193_FunctionCallReturn(168, *rel_193_FunctionCallReturn, *this, "FunctionCallReturn", std::array<const char *,3>{{"s:Block","s:Function","s:Block"}}, std::array<const char *,3>{{"block","function","return"}}, 0)
, wrapper_rel_194_inductionVariableFlow_TransferOpcode(169, *rel_194_inductionVariableFlow_TransferOpcode, *this, "inductionVariableFlow.TransferOpcode", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"op"}}, 0)
, wrapper_rel_195_inductionVariableFlow_Flows(170, *rel_195_inductionVariableFlow_Flows, *this, "inductionVariableFlow.Flows", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"x","y"}}, 0)
, wrapper_rel_198_inductionVariableFlow_FunctionFlowSummary(171, *rel_198_inductionVariableFlow_FunctionFlowSummary, *this, "inductionVariableFlow.FunctionFlowSummary", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","from","n"}}, 0)
, wrapper_rel_201_ShiftConst(172, *rel_201_ShiftConst, *this, "ShiftConst", std::array<const char *,2>{{"s:Value","i:number"}}, std::array<const char *,2>{{"val","shiftBytes"}}, 0)
, wrapper_rel_204_LShiftBytes(173, *rel_204_LShiftBytes, *this, "LShiftBytes", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","shiftedVar","bytes"}}, 0)
, wrapper_rel_205_Mask_Length(174, *rel_205_Mask_Length, *this, "Mask_Length", std::array<const char *,2>{{"s:Value","i:number"}}, std::array<const char *,2>{{"mask","bytes"}}, 0)
, wrapper_rel_206_LowBytesMaskOp(175, *rel_206_LowBytesMaskOp, *this, "LowBytesMaskOp", std::array<const char *,3>{{"s:Variable","s:Variable","i:number"}}, std::array<const char *,3>{{"fromVar","toVar","maskLen"}}, 0)
, wrapper_rel_207_PartialMSTORE(176, *rel_207_PartialMSTORE, *this, "PartialMSTORE", std::array<const char *,4>{{"s:Statement","s:Statement","s:Variable","i:number"}}, std::array<const char *,4>{{"mstore","mload","storedVar","updateBytes"}}, 0)
, wrapper_rel_208_variableValueConstantFolding_RequestConstantFold2(177, *rel_208_variableValueConstantFolding_RequestConstantFold2, *this, "variableValueConstantFolding.RequestConstantFold2", std::array<const char *,3>{{"s:Opcode","s:Value","s:Value"}}, std::array<const char *,3>{{"op","arg1","arg2"}}, 0)
, wrapper_rel_211_Variable_Value(178, *rel_211_Variable_Value, *this, "Variable_Value", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_214_AuxStatementOpAndConstantArgValues(179, *rel_214_AuxStatementOpAndConstantArgValues, *this, "AuxStatementOpAndConstantArgValues", std::array<const char *,4>{{"s:Statement","s:Opcode","s:Value","s:Value"}}, std::array<const char *,4>{{"stmt","op","a_val","b_val"}}, 0)
, wrapper_rel_217_InductionVariable(180, *rel_217_InductionVariable, *this, "InductionVariable", std::array<const char *,2>{{"s:Variable","s:Block"}}, std::array<const char *,2>{{"v","loop"}}, 0)
, wrapper_rel_220_GlobalInductionVariableStore(181, *rel_220_GlobalInductionVariableStore, *this, "GlobalInductionVariableStore", std::array<const char *,2>{{"s:Value","s:Block"}}, std::array<const char *,2>{{"storeVal","loop"}}, 0)
, wrapper_rel_223_Variable_NumericValue(182, *rel_223_Variable_NumericValue, *this, "Variable_NumericValue", std::array<const char *,2>{{"s:Variable","i:number"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_226_MSTOREFreePtr_IncByAmount(183, *rel_226_MSTOREFreePtr_IncByAmount, *this, "MSTOREFreePtr_IncByAmount", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"mstore","amount"}}, 0)
, wrapper_rel_229_Variable_SymbolicValue(184, *rel_229_Variable_SymbolicValue, *this, "Variable_SymbolicValue", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_232_FreePointerBasedValue(185, *rel_232_FreePointerBasedValue, *this, "FreePointerBasedValue", std::array<const char *,4>{{"s:Value","s:Statement","i:number","i:number"}}, std::array<const char *,4>{{"val","defInstr","depth","numericValue"}}, 0)
, wrapper_rel_235_FreePointerBasedValuesWithFreePointerAliases(186, *rel_235_FreePointerBasedValuesWithFreePointerAliases, *this, "FreePointerBasedValuesWithFreePointerAliases", std::array<const char *,2>{{"s:Value","s:Value"}}, std::array<const char *,2>{{"val1","val2"}}, 0)
, wrapper_rel_238_FreePointerBasedValuesNumDiff(187, *rel_238_FreePointerBasedValuesNumDiff, *this, "FreePointerBasedValuesNumDiff", std::array<const char *,3>{{"s:Value","s:Value","i:number"}}, std::array<const char *,3>{{"val1","val2","numDiff"}}, 0)
, wrapper_rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals(188, *rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals, *this, "FreePointerBasedValuesWithFreePointerAliasesNumVals", std::array<const char *,4>{{"s:Value","s:Value","i:number","i:number"}}, std::array<const char *,4>{{"val1","val2","numVal1","numVal2"}}, 0)
, wrapper_rel_244_StatementWritesMemoryOfConstantLength(189, *rel_244_StatementWritesMemoryOfConstantLength, *this, "StatementWritesMemoryOfConstantLength", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","addrVar","length"}}, 0)
, wrapper_rel_247_MemoryAddressVar(190, *rel_247_MemoryAddressVar, *this, "MemoryAddressVar", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"var"}}, 0)
, wrapper_rel_250_MemoryAddressVariable_Function(191, *rel_250_MemoryAddressVariable_Function, *this, "MemoryAddressVariable_Function", std::array<const char *,2>{{"s:Variable","s:Function"}}, std::array<const char *,2>{{"var","fun"}}, 0)
, wrapper_rel_253_MemoryAddressVarsNumDiff(192, *rel_253_MemoryAddressVarsNumDiff, *this, "MemoryAddressVarsNumDiff", std::array<const char *,3>{{"s:Variable","s:Variable","i:number"}}, std::array<const char *,3>{{"var1","var2","numDiff"}}, 0)
, wrapper_rel_256_PossibleStructAllocation(193, *rel_256_PossibleStructAllocation, *this, "PossibleStructAllocation", std::array<const char *,4>{{"s:Statement","s:Statement","s:Variable","i:number"}}, std::array<const char *,4>{{"mload","mstore","structBase","wordWidth"}}, 0)
, wrapper_rel_259_PossibleStructArg(194, *rel_259_PossibleStructArg, *this, "PossibleStructArg", std::array<const char *,3>{{"s:Function","s:Variable","s:Variable"}}, std::array<const char *,3>{{"function","actual","formal"}}, 0)
, wrapper_rel_262_InductionVariableIncreasesByConst(195, *rel_262_InductionVariableIncreasesByConst, *this, "InductionVariableIncreasesByConst", std::array<const char *,3>{{"s:Block","r:SimpleInductionVariable","i:number"}}, std::array<const char *,3>{{"loop","simpleIndVar","const"}}, 0)
, wrapper_rel_265_InductionVariableLowerBoundVar(196, *rel_265_InductionVariableLowerBoundVar, *this, "InductionVariableLowerBoundVar", std::array<const char *,3>{{"s:Block","r:SimpleInductionVariable","s:Variable"}}, std::array<const char *,3>{{"loop","indVar","bound"}}, 0)
, wrapper_rel_268_InductionVariableUpperBoundVar(197, *rel_268_InductionVariableUpperBoundVar, *this, "InductionVariableUpperBoundVar", std::array<const char *,3>{{"s:Block","r:SimpleInductionVariable","s:Variable"}}, std::array<const char *,3>{{"loop","indVar","bound"}}, 0)
, wrapper_rel_271_MemoryCopyLoop(198, *rel_271_MemoryCopyLoop, *this, "MemoryCopyLoop", std::array<const char *,3>{{"s:Block","s:Variable","s:Variable"}}, std::array<const char *,3>{{"loop","memAddrFrom","memAddrTo"}}, 0)
, wrapper_rel_274_MemoryCopyLoopConstLength(199, *rel_274_MemoryCopyLoopConstLength, *this, "MemoryCopyLoopConstLength", std::array<const char *,4>{{"s:Block","s:Variable","s:Variable","i:number"}}, std::array<const char *,4>{{"loop","memAddrFrom","memAddrTo","length"}}, 0)
, wrapper_rel_277_WellFormedLoopInductionVariable(200, *rel_277_WellFormedLoopInductionVariable, *this, "WellFormedLoopInductionVariable", std::array<const char *,3>{{"s:Block","s:Variable","r:SimpleInductionVariable"}}, std::array<const char *,3>{{"loop","inductionPhiVar","simpleIndVar"}}, 0)
, wrapper_rel_280_StatementWritesMemoryCopiedFromLoop(201, *rel_280_StatementWritesMemoryCopiedFromLoop, *this, "StatementWritesMemoryCopiedFromLoop", std::array<const char *,5>{{"s:Statement","s:Variable","s:Variable","i:number","i:number"}}, std::array<const char *,5>{{"memWriteStmt","newIndexVar","memAddrTo","numDiff","writeLength"}}, 0)
, wrapper_rel_283_CALLReturnDataLengthVal(202, *rel_283_CALLReturnDataLengthVal, *this, "CALLReturnDataLengthVal", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"call","length"}}, 0)
, wrapper_rel_286_CALLReturnsFixedSizeData(203, *rel_286_CALLReturnsFixedSizeData, *this, "CALLReturnsFixedSizeData", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"call","length"}}, 0)
, wrapper_rel_289_variableValueConstantFolding_ConstantFoldResult2(204, *rel_289_variableValueConstantFolding_ConstantFoldResult2, *this, "variableValueConstantFolding.ConstantFoldResult2", std::array<const char *,4>{{"s:Opcode","s:Value","s:Value","s:Value"}}, std::array<const char *,4>{{"op","arg1","arg2","result"}}, 0)
, wrapper_rel_292_variableValueConstantFolding_ValidConstantFoldOperation(205, *rel_292_variableValueConstantFolding_ValidConstantFoldOperation, *this, "variableValueConstantFolding.ValidConstantFoldOperation", std::array<const char *,3>{{"s:Opcode","s:Value","s:Value"}}, std::array<const char *,3>{{"op","arg1","arg2"}}, 0)
, wrapper_rel_295_FreePointerBasedValuesEqual(206, *rel_295_FreePointerBasedValuesEqual, *this, "FreePointerBasedValuesEqual", std::array<const char *,2>{{"s:Value","s:Value"}}, std::array<const char *,2>{{"val1","val2"}}, 0)
, wrapper_rel_296_FreePointerBasedValue_AliasRep(207, *rel_296_FreePointerBasedValue_AliasRep, *this, "FreePointerBasedValue_AliasRep", std::array<const char *,2>{{"s:Value","s:Value"}}, std::array<const char *,2>{{"val","valRep"}}, 0)
, wrapper_rel_297_PossibleArrayAlias(208, *rel_297_PossibleArrayAlias, *this, "PossibleArrayAlias", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"arrVar1","arrVar2"}}, 0)
, wrapper_rel_298_CALLReturnsArray(209, *rel_298_CALLReturnsArray, *this, "CALLReturnsArray", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_299_agg_single2(210, *rel_299_agg_single2, *this, "__agg_single2", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z2"}}, 0)
, wrapper_rel_300_VarPlusSixtyThreeAndNotThirtyOne(211, *rel_300_VarPlusSixtyThreeAndNotThirtyOne, *this, "VarPlusSixtyThreeAndNotThirtyOne", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"var","varPlus"}}, 0)
, wrapper_rel_301_ReturnDataByteArray(212, *rel_301_ReturnDataByteArray, *this, "ReturnDataByteArray", std::array<const char *,3>{{"s:Variable","s:Variable","s:Statement"}}, std::array<const char *,3>{{"arrVar","abiEncArrVar","call"}}, 0)
, wrapper_rel_302_IsABIEncodedArrayVar(213, *rel_302_IsABIEncodedArrayVar, *this, "IsABIEncodedArrayVar", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"var"}}, 0)
, wrapper_rel_305_ABIEncodedArrayVarsInSameClass(214, *rel_305_ABIEncodedArrayVarsInSameClass, *this, "ABIEncodedArrayVarsInSameClass", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"arrVar1","arrVar2"}}, 0)
, wrapper_rel_306_ABIEncodedArrayVar_ClassRep(215, *rel_306_ABIEncodedArrayVar_ClassRep, *this, "ABIEncodedArrayVar_ClassRep", std::array<const char *,2>{{"s:Variable","s:ArrayVariable"}}, std::array<const char *,2>{{"arrVar","classRep"}}, 0)
, wrapper_rel_307_ABIEncodedArrayNoFunctionSelector(216, *rel_307_ABIEncodedArrayNoFunctionSelector, *this, "ABIEncodedArrayNoFunctionSelector", std::array<const char *,1>{{"s:ArrayVariable"}}, std::array<const char *,1>{{"abiArr"}}, 0)
, wrapper_rel_308_ABIEncodedArrayReadByStmt(217, *rel_308_ABIEncodedArrayReadByStmt, *this, "ABIEncodedArrayReadByStmt", std::array<const char *,2>{{"s:ArrayVariable","s:Statement"}}, std::array<const char *,2>{{"abiArr","memConsStmt"}}, 0)
, wrapper_rel_309_ABIEncodedArrayWFunctionSelector(218, *rel_309_ABIEncodedArrayWFunctionSelector, *this, "ABIEncodedArrayWFunctionSelector", std::array<const char *,1>{{"s:ArrayVariable"}}, std::array<const char *,1>{{"abiArr"}}, 0)
, wrapper_rel_310_StatementUsesMemoryOfComputableLength(219, *rel_310_StatementUsesMemoryOfComputableLength, *this, "StatementUsesMemoryOfComputableLength", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","length"}}, 0)
, wrapper_rel_311_StatementReadsMemoryOfConstantLength(220, *rel_311_StatementReadsMemoryOfConstantLength, *this, "StatementReadsMemoryOfConstantLength", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","length"}}, 0)
, wrapper_rel_312_Analytics_LenVarHasManyVars(221, *rel_312_Analytics_LenVarHasManyVars, *this, "Analytics_LenVarHasManyVars", std::array<const char *,2>{{"s:Statement","s:Variable"}}, std::array<const char *,2>{{"stmt","lenvar"}}, 0)
, wrapper_rel_313_agg_single3(222, *rel_313_agg_single3, *this, "__agg_single3", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0)
, wrapper_rel_314_Verbatim_MemConsStmtsLengths(223, *rel_314_Verbatim_MemConsStmtsLengths, *this, "Verbatim_MemConsStmtsLengths", std::array<const char *,3>{{"i:number","i:number","i:number"}}, std::array<const char *,3>{{"numOfMemConsStmts","haveLengthInit","haveLength"}}, 0)
, wrapper_rel_315_StatementWritesMemoryOfLength(224, *rel_315_StatementWritesMemoryOfLength, *this, "StatementWritesMemoryOfLength", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","addrVar","length"}}, 0)
, wrapper_rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias(225, *rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias, *this, "StatementWritesMemoryOfConstantLengthAtMemAlias", std::array<const char *,3>{{"s:Statement","s:symbol","i:number"}}, std::array<const char *,3>{{"memWriteStmt","valRep","relativeLength"}}, 0)
, wrapper_rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt(226, *rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt, *this, "memWriteToMemConsStmtImpr.BlockHasBypassingStmt", std::array<const char *,4>{{"s:Block","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"block","stmt","arg","len"}}, 0)
, wrapper_rel_318_mstoreToMemConsStmt_From(227, *rel_318_mstoreToMemConsStmt_From, *this, "mstoreToMemConsStmt.From", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","arg"}}, 0)
, wrapper_rel_319_mstoreToMemConsStmt_BlockHasFromStmt(228, *rel_319_mstoreToMemConsStmt_BlockHasFromStmt, *this, "mstoreToMemConsStmt.BlockHasFromStmt", std::array<const char *,3>{{"s:Block","s:Statement","s:symbol"}}, std::array<const char *,3>{{"block","stmt","arg"}}, 0)
, wrapper_rel_320_StatementUsesMemoryOfNonComputableLength(229, *rel_320_StatementUsesMemoryOfNonComputableLength, *this, "StatementUsesMemoryOfNonComputableLength", std::array<const char *,3>{{"s:Statement","s:symbol","s:Variable"}}, std::array<const char *,3>{{"stmt","kind","var"}}, 0)
, wrapper_rel_321_mstoreToMemConsStmt_To(230, *rel_321_mstoreToMemConsStmt_To, *this, "mstoreToMemConsStmt.To", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","arg"}}, 0)
, wrapper_rel_322_mstoreToMemConsStmt_BlockHasToStmt(231, *rel_322_mstoreToMemConsStmt_BlockHasToStmt, *this, "mstoreToMemConsStmt.BlockHasToStmt", std::array<const char *,3>{{"s:Block","s:Statement","s:symbol"}}, std::array<const char *,3>{{"block","stmt","arg"}}, 0)
, wrapper_rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath(232, *rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath, *this, "mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath", std::array<const char *,5>{{"s:Statement","s:Block","s:Statement","s:Block","s:symbol"}}, std::array<const char *,5>{{"stmt1","block1","stmt3","block2","arg"}}, 0)
, wrapper_rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock(233, *rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock, *this, "mstoreToMemConsStmt.FromStmtToStmtSameBlock", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_325_mstoreToMemConsStmt_Bypassing(234, *rel_325_mstoreToMemConsStmt_Bypassing, *this, "mstoreToMemConsStmt.Bypassing", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","arg"}}, 0)
, wrapper_rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt(235, *rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt, *this, "mstoreToMemConsStmt.BlockHasBypassingStmt", std::array<const char *,3>{{"s:Block","s:Statement","s:symbol"}}, std::array<const char *,3>{{"block","stmt","arg"}}, 0)
, wrapper_rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted(236, *rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,5>{{"s:Statement","s:Block","s:Statement","s:Block","s:symbol"}}, std::array<const char *,5>{{"stmt1","block1","stmt3","block2","arg"}}, 0)
, wrapper_rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted(237, *rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted(238, *rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted, *this, "mstoreToMemConsStmt.FromStmtToStmtSameBlockInterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted(239, *rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted, *this, "mstoreToMemConsStmt.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_331_mstoreToMemConsStmt_ReachableBypassingAny(240, *rel_331_mstoreToMemConsStmt_ReachableBypassingAny, *this, "mstoreToMemConsStmt.ReachableBypassingAny", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt2","arg"}}, 0)
, wrapper_rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength(241, *rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength, *this, "InitialMemWriteToMemConsStmtWithNonComputableLength", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mstore","memConsStmt"}}, 0)
, wrapper_rel_333_agg_subclause(242, *rel_333_agg_subclause, *this, "__agg_subclause", std::array<const char *,7>{{"i:__numberConstant","i:number","i:number","s:Statement","s:Statement","s:Variable","s:Variable"}}, std::array<const char *,7>{{"approxCandidate","diff","length","memConsStmt","memWriteStmt","startVar","writeStartVar"}}, 0)
, wrapper_rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox(243, *rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox, *this, "StatementUsesMemoryOfNonComputableLength_LengthApprox", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"memConsStmt","startVar","approx"}}, 0)
, wrapper_rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias(244, *rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias, *this, "StatementReadsMemoryOfConstantLengthAtMemAlias", std::array<const char *,3>{{"s:Statement","s:symbol","i:number"}}, std::array<const char *,3>{{"memReadStmt","valRep","relativeLength"}}, 0)
, wrapper_rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt(245, *rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt, *this, "memWriteToMemConsStmtImpr.BlockHasToStmt", std::array<const char *,4>{{"s:Block","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"block","stmt","arg","len"}}, 0)
, wrapper_rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath(246, *rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath", std::array<const char *,5>{{"s:Statement","s:Block","s:Statement","s:Block","s:symbol"}}, std::array<const char *,5>{{"stmt1","block1","stmt3","block2","arg"}}, 0)
, wrapper_rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted(247, *rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted", std::array<const char *,5>{{"s:Statement","s:Block","s:Statement","s:Block","s:symbol"}}, std::array<const char *,5>{{"stmt1","block1","stmt3","block2","arg"}}, 0)
, wrapper_rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted(248, *rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock(249, *rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted(250, *rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockInterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted(251, *rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted, *this, "memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt3","arg"}}, 0)
, wrapper_rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny(252, *rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny, *this, "memWriteToMemConsStmtImpr.ReachableBypassingAny", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt2","arg"}}, 0)
, wrapper_rel_344_MemWriteToMemConsStmtWithConstantLength(253, *rel_344_MemWriteToMemConsStmtWithConstantLength, *this, "MemWriteToMemConsStmtWithConstantLength", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"mstore","memConsStmt","writeAddrRep"}}, 0)
, wrapper_rel_345_MemWriteToMemConsStmtWithNonComputableLength(254, *rel_345_MemWriteToMemConsStmtWithNonComputableLength, *this, "MemWriteToMemConsStmtWithNonComputableLength", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mstore","memConsStmt"}}, 0)
, wrapper_rel_346_MemWriteToMemConsStmt(255, *rel_346_MemWriteToMemConsStmt, *this, "MemWriteToMemConsStmt", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"mstore","memConsStmt"}}, 0)
, wrapper_rel_347_MemWriteToMemConsStmtInfoInit(256, *rel_347_MemWriteToMemConsStmtInfoInit, *this, "MemWriteToMemConsStmtInfoInit", std::array<const char *,5>{{"s:Statement","s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,5>{{"memWriteStmt","memConsStmt","memAddr","relIndex","length"}}, 0)
, wrapper_rel_348_MemWriteToMemConsStmtInvalid(257, *rel_348_MemWriteToMemConsStmtInvalid, *this, "MemWriteToMemConsStmtInvalid", std::array<const char *,5>{{"s:Statement","s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,5>{{"memWriteStmt","memConsStmt","memAddr","relIndex","length"}}, 0)
, wrapper_rel_349_MemWriteToMemConsStmtInfo(258, *rel_349_MemWriteToMemConsStmtInfo, *this, "MemWriteToMemConsStmtInfo", std::array<const char *,5>{{"s:Statement","s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,5>{{"memWriteStmt","memConsStmt","memAddr","relIndex","length"}}, 0)
, wrapper_rel_350_MemWriteToMemConsStmtConflLowerLimit(259, *rel_350_MemWriteToMemConsStmtConflLowerLimit, *this, "MemWriteToMemConsStmtConflLowerLimit", std::array<const char *,4>{{"s:Statement","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"memWriteStmt","memConsStmt","memAddr","lowLimitByte"}}, 0)
, wrapper_rel_351_MemWriteToMemConsStmtLowerLimit(260, *rel_351_MemWriteToMemConsStmtLowerLimit, *this, "MemWriteToMemConsStmtLowerLimit", std::array<const char *,4>{{"s:Statement","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"memWriteStmt","memConsStmt","memAddr","lowLimitByte"}}, 0)
, wrapper_rel_352_MemWriteToMemConsStmtConflUpperLimit(261, *rel_352_MemWriteToMemConsStmtConflUpperLimit, *this, "MemWriteToMemConsStmtConflUpperLimit", std::array<const char *,4>{{"s:Statement","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"memWriteStmt","memConsStmt","memAddr","upLimitByte"}}, 0)
, wrapper_rel_353_MemWriteToMemConsStmtUpperLimit(262, *rel_353_MemWriteToMemConsStmtUpperLimit, *this, "MemWriteToMemConsStmtUpperLimit", std::array<const char *,4>{{"s:Statement","s:Statement","s:symbol","i:number"}}, std::array<const char *,4>{{"memWriteStmt","memConsStmt","memAddr","upLimitByte"}}, 0)
, wrapper_rel_354_MemWriteToMemConsStmtPartOfPrev(263, *rel_354_MemWriteToMemConsStmtPartOfPrev, *this, "MemWriteToMemConsStmtPartOfPrev", std::array<const char *,3>{{"s:Statement","s:Statement","i:number"}}, std::array<const char *,3>{{"memWriteStmt","memConsStmt","relativeIndex"}}, 0)
, wrapper_rel_355_MemWriteToMemConsStmtResolved(264, *rel_355_MemWriteToMemConsStmtResolved, *this, "MemWriteToMemConsStmtResolved", std::array<const char *,5>{{"s:Statement","s:Statement","i:number","i:number","i:number"}}, std::array<const char *,5>{{"memWriteStmt","memConsStmt","relativeIndex","lowB","highB"}}, 0)
, wrapper_rel_356_ABIEncodedArrayWriteTo(265, *rel_356_ABIEncodedArrayWriteTo, *this, "ABIEncodedArrayWriteTo", std::array<const char *,4>{{"s:Statement","s:ArrayVariable","s:Statement","i:number"}}, std::array<const char *,4>{{"memWriteStmt","abiArr","memConsStmt","index"}}, 0)
, wrapper_rel_357_MSTOREToMemConsStmtWritesShiftedVar(266, *rel_357_MSTOREToMemConsStmtWritesShiftedVar, *this, "MSTOREToMemConsStmtWritesShiftedVar", std::array<const char *,4>{{"s:Statement","s:Statement","i:number","s:Variable"}}, std::array<const char *,4>{{"mstore","memConsStmt","relativeIndex","var"}}, 0)
, wrapper_rel_358_MSTOREToMemConsStmt_WrittenVar(267, *rel_358_MSTOREToMemConsStmt_WrittenVar, *this, "MSTOREToMemConsStmt_WrittenVar", std::array<const char *,4>{{"s:Statement","s:Statement","i:number","s:Variable"}}, std::array<const char *,4>{{"mstore","memConsStmt","relativeIndex","var"}}, 0)
, wrapper_rel_359_StatementUsesMemoryWriteAtRelativeIndex(268, *rel_359_StatementUsesMemoryWriteAtRelativeIndex, *this, "StatementUsesMemoryWriteAtRelativeIndex", std::array<const char *,4>{{"s:Statement","s:symbol","s:Statement","i:number"}}, std::array<const char *,4>{{"stmt","kind","write","relIndex"}}, 0)
, wrapper_rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered(269, *rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered, *this, "StatementUsesMemoryWritesAtRelativeIndexOrdered", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,4>{{"stmt","kind","index1","index2"}}, 0)
, wrapper_rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext(270, *rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext, *this, "StatementUsesMemoryWritesAtRelativeIndexNotNext", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,4>{{"stmt","kind","index1","index2"}}, 0)
, wrapper_rel_362_StatementUsesMemoryWritesAtRelativeIndexNext(271, *rel_362_StatementUsesMemoryWritesAtRelativeIndexNext, *this, "StatementUsesMemoryWritesAtRelativeIndexNext", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","i:number"}}, std::array<const char *,4>{{"stmt","kind","index1","index2"}}, 0)
, wrapper_rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order(272, *rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order, *this, "StatementUsesMemoryWriteAtRelativeIndex_Order", std::array<const char *,5>{{"s:Statement","s:symbol","s:Statement","i:number","i:number"}}, std::array<const char *,5>{{"stmt","kind","write","relIndex","order"}}, 0)
, wrapper_rel_366_StatementUsesMemoryMemoryArgumentNew(273, *rel_366_StatementUsesMemoryMemoryArgumentNew, *this, "StatementUsesMemoryMemoryArgumentNew", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","+:MemoryArgumentNew"}}, std::array<const char *,4>{{"stmt","kind","index","arg"}}, 0)
, wrapper_rel_367_CDArg(274, *rel_367_CDArg, *this, "CDArg", std::array<const char *,1>{{"+:MemoryArgumentNew"}}, std::array<const char *,1>{{"arg"}}, 0)
, wrapper_rel_368_StatementUsesMemoryMemoryArgument(275, *rel_368_StatementUsesMemoryMemoryArgument, *this, "StatementUsesMemoryMemoryArgument", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","r:MemoryArgument"}}, std::array<const char *,4>{{"stmt","kind","index","arg"}}, 0)
, wrapper_rel_369_MemoryStatement_ActualArgNew(276, *rel_369_MemoryStatement_ActualArgNew, *this, "MemoryStatement_ActualArgNew", std::array<const char *,3>{{"s:Statement","r:MemoryArgument","i:number"}}, std::array<const char *,3>{{"stmt","actual","index"}}, 0)
, wrapper_rel_370_MSTOREToMemConsStmt_WrittenValue(277, *rel_370_MSTOREToMemConsStmt_WrittenValue, *this, "MSTOREToMemConsStmt_WrittenValue", std::array<const char *,5>{{"s:Statement","s:Statement","i:number","s:Variable","s:Value"}}, std::array<const char *,5>{{"mstore","memConsStmt","relativeIndex","storedVar","val"}}, 0)
, wrapper_rel_371_MLOADReadsReturnOfCALL(278, *rel_371_MLOADReadsReturnOfCALL, *this, "MLOADReadsReturnOfCALL", std::array<const char *,3>{{"s:Statement","s:Statement","i:number"}}, std::array<const char *,3>{{"mload","call","relateIndex"}}, 0)
, wrapper_rel_372_agg_single18(279, *rel_372_agg_single18, *this, "__agg_single18", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z1"}}, 0)
, wrapper_rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict(280, *rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict, *this, "memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict", std::array<const char *,3>{{"s:Statement","s:Statement","s:symbol"}}, std::array<const char *,3>{{"stmt1","stmt2","arg"}}, 0)
, wrapper_rel_374_CallDataLoadReadsLength(281, *rel_374_CallDataLoadReadsLength, *this, "CallDataLoadReadsLength", std::array<const char *,5>{{"s:Statement","s:Statement","s:Variable","s:Variable","s:symbol"}}, std::array<const char *,5>{{"cdl","cdl2","cdlArrayVar","lenVar","argHex"}}, 0)
, wrapper_rel_375_ArgArrayLenWrittenTo(282, *rel_375_ArgArrayLenWrittenTo, *this, "ArgArrayLenWrittenTo", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"lenVar","arrayVar"}}, 0)
, wrapper_rel_376_InitialStoreToPossibleStruct(283, *rel_376_InitialStoreToPossibleStruct, *this, "InitialStoreToPossibleStruct", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","i:number"}}, std::array<const char *,4>{{"mstore","structBase","storedVar","wordOffset"}}, 0)
, wrapper_rel_377_FreePointerBasedValuesNumDiffNoMemReuse(284, *rel_377_FreePointerBasedValuesNumDiffNoMemReuse, *this, "FreePointerBasedValuesNumDiffNoMemReuse", std::array<const char *,3>{{"s:Value","s:Value","i:number"}}, std::array<const char *,3>{{"val1","val2","numDiff"}}, 0)
, wrapper_rel_378_IsCallDataArrayVar(285, *rel_378_IsCallDataArrayVar, *this, "IsCallDataArrayVar", std::array<const char *,2>{{"s:Variable","s:symbol"}}, std::array<const char *,2>{{"var","argHex"}}, 0)
, wrapper_rel_379_VarPlusThrirtyOneAndNotThirtyOne(286, *rel_379_VarPlusThrirtyOneAndNotThirtyOne, *this, "VarPlusThrirtyOneAndNotThirtyOne", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"var","varPlus"}}, 0)
, wrapper_rel_380_VarDivByConstant(287, *rel_380_VarDivByConstant, *this, "VarDivByConstant", std::array<const char *,3>{{"s:Variable","s:Value","s:Variable"}}, std::array<const char *,3>{{"var","constant","result"}}, 0)
, wrapper_rel_381_VarTimesConstant(288, *rel_381_VarTimesConstant, *this, "VarTimesConstant", std::array<const char *,3>{{"s:Variable","s:Value","s:Variable"}}, std::array<const char *,3>{{"var","constant","result"}}, 0)
, wrapper_rel_382_VarPlusThrirtyOneDivMulSixtyFour(289, *rel_382_VarPlusThrirtyOneDivMulSixtyFour, *this, "VarPlusThrirtyOneDivMulSixtyFour", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"var","varAfter"}}, 0)
, wrapper_rel_383_CallDataCopyArgInfo(290, *rel_383_CallDataCopyArgInfo, *this, "CallDataCopyArgInfo", std::array<const char *,3>{{"s:Statement","s:Variable","s:symbol"}}, std::array<const char *,3>{{"callDataCopy","arrayVar","argHex"}}, 0)
, wrapper_rel_384_agg_single0(291, *rel_384_agg_single0, *this, "__agg_single0", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0)
, wrapper_rel_385_CALLReturnsNoData(292, *rel_385_CALLReturnsNoData, *this, "CALLReturnsNoData", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_386_agg_single1(293, *rel_386_agg_single1, *this, "__agg_single1", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z1"}}, 0)
, wrapper_rel_387_AllCALLsClassified(294, *rel_387_AllCALLsClassified, *this, "AllCALLsClassified", std::array<const char *,1>{{"i:number"}}, std::array<const char *,1>{{"all"}}, 0)
, wrapper_rel_388_CALLDATACOPY_AllCalldata(295, *rel_388_CALLDATACOPY_AllCalldata, *this, "CALLDATACOPY_AllCalldata", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"calldatacopy"}}, 0)
, wrapper_rel_389_CALLDATALOADOfConstant(296, *rel_389_CALLDATALOADOfConstant, *this, "CALLDATALOADOfConstant", std::array<const char *,3>{{"s:Statement","s:symbol","i:number"}}, std::array<const char *,3>{{"cdl","constHex","constNum"}}, 0)
, wrapper_rel_390_PublicFunctionArg(297, *rel_390_PublicFunctionArg, *this, "PublicFunctionArg", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"pubFun","arg","index"}}, 0)
, wrapper_rel_391_Analytics_PublicFunctionArg(298, *rel_391_Analytics_PublicFunctionArg, *this, "Analytics_PublicFunctionArg", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"arg"}}, 0)
, wrapper_rel_392_Analytics_PublicFunctionArrayArg(299, *rel_392_Analytics_PublicFunctionArrayArg, *this, "Analytics_PublicFunctionArrayArg", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"arg"}}, 0)
, wrapper_rel_393_CALLDATALOADOfStaticAddr(300, *rel_393_CALLDATALOADOfStaticAddr, *this, "CALLDATALOADOfStaticAddr", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_394_agg_single15(301, *rel_394_agg_single15, *this, "__agg_single15", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z1"}}, 0)
, wrapper_rel_395_CALLToPrecompiledFunction(302, *rel_395_CALLToPrecompiledFunction, *this, "CALLToPrecompiledFunction", std::array<const char *,2>{{"s:Statement","i:number"}}, std::array<const char *,2>{{"call","precIndex"}}, 0)
, wrapper_rel_396_StoreFreeMemPtrToMemZero(303, *rel_396_StoreFreeMemPtrToMemZero, *this, "StoreFreeMemPtrToMemZero", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"insn"}}, 0)
, wrapper_rel_397_EcrecoverCompilerBug(304, *rel_397_EcrecoverCompilerBug, *this, "EcrecoverCompilerBug", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"insn"}}, 0)
, wrapper_rel_398_BinArith(305, *rel_398_BinArith, *this, "BinArith", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"opcode"}}, 0)
, wrapper_rel_399_TernArith(306, *rel_399_TernArith, *this, "TernArith", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"opcode"}}, 0)
, wrapper_rel_400_UnaryArith(307, *rel_400_UnaryArith, *this, "UnaryArith", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"opcode"}}, 0)
, wrapper_rel_401_FlowOp(308, *rel_401_FlowOp, *this, "FlowOp", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"op"}}, 0)
, wrapper_rel_402_standardflowanalysis_Flows(309, *rel_402_standardflowanalysis_Flows, *this, "standardflowanalysis.Flows", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"from","to"}}, 0)
, wrapper_rel_405_standardflowanalysis_FunctionFlowSummary(310, *rel_405_standardflowanalysis_FunctionFlowSummary, *this, "standardflowanalysis.FunctionFlowSummary", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","from","n"}}, 0)
, wrapper_rel_408_standardflowanalysis_InterFunctionActualArgFlow(311, *rel_408_standardflowanalysis_InterFunctionActualArgFlow, *this, "standardflowanalysis.InterFunctionActualArgFlow", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"actual","formal"}}, 0)
, wrapper_rel_409_standardflowanalysis_GlobalFlows(312, *rel_409_standardflowanalysis_GlobalFlows, *this, "standardflowanalysis.GlobalFlows", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"from","to"}}, 0)
, wrapper_rel_412_StructAllocation(313, *rel_412_StructAllocation, *this, "StructAllocation", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"mstore","structBase","wordWidth"}}, 0)
, wrapper_rel_413_Struct_WordWidth(314, *rel_413_Struct_WordWidth, *this, "Struct_WordWidth", std::array<const char *,2>{{"s:Variable","i:number"}}, std::array<const char *,2>{{"structBase","wordWidth"}}, 0)
, wrapper_rel_416_StructArg(315, *rel_416_StructArg, *this, "StructArg", std::array<const char *,5>{{"s:Block","s:Function","i:number","s:Variable","s:Variable"}}, std::array<const char *,5>{{"caller","function","pos","actual","formal"}}, 0)
, wrapper_rel_419_StructIndex(316, *rel_419_StructIndex, *this, "StructIndex", std::array<const char *,3>{{"s:Variable","s:Variable","i:number"}}, std::array<const char *,3>{{"structBase","indexVar","wordOffset"}}, 0)
, wrapper_rel_420_StructLoad(317, *rel_420_StructLoad, *this, "StructLoad", std::array<const char *,4>{{"s:Statement","s:Variable","i:number","s:Variable"}}, std::array<const char *,4>{{"mload","structBase","wordOffset","loadedVar"}}, 0)
, wrapper_rel_421_StructLoad(318, *rel_421_StructLoad, *this, "_StructLoad", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_422_agg_single22(319, *rel_422_agg_single22, *this, "__agg_single22", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z5"}}, 0)
, wrapper_rel_423_StructStore(320, *rel_423_StructStore, *this, "StructStore", std::array<const char *,4>{{"s:Statement","s:Variable","i:number","s:Variable"}}, std::array<const char *,4>{{"mstore","structBase","wordOffset","loadedVar"}}, 0)
, wrapper_rel_424_IsRegularArrayVar(321, *rel_424_IsRegularArrayVar, *this, "IsRegularArrayVar", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"var"}}, 0)
, wrapper_rel_427_IsRawDataArrayVar(322, *rel_427_IsRawDataArrayVar, *this, "IsRawDataArrayVar", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"var"}}, 0)
, wrapper_rel_430_Array_ElementLength(323, *rel_430_Array_ElementLength, *this, "Array_ElementLength", std::array<const char *,2>{{"s:Variable","s:symbol"}}, std::array<const char *,2>{{"array","elementSize"}}, 0)
, wrapper_rel_433_ArrayVarLengthVar(324, *rel_433_ArrayVarLengthVar, *this, "ArrayVarLengthVar", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"array","arrayLen"}}, 0)
, wrapper_rel_436_ArrayDataStartVar(325, *rel_436_ArrayDataStartVar, *this, "ArrayDataStartVar", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"array","arrayDataStart"}}, 0)
, wrapper_rel_439_PossibleArrayLoose(326, *rel_439_PossibleArrayLoose, *this, "PossibleArrayLoose", std::array<const char *,1>{{"s:Variable"}}, std::array<const char *,1>{{"array"}}, 0)
, wrapper_rel_442_ArrayActualArg(327, *rel_442_ArrayActualArg, *this, "ArrayActualArg", std::array<const char *,4>{{"s:Block","s:Function","i:number","s:symbol"}}, std::array<const char *,4>{{"caller","fun","index","kind"}}, 0)
, wrapper_rel_445_ArrayFormalRet(328, *rel_445_ArrayFormalRet, *this, "ArrayFormalRet", std::array<const char *,3>{{"s:Function","i:number","s:symbol"}}, std::array<const char *,3>{{"fun","index","kind"}}, 0)
, wrapper_rel_448_RegularArrayVarsInSameClass(329, *rel_448_RegularArrayVarsInSameClass, *this, "RegularArrayVarsInSameClass", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"arrVar1","arrVar2"}}, 0)
, wrapper_rel_451_StructContainsArray(330, *rel_451_StructContainsArray, *this, "StructContainsArray", std::array<const char *,3>{{"s:Variable","i:number","i:number"}}, std::array<const char *,3>{{"structBase","wordOffset","elementSize"}}, 0)
, wrapper_rel_454_ABIEncodedArrayIncludesArray(331, *rel_454_ABIEncodedArrayIncludesArray, *this, "ABIEncodedArrayIncludesArray", std::array<const char *,4>{{"s:ArrayVariable","s:Statement","s:Variable","i:number"}}, std::array<const char *,4>{{"abiArr","memConsStmt","innerArr","index"}}, 0)
, wrapper_rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex(332, *rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex, *this, "ABIEncodedArrayIncludesArrayAtConcreteIndex", std::array<const char *,5>{{"s:ArrayVariable","s:Statement","s:Variable","i:number","i:number"}}, std::array<const char *,5>{{"abiArr","memConsStmt","innerArr","index","arrayStartIndex"}}, 0)
, wrapper_rel_460_ArrayAllocationInternal(333, *rel_460_ArrayAllocationInternal, *this, "ArrayAllocationInternal", std::array<const char *,4>{{"s:Statement","s:Variable","s:Value","s:Variable"}}, std::array<const char *,4>{{"mstore","array","elemSize","arrayLength"}}, 0)
, wrapper_rel_461_ArrayHasConstantLength(334, *rel_461_ArrayHasConstantLength, *this, "ArrayHasConstantLength", std::array<const char *,2>{{"s:Variable","i:number"}}, std::array<const char *,2>{{"arrayVar","length"}}, 0)
, wrapper_rel_462_ArrayIndexAccess(335, *rel_462_ArrayIndexAccess, *this, "ArrayIndexAccess", std::array<const char *,3>{{"s:Variable","s:Variable","s:Variable"}}, std::array<const char *,3>{{"array","indexVar","index"}}, 0)
, wrapper_rel_463_MemArrayPut(336, *rel_463_MemArrayPut, *this, "MemArrayPut", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","array","index","from"}}, 0)
, wrapper_rel_464_MemArrayGet(337, *rel_464_MemArrayGet, *this, "MemArrayGet", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","array","index","to"}}, 0)
, wrapper_rel_465_CallDataArrayGet(338, *rel_465_CallDataArrayGet, *this, "CallDataArrayGet", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","array","index","to"}}, 0)
, wrapper_rel_466_CALLDATALOADArrayRelated(339, *rel_466_CALLDATALOADArrayRelated, *this, "CALLDATALOADArrayRelated", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_467_agg_single14(340, *rel_467_agg_single14, *this, "__agg_single14", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0)
, wrapper_rel_468_Verbatim_CDLAllVSStaticVSArr(341, *rel_468_Verbatim_CDLAllVSStaticVSArr, *this, "Verbatim_CDLAllVSStaticVSArr", std::array<const char *,3>{{"i:number","i:number","i:number"}}, std::array<const char *,3>{{"allnum","staticAddr","arrGet"}}, 0)
, wrapper_rel_469_arrayClassRep_LoadInBlock(342, *rel_469_arrayClassRep_LoadInBlock, *this, "arrayClassRep.LoadInBlock", std::array<const char *,3>{{"s:Variable","s:Statement","s:Block"}}, std::array<const char *,3>{{"var","load","block"}}, 0)
, wrapper_rel_470_arrayClassRep_DominatesInClass(343, *rel_470_arrayClassRep_DominatesInClass, *this, "arrayClassRep.DominatesInClass", std::array<const char *,4>{{"s:Variable","s:Variable","s:Statement","s:Statement"}}, std::array<const char *,4>{{"var1","var2","load1","load2"}}, 0)
, wrapper_rel_471_arrayClassRep_DominatesAllInClass(344, *rel_471_arrayClassRep_DominatesAllInClass, *this, "arrayClassRep.DominatesAllInClass", std::array<const char *,2>{{"s:Variable","s:Statement"}}, std::array<const char *,2>{{"var","load"}}, 0)
, wrapper_rel_472_arrayClassRep_Var_ClassRep(345, *rel_472_arrayClassRep_Var_ClassRep, *this, "arrayClassRep.Var_ClassRep", std::array<const char *,2>{{"s:Variable","s:symbol"}}, std::array<const char *,2>{{"var","classRep"}}, 0)
, wrapper_rel_473_RegularArrayVar_ClassRep(346, *rel_473_RegularArrayVar_ClassRep, *this, "RegularArrayVar_ClassRep", std::array<const char *,2>{{"s:Variable","s:ArrayVariable"}}, std::array<const char *,2>{{"arrVar","classRep"}}, 0)
, wrapper_rel_474_ArrayStoreAtIndex(347, *rel_474_ArrayStoreAtIndex, *this, "ArrayStoreAtIndex", std::array<const char *,4>{{"s:Statement","s:ArrayVariable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","arrId","index","from"}}, 0)
, wrapper_rel_475_ArrayStoreI(348, *rel_475_ArrayStoreI, *this, "ArrayStoreI", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_476_agg_single8(349, *rel_476_agg_single8, *this, "__agg_single8", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z1"}}, 0)
, wrapper_rel_477_ArrayLoadAtIndex(350, *rel_477_ArrayLoadAtIndex, *this, "ArrayLoadAtIndex", std::array<const char *,4>{{"s:Statement","s:ArrayVariable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","arrId","index","to"}}, 0)
, wrapper_rel_478_ArrayLoadI(351, *rel_478_ArrayLoadI, *this, "ArrayLoadI", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_479_agg_single20(352, *rel_479_agg_single20, *this, "__agg_single20", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z3"}}, 0)
, wrapper_rel_480_assertVarIsArray_FromHasNoEdges(353, *rel_480_assertVarIsArray_FromHasNoEdges, *this, "assertVarIsArray.FromHasNoEdges", std::array<const char *,1>{{"s:symbol"}}, std::array<const char *,1>{{"from"}}, 0)
, wrapper_rel_481_assertVarIsArray_FromHasTwoEdges(354, *rel_481_assertVarIsArray_FromHasTwoEdges, *this, "assertVarIsArray.FromHasTwoEdges", std::array<const char *,1>{{"s:symbol"}}, std::array<const char *,1>{{"from"}}, 0)
, wrapper_rel_482_ArrayWriteToRelativeIndex(355, *rel_482_ArrayWriteToRelativeIndex, *this, "ArrayWriteToRelativeIndex", std::array<const char *,3>{{"s:Variable","s:Statement","i:number"}}, std::array<const char *,3>{{"arrayVar","mstore","relativeIndex"}}, 0)
, wrapper_rel_483_RawDataArrayVarsInSameClass(356, *rel_483_RawDataArrayVarsInSameClass, *this, "RawDataArrayVarsInSameClass", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"arrVar1","arrVar2"}}, 0)
, wrapper_rel_484_rawDataArrayClassRep_LoadInBlock(357, *rel_484_rawDataArrayClassRep_LoadInBlock, *this, "rawDataArrayClassRep.LoadInBlock", std::array<const char *,3>{{"s:Variable","s:Statement","s:Block"}}, std::array<const char *,3>{{"var","load","block"}}, 0)
, wrapper_rel_485_rawDataArrayClassRep_DominatesInClass(358, *rel_485_rawDataArrayClassRep_DominatesInClass, *this, "rawDataArrayClassRep.DominatesInClass", std::array<const char *,4>{{"s:Variable","s:Variable","s:Statement","s:Statement"}}, std::array<const char *,4>{{"var1","var2","load1","load2"}}, 0)
, wrapper_rel_486_rawDataArrayClassRep_DominatesAllInClass(359, *rel_486_rawDataArrayClassRep_DominatesAllInClass, *this, "rawDataArrayClassRep.DominatesAllInClass", std::array<const char *,2>{{"s:Variable","s:Statement"}}, std::array<const char *,2>{{"var","load"}}, 0)
, wrapper_rel_487_rawDataArrayClassRep_Var_ClassRep(360, *rel_487_rawDataArrayClassRep_Var_ClassRep, *this, "rawDataArrayClassRep.Var_ClassRep", std::array<const char *,2>{{"s:Variable","s:symbol"}}, std::array<const char *,2>{{"var","classRep"}}, 0)
, wrapper_rel_488_RawDataArrayVar_ClassRep(361, *rel_488_RawDataArrayVar_ClassRep, *this, "RawDataArrayVar_ClassRep", std::array<const char *,2>{{"s:Variable","s:ArrayVariable"}}, std::array<const char *,2>{{"arrVar","classRep"}}, 0)
, wrapper_rel_489_VarIsArray(362, *rel_489_VarIsArray, *this, "VarIsArray", std::array<const char *,2>{{"s:Variable","s:ArrayVariable"}}, std::array<const char *,2>{{"var","arrId"}}, 0)
, wrapper_rel_490_MSTOREToMLOAD(363, *rel_490_MSTOREToMLOAD, *this, "MSTOREToMLOAD", std::array<const char *,3>{{"s:Statement","s:Statement","s:Variable"}}, std::array<const char *,3>{{"mstore","mload","memArg"}}, 0)
, wrapper_rel_491_ArbitraryCall(364, *rel_491_ArbitraryCall, *this, "ArbitraryCall", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_492_AllocationAny(365, *rel_492_AllocationAny, *this, "AllocationAny", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_493_agg_single10(366, *rel_493_agg_single10, *this, "__agg_single10", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z3"}}, 0)
, wrapper_rel_494_StatementUsesMemory_UsesArray(367, *rel_494_StatementUsesMemory_UsesArray, *this, "StatementUsesMemory_UsesArray", std::array<const char *,3>{{"s:Statement","s:symbol","s:Variable"}}, std::array<const char *,3>{{"stmt","kind","array"}}, 0)
, wrapper_rel_495_MLOADReadsArrayLength(368, *rel_495_MLOADReadsArrayLength, *this, "MLOADReadsArrayLength", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_496_agg_single19(369, *rel_496_agg_single19, *this, "__agg_single19", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z2"}}, 0)
, wrapper_rel_497_ArrayDataActualArg(370, *rel_497_ArrayDataActualArg, *this, "ArrayDataActualArg", std::array<const char *,4>{{"s:Block","s:Function","i:number","s:symbol"}}, std::array<const char *,4>{{"caller","fun","index","kind"}}, 0)
, wrapper_rel_498_ExternalCallTakesWholeCallData(371, *rel_498_ExternalCallTakesWholeCallData, *this, "ExternalCallTakesWholeCallData", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_499_StructStore(372, *rel_499_StructStore, *this, "_StructStore", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_500_agg_single12(373, *rel_500_agg_single12, *this, "__agg_single12", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z5"}}, 0)
, wrapper_rel_501_localFlowAnalysis_TransferOpcode(374, *rel_501_localFlowAnalysis_TransferOpcode, *this, "localFlowAnalysis.TransferOpcode", std::array<const char *,1>{{"s:Opcode"}}, std::array<const char *,1>{{"op"}}, 0)
, wrapper_rel_502_localFlowAnalysis_Flows(375, *rel_502_localFlowAnalysis_Flows, *this, "localFlowAnalysis.Flows", std::array<const char *,2>{{"s:Variable","s:Variable"}}, std::array<const char *,2>{{"x","y"}}, 0)
, wrapper_rel_505_localFlowAnalysis_FunctionFlowSummary(376, *rel_505_localFlowAnalysis_FunctionFlowSummary, *this, "localFlowAnalysis.FunctionFlowSummary", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","from","n"}}, 0)
, wrapper_rel_508_ArrayStore(377, *rel_508_ArrayStore, *this, "ArrayStore", std::array<const char *,3>{{"s:Statement","s:ArrayVariable","s:Variable"}}, std::array<const char *,3>{{"stmt","arrId","from"}}, 0)
, wrapper_rel_509_WriteToArrayUsedByABIEncodedArray(378, *rel_509_WriteToArrayUsedByABIEncodedArray, *this, "WriteToArrayUsedByABIEncodedArray", std::array<const char *,2>{{"s:Statement","s:ArrayVariable"}}, std::array<const char *,2>{{"mstore","abiArr"}}, 0)
, wrapper_rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen(379, *rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen, *this, "ABIEncodedArrayWriteToIsNotArrayOrLen", std::array<const char *,4>{{"s:Statement","s:ArrayVariable","s:Statement","i:number"}}, std::array<const char *,4>{{"memWriteStmt","abiArr","memConsStmt","index"}}, 0)
, wrapper_rel_511_ABIEncodedArrayHasVarAtIndex(380, *rel_511_ABIEncodedArrayHasVarAtIndex, *this, "ABIEncodedArrayHasVarAtIndex", std::array<const char *,4>{{"s:ArrayVariable","s:Statement","s:Variable","i:number"}}, std::array<const char *,4>{{"abiArr","memConsStmt","varWritten","index"}}, 0)
, wrapper_rel_512_StatementUsesMemory_ActualMemoryArg(381, *rel_512_StatementUsesMemory_ActualMemoryArg, *this, "StatementUsesMemory_ActualMemoryArg", std::array<const char *,4>{{"s:Statement","s:symbol","i:number","s:Variable"}}, std::array<const char *,4>{{"stmt","kind","index","actual"}}, 0)
, wrapper_rel_513_CALLWithPossibleSigHashFromSHA3(382, *rel_513_CALLWithPossibleSigHashFromSHA3, *this, "CALLWithPossibleSigHashFromSHA3", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"call","sha3"}}, 0)
, wrapper_rel_514_StatementUsesMemory_ActualArg(383, *rel_514_StatementUsesMemory_ActualArg, *this, "StatementUsesMemory_ActualArg", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","actual","index"}}, 0)
, wrapper_rel_515_MemoryStatement_ActualArg(384, *rel_515_MemoryStatement_ActualArg, *this, "MemoryStatement_ActualArg", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","actual","index"}}, 0)
, wrapper_rel_516_SHA3_1ARG(385, *rel_516_SHA3_1ARG, *this, "SHA3_1ARG", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"stmt","arg1","def"}}, 0)
, wrapper_rel_517_SHA3_2ARG(386, *rel_517_SHA3_2ARG, *this, "SHA3_2ARG", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"stmt","arg1","arg2","def"}}, 0)
, wrapper_rel_518_SHA3_3ARG(387, *rel_518_SHA3_3ARG, *this, "SHA3_3ARG", std::array<const char *,5>{{"s:Statement","s:Variable","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,5>{{"stmt","arg1","arg2","arg3","def"}}, 0)
, wrapper_rel_519_SHA3_KnownContent(388, *rel_519_SHA3_KnownContent, *this, "SHA3_KnownContent", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"stmt","hexContent"}}, 0)
, wrapper_rel_520_CallToSignatureFromSHA3(389, *rel_520_CallToSignatureFromSHA3, *this, "CallToSignatureFromSHA3", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"call","sigText"}}, 0)
, wrapper_rel_521_StatementConsumesMemoryNoArgs(390, *rel_521_StatementConsumesMemoryNoArgs, *this, "StatementConsumesMemoryNoArgs", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_522_ABIWriteMSTORE(391, *rel_522_ABIWriteMSTORE, *this, "ABIWriteMSTORE", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mstore"}}, 0)
, wrapper_rel_523_ArgWriteAny(392, *rel_523_ArgWriteAny, *this, "ArgWriteAny", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mstore"}}, 0)
, wrapper_rel_524_ModeledMSTORE(393, *rel_524_ModeledMSTORE, *this, "ModeledMSTORE", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_525_NonModeledMSTORE(394, *rel_525_NonModeledMSTORE, *this, "NonModeledMSTORE", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_526_Analytics_NonModeledMSTORE(395, *rel_526_Analytics_NonModeledMSTORE, *this, "Analytics_NonModeledMSTORE", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mstore"}}, 0)
, wrapper_rel_527_ArrayStoreSimple(396, *rel_527_ArrayStoreSimple, *this, "ArrayStoreSimple", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_528_agg_single9(397, *rel_528_agg_single9, *this, "__agg_single9", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z2"}}, 0)
, wrapper_rel_529_agg_single11(398, *rel_529_agg_single11, *this, "__agg_single11", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z4"}}, 0)
, wrapper_rel_530_Verbatim_AllVsModeledMSTOREs(399, *rel_530_Verbatim_AllVsModeledMSTOREs, *this, "Verbatim_AllVsModeledMSTOREs", std::array<const char *,7>{{"i:number","i:number","i:number","i:number","i:number","i:number","i:number"}}, std::array<const char *,7>{{"numOfMemStmts","freeptr","storei","store","allocate","arg","structstore"}}, 0)
, wrapper_rel_531_Analytics_MemConsStmtUsesFromDistinctPaths(400, *rel_531_Analytics_MemConsStmtUsesFromDistinctPaths, *this, "Analytics_MemConsStmtUsesFromDistinctPaths", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"memConsStmt"}}, 0)
, wrapper_rel_532_ArrayLoad(401, *rel_532_ArrayLoad, *this, "ArrayLoad", std::array<const char *,3>{{"s:Statement","s:ArrayVariable","s:Variable"}}, std::array<const char *,3>{{"stmt","arrId","to"}}, 0)
, wrapper_rel_533_ModeledMLOAD(402, *rel_533_ModeledMLOAD, *this, "ModeledMLOAD", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_534_NonModeledMLOAD(403, *rel_534_NonModeledMLOAD, *this, "NonModeledMLOAD", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_535_Analytics_NonModeledMLOAD(404, *rel_535_Analytics_NonModeledMLOAD, *this, "Analytics_NonModeledMLOAD", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"mload"}}, 0)
, wrapper_rel_536_ArrayLoadSimple(405, *rel_536_ArrayLoadSimple, *this, "ArrayLoadSimple", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_537_agg_single21(406, *rel_537_agg_single21, *this, "__agg_single21", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z4"}}, 0)
, wrapper_rel_538_Verbatim_AllVsModeledMLOADs(407, *rel_538_Verbatim_AllVsModeledMLOADs, *this, "Verbatim_AllVsModeledMLOADs", std::array<const char *,7>{{"i:number","i:number","i:number","i:number","i:number","i:number","i:number"}}, std::array<const char *,7>{{"mloads","freeptr","retRead","arrLen","arrloadi","arrload","structload"}}, 0)
, wrapper_rel_539_ConstantPossibleSigHash(408, *rel_539_ConstantPossibleSigHash, *this, "ConstantPossibleSigHash", std::array<const char *,3>{{"s:Value","s:Value","s:symbol"}}, std::array<const char *,3>{{"constValSigHash","normalizedSigHash","sigText"}}, 0)
, wrapper_rel_540_CallToSignature(409, *rel_540_CallToSignature, *this, "CallToSignature", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"call","sigText"}}, 0)
, wrapper_rel_541_Analytics_CallWithSig(410, *rel_541_Analytics_CallWithSig, *this, "Analytics_CallWithSig", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_542_ERC20ApproveCall(411, *rel_542_ERC20ApproveCall, *this, "ERC20ApproveCall", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"call","spender","value"}}, 0)
, wrapper_rel_543_Analytics_ERC20ApproveCall(412, *rel_543_Analytics_ERC20ApproveCall, *this, "Analytics_ERC20ApproveCall", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_544_ERC20TransferCall(413, *rel_544_ERC20TransferCall, *this, "ERC20TransferCall", std::array<const char *,3>{{"s:Statement","s:Variable","s:Variable"}}, std::array<const char *,3>{{"call","to","value"}}, 0)
, wrapper_rel_545_Analytics_ERC20TransferCall(414, *rel_545_Analytics_ERC20TransferCall, *this, "Analytics_ERC20TransferCall", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_546_ERC20TransferFromCall(415, *rel_546_ERC20TransferFromCall, *this, "ERC20TransferFromCall", std::array<const char *,4>{{"s:Statement","s:Variable","s:Variable","s:Variable"}}, std::array<const char *,4>{{"call","from","to","value"}}, 0)
, wrapper_rel_547_Analytics_ERC20TransferFromCall(416, *rel_547_Analytics_ERC20TransferFromCall, *this, "Analytics_ERC20TransferFromCall", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"call"}}, 0)
, wrapper_rel_548_Block_CodeChunkAccessed(417, *rel_548_Block_CodeChunkAccessed, *this, "Block_CodeChunkAccessed", std::array<const char *,2>{{"s:Block","i:Chunk"}}, std::array<const char *,2>{{"block","chunk_id"}}, 0)
, wrapper_rel_549_Block_Gas(418, *rel_549_Block_Gas, *this, "Block_Gas", std::array<const char *,2>{{"s:Block","i:number"}}, std::array<const char *,2>{{"block","gas"}}, 0)
, wrapper_rel_550_FallthroughEdge(419, *rel_550_FallthroughEdge, *this, "FallthroughEdge", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"block","nextBlock"}}, 0)
, wrapper_rel_551_IsFunction(420, *rel_551_IsFunction, *this, "IsFunction", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"func"}}, 0)
, wrapper_rel_552_inliner_FunctionReturnRestriction(421, *rel_552_inliner_FunctionReturnRestriction, *this, "inliner.FunctionReturnRestriction", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_553_PublicFunctionSelector(422, *rel_553_PublicFunctionSelector, *this, "PublicFunctionSelector", std::array<const char *,2>{{"s:Function","s:symbol"}}, std::array<const char *,2>{{"func","selector"}}, 0)
, wrapper_rel_554_IsPublicFunction(423, *rel_554_IsPublicFunction, *this, "IsPublicFunction", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"func"}}, 0)
, wrapper_rel_555_inliner_InlineCandidate(424, *rel_555_inliner_InlineCandidate, *this, "inliner.InlineCandidate", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_556_inliner_SafelyInlinableFunction(425, *rel_556_inliner_SafelyInlinableFunction, *this, "inliner.SafelyInlinableFunction", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_557_inliner_CGEToInlineCandidate(426, *rel_557_inliner_CGEToInlineCandidate, *this, "inliner.CGEToInlineCandidate", std::array<const char *,2>{{"s:Function","s:Function"}}, std::array<const char *,2>{{"caller","callee"}}, 0)
, wrapper_rel_558_inliner_FunctionToInline(427, *rel_558_inliner_FunctionToInline, *this, "inliner.FunctionToInline", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_559_NeedsMoreInlining(428, *rel_559_NeedsMoreInlining, *this, "NeedsMoreInlining", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"fun"}}, 0)
, wrapper_rel_560_inliner_BlockToClone(429, *rel_560_inliner_BlockToClone, *this, "inliner.BlockToClone", std::array<const char *,5>{{"s:Block","s:Function","s:Block","s:Function","s:Block"}}, std::array<const char *,5>{{"block","fromFun","callerBlock","callerFun","newBlock"}}, 0)
, wrapper_rel_561_inliner_InBlock_OutBlock(430, *rel_561_inliner_InBlock_OutBlock, *this, "inliner.InBlock_OutBlock", std::array<const char *,3>{{"s:Block","s:Block","s:Block"}}, std::array<const char *,3>{{"inBlock","callBlock","outBlock"}}, 0)
, wrapper_rel_562_inliner_Out_Block_CodeChunkAccessed(431, *rel_562_inliner_Out_Block_CodeChunkAccessed, *this, "inliner.Out_Block_CodeChunkAccessed", std::array<const char *,2>{{"s:Block","i:Chunk"}}, std::array<const char *,2>{{"block","chunk"}}, 0)
, wrapper_rel_563_inliner_Out_Block_Gas(432, *rel_563_inliner_Out_Block_Gas, *this, "inliner.Out_Block_Gas", std::array<const char *,2>{{"s:Block","i:number"}}, std::array<const char *,2>{{"block","gas"}}, 0)
, wrapper_rel_564_inliner_Out_CallGraphEdge(433, *rel_564_inliner_Out_CallGraphEdge, *this, "inliner.Out_CallGraphEdge", std::array<const char *,2>{{"s:Block","s:Function"}}, std::array<const char *,2>{{"block","function"}}, 0)
, wrapper_rel_565_inliner_Out_FallthroughEdge(434, *rel_565_inliner_Out_FallthroughEdge, *this, "inliner.Out_FallthroughEdge", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"block","nextBlock"}}, 0)
, wrapper_rel_566_inliner_Out_FunctionCallReturn(435, *rel_566_inliner_Out_FunctionCallReturn, *this, "inliner.Out_FunctionCallReturn", std::array<const char *,3>{{"s:Block","s:Function","s:Block"}}, std::array<const char *,3>{{"block","function","return"}}, 0)
, wrapper_rel_567_inliner_Out_LocalBlockEdge(436, *rel_567_inliner_Out_LocalBlockEdge, *this, "inliner.Out_LocalBlockEdge", std::array<const char *,2>{{"s:Block","s:Block"}}, std::array<const char *,2>{{"block","nextBlock"}}, 0)
, wrapper_rel_568_inliner_StatementToClone(437, *rel_568_inliner_StatementToClone, *this, "inliner.StatementToClone", std::array<const char *,5>{{"s:Statement","s:Function","s:Block","s:Function","s:Statement"}}, std::array<const char *,5>{{"stmt","fromFun","callerBlock","callerFun","newStmt"}}, 0)
, wrapper_rel_569_inliner_InStatement_OutStatement(438, *rel_569_inliner_InStatement_OutStatement, *this, "inliner.InStatement_OutStatement", std::array<const char *,3>{{"s:Statement","s:Block","s:Statement"}}, std::array<const char *,3>{{"inStmt","callBlock","outStmt"}}, 0)
, wrapper_rel_570_inliner_Out_IsStatement(439, *rel_570_inliner_Out_IsStatement, *this, "inliner.Out_IsStatement", std::array<const char *,1>{{"s:Statement"}}, std::array<const char *,1>{{"stmt"}}, 0)
, wrapper_rel_571_inliner_Out_Statement_Block(440, *rel_571_inliner_Out_Statement_Block, *this, "inliner.Out_Statement_Block", std::array<const char *,2>{{"s:Statement","s:Block"}}, std::array<const char *,2>{{"stmt","block"}}, 0)
, wrapper_rel_572_inliner_VariableToClone(441, *rel_572_inliner_VariableToClone, *this, "inliner.VariableToClone", std::array<const char *,5>{{"s:Variable","s:Function","s:Block","s:Function","s:Variable"}}, std::array<const char *,5>{{"var","fromFun","callerBlock","callerFun","newVar"}}, 0)
, wrapper_rel_573_inliner_Out_FunctionEntry(442, *rel_573_inliner_Out_FunctionEntry, *this, "inliner.Out_FunctionEntry", std::array<const char *,1>{{"s:Block"}}, std::array<const char *,1>{{"block"}}, 0)
, wrapper_rel_574_inliner_Out_InFunction(443, *rel_574_inliner_Out_InFunction, *this, "inliner.Out_InFunction", std::array<const char *,2>{{"s:Block","s:Function"}}, std::array<const char *,2>{{"block","function"}}, 0)
, wrapper_rel_575_inliner_CallToClonedFunction(444, *rel_575_inliner_CallToClonedFunction, *this, "inliner.CallToClonedFunction", std::array<const char *,3>{{"s:Block","s:Statement","s:Function"}}, std::array<const char *,3>{{"cloneBlock","callStmt","fun"}}, 0)
, wrapper_rel_576_inliner_ClonedCallArgs(445, *rel_576_inliner_ClonedCallArgs, *this, "inliner.ClonedCallArgs", std::array<const char *,5>{{"s:Block","s:Statement","s:Function","s:Variable","s:Variable"}}, std::array<const char *,5>{{"cloneBlock","callStmt","fun","actualArg","formalArg"}}, 0)
, wrapper_rel_577_inliner_FunctionToInline_RetStmt(446, *rel_577_inliner_FunctionToInline_RetStmt, *this, "inliner.FunctionToInline_RetStmt", std::array<const char *,2>{{"s:Function","s:Statement"}}, std::array<const char *,2>{{"fun","retStmt"}}, 0)
, wrapper_rel_578_inliner_ClonedCallRets(447, *rel_578_inliner_ClonedCallRets, *this, "inliner.ClonedCallRets", std::array<const char *,6>{{"s:Block","s:Statement","s:Function","s:Statement","s:Variable","s:Variable"}}, std::array<const char *,6>{{"cloneBlock","callStmt","fun","retStmt","actualRet","formalRet"}}, 0)
, wrapper_rel_579_inliner_InVar_OutVar(448, *rel_579_inliner_InVar_OutVar, *this, "inliner.InVar_OutVar", std::array<const char *,3>{{"s:Variable","s:Block","s:Variable"}}, std::array<const char *,3>{{"inVar","callBlock","outVar"}}, 0)
, wrapper_rel_582_inliner_Out_ActualReturnArgs(449, *rel_582_inliner_Out_ActualReturnArgs, *this, "inliner.Out_ActualReturnArgs", std::array<const char *,3>{{"s:Block","s:Variable","i:number"}}, std::array<const char *,3>{{"caller","a","pos"}}, 0)
, wrapper_rel_583_inliner_Out_Statement_Uses(450, *rel_583_inliner_Out_Statement_Uses, *this, "inliner.Out_Statement_Uses", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","i"}}, 0)
, wrapper_rel_584_inliner_Out_Variable_Value(451, *rel_584_inliner_Out_Variable_Value, *this, "inliner.Out_Variable_Value", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_585_inliner_Out_Statement_Defines(452, *rel_585_inliner_Out_Statement_Defines, *this, "inliner.Out_Statement_Defines", std::array<const char *,3>{{"s:Statement","s:Variable","i:number"}}, std::array<const char *,3>{{"stmt","var","n"}}, 0)
, wrapper_rel_586_inliner_Out_Statement_Next(453, *rel_586_inliner_Out_Statement_Next, *this, "inliner.Out_Statement_Next", std::array<const char *,2>{{"s:Statement","s:Statement"}}, std::array<const char *,2>{{"stmt","next"}}, 0)
, wrapper_rel_587_inliner_Out_Statement_Opcode(454, *rel_587_inliner_Out_Statement_Opcode, *this, "inliner.Out_Statement_Opcode", std::array<const char *,2>{{"s:Statement","s:Opcode"}}, std::array<const char *,2>{{"stmt","opcode"}}, 0)
, wrapper_rel_588_inliner_Out_FormalArgs(455, *rel_588_inliner_Out_FormalArgs, *this, "inliner.Out_FormalArgs", std::array<const char *,3>{{"s:Function","s:Variable","i:number"}}, std::array<const char *,3>{{"fn","a","pos"}}, 0)
, wrapper_rel_589_inliner_Out_IsFunction(456, *rel_589_inliner_Out_IsFunction, *this, "inliner.Out_IsFunction", std::array<const char *,1>{{"s:Function"}}, std::array<const char *,1>{{"func"}}, 0)
, wrapper_rel_590_OriginalStatement_Block(457, *rel_590_OriginalStatement_Block, *this, "OriginalStatement_Block", std::array<const char *,2>{{"s:OriginalStatement","s:Block"}}, std::array<const char *,2>{{"stmt","block"}}, 0)
, wrapper_rel_591_inliner_Out_OriginalStatement_Block(458, *rel_591_inliner_Out_OriginalStatement_Block, *this, "inliner.Out_OriginalStatement_Block", std::array<const char *,2>{{"s:symbol","s:Block"}}, std::array<const char *,2>{{"stmt","block"}}, 0)
, wrapper_rel_592_Statement_OriginalStatement(459, *rel_592_Statement_OriginalStatement, *this, "Statement_OriginalStatement", std::array<const char *,2>{{"s:Statement","s:OriginalStatement"}}, std::array<const char *,2>{{"stmt","originalStatement"}}, 0)
, wrapper_rel_593_inliner_Out_Statement_OriginalStatement(460, *rel_593_inliner_Out_Statement_OriginalStatement, *this, "inliner.Out_Statement_OriginalStatement", std::array<const char *,2>{{"s:Statement","s:symbol"}}, std::array<const char *,2>{{"irstmt","stmt"}}, 0)
, wrapper_rel_594_Variable_BlockValue(461, *rel_594_Variable_BlockValue, *this, "Variable_BlockValue", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
, wrapper_rel_595_inliner_Out_Variable_BlockValue(462, *rel_595_inliner_Out_Variable_BlockValue, *this, "inliner.Out_Variable_BlockValue", std::array<const char *,2>{{"s:Variable","s:Value"}}, std::array<const char *,2>{{"var","value"}}, 0)
{
addRelation("Statement_Defines", wrapper_rel_1_Statement_Defines, true, false);
addRelation("Statement_Opcode", wrapper_rel_2_Statement_Opcode, true, false);
addRelation("MSIZE", wrapper_rel_3_MSIZE, false, false);
addRelation("LOGStatement", wrapper_rel_4_LOGStatement, false, false);
addRelation("RETURNDATASIZE", wrapper_rel_5_RETURNDATASIZE, false, false);
addRelation("CALLDATASIZE", wrapper_rel_6_CALLDATASIZE, false, false);
addRelation("Statement_Uses", wrapper_rel_7_Statement_Uses, true, false);
addRelation("ADD", wrapper_rel_8_ADD, false, false);
addRelation("ADDFix", wrapper_rel_9_ADDFix, false, false);
addRelation("MLOAD", wrapper_rel_10_MLOAD, false, false);
addRelation("__agg_single16", wrapper_rel_11_agg_single16, false, false);
addRelation("AuxStatementOpAndArgs", wrapper_rel_12_AuxStatementOpAndArgs, false, false);
addRelation("BasicVariable_Value", wrapper_rel_13_BasicVariable_Value, true, false);
addRelation("BasicAuxStatementOpAndConstantArgValues", wrapper_rel_16_BasicAuxStatementOpAndConstantArgValues, false, false);
addRelation("basicVariableValueConstantFolding.ValidConstantFoldOperation", wrapper_rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation, false, false);
addRelation("basicVariableValueConstantFolding.RequestConstantFold2", wrapper_rel_22_basicVariableValueConstantFolding_RequestConstantFold2, false, false);
addRelation("basicVariableValueConstantFolding.ConstantFoldResult2", wrapper_rel_25_basicVariableValueConstantFolding_ConstantFoldResult2, false, false);
addRelation("MLOADFreePtr", wrapper_rel_28_MLOADFreePtr, false, false);
addRelation("MLOADFreePtr_To", wrapper_rel_29_MLOADFreePtr_To, false, false);
addRelation("__agg_single17", wrapper_rel_30_agg_single17, false, false);
addRelation("VarPlusConst", wrapper_rel_31_VarPlusConst, false, false);
addRelation("ValueWithEvenLength", wrapper_rel_32_ValueWithEvenLength, false, false);
addRelation("ValueMasksOrKeepsByteAtIndex", wrapper_rel_33_ValueMasksOrKeepsByteAtIndex, false, false);
addRelation("ValueIsByteMask", wrapper_rel_34_ValueIsByteMask, false, false);
addRelation("ByteMask_ZerosMinMax", wrapper_rel_35_ByteMask_ZerosMinMax, false, false);
addRelation("ValueIsNotAntiByteMask", wrapper_rel_36_ValueIsNotAntiByteMask, false, false);
addRelation("AntiByteMask", wrapper_rel_37_AntiByteMask, false, false);
addRelation("VarPlusThirtyTwo", wrapper_rel_38_VarPlusThirtyTwo, false, false);
addRelation("CALLPRIVATE", wrapper_rel_39_CALLPRIVATE, false, false);
addRelation("MSTORE", wrapper_rel_40_MSTORE, false, false);
addRelation("MSTOREFreePtr", wrapper_rel_41_MSTOREFreePtr, false, false);
addRelation("mstoreFreePtrOrder.To", wrapper_rel_42_mstoreFreePtrOrder_To, false, false);
addRelation("__agg_single7", wrapper_rel_43_agg_single7, false, false);
addRelation("MLOADMSTORESameAddrVar", wrapper_rel_44_MLOADMSTORESameAddrVar, false, false);
addRelation("NonUniqueMLOADMSTOREForAddrVar", wrapper_rel_45_NonUniqueMLOADMSTOREForAddrVar, false, false);
addRelation("UniqueMSTOREMLOADForAddrVar", wrapper_rel_46_UniqueMSTOREMLOADForAddrVar, false, false);
addRelation("__agg_single6", wrapper_rel_47_agg_single6, false, false);
addRelation("PHI", wrapper_rel_48_PHI, false, false);
addRelation("PHIStmtTwoUses", wrapper_rel_49_PHIStmtTwoUses, false, false);
addRelation("PossibleArray", wrapper_rel_50_PossibleArray, false, false);
addRelation("SUB", wrapper_rel_51_SUB, false, false);
addRelation("ADDFixx", wrapper_rel_52_ADDFixx, false, false);
addRelation("CALL", wrapper_rel_53_CALL, false, false);
addRelation("DELEGATECALL", wrapper_rel_54_DELEGATECALL, false, false);
addRelation("STATICCALL", wrapper_rel_55_STATICCALL, false, false);
addRelation("CALLReturnDataStartVar", wrapper_rel_56_CALLReturnDataStartVar, false, false);
addRelation("callToReturnDataOp.Bypassing", wrapper_rel_57_callToReturnDataOp_Bypassing, false, false);
addRelation("__agg_single", wrapper_rel_58_agg_single, false, false);
addRelation("CALLReturnDataLengthVar", wrapper_rel_59_CALLReturnDataLengthVar, false, false);
addRelation("MSTORE8", wrapper_rel_60_MSTORE8, false, false);
addRelation("RETURN", wrapper_rel_61_RETURN, false, false);
addRelation("REVERT", wrapper_rel_62_REVERT, false, false);
addRelation("SHA3", wrapper_rel_63_SHA3, false, false);
addRelation("StatementUsesMemory_StartVar", wrapper_rel_64_StatementUsesMemory_StartVar, false, false);
addRelation("StatementUsesMemoryReadsFromZero", wrapper_rel_65_StatementUsesMemoryReadsFromZero, false, false);
addRelation("StatementUsesMemory_LengthVar", wrapper_rel_66_StatementUsesMemory_LengthVar, false, false);
addRelation("StatementUsesMemory", wrapper_rel_67_StatementUsesMemory, false, false);
addRelation("mloadAliasesPrecise.Bypassing", wrapper_rel_68_mloadAliasesPrecise_Bypassing, false, false);
addRelation("StatementUsesMemoryReadsABIEnc", wrapper_rel_69_StatementUsesMemoryReadsABIEnc, false, false);
addRelation("StatementUsesMemoryReadsABIEncWSelector", wrapper_rel_70_StatementUsesMemoryReadsABIEncWSelector, false, false);
addRelation("StatementUsesMemoryReadsRawData", wrapper_rel_71_StatementUsesMemoryReadsRawData, false, false);
addRelation("StatementUsesMemoryOfInitiallyComputableLength", wrapper_rel_72_StatementUsesMemoryOfInitiallyComputableLength, false, false);
addRelation("__agg_single4", wrapper_rel_73_agg_single4, false, false);
addRelation("__agg_single5", wrapper_rel_74_agg_single5, false, false);
addRelation("VariableLengthMemoryCopyStatement", wrapper_rel_75_VariableLengthMemoryCopyStatement, false, false);
addRelation("LT", wrapper_rel_76_LT, false, false);
addRelation("JUMPI", wrapper_rel_77_JUMPI, false, false);
addRelation("SLOAD", wrapper_rel_78_SLOAD, false, false);
addRelation("SSTORE", wrapper_rel_79_SSTORE, false, false);
addRelation("RETURNPRIVATE", wrapper_rel_80_RETURNPRIVATE, false, false);
addRelation("GT", wrapper_rel_81_GT, false, false);
addRelation("ISZERO", wrapper_rel_82_ISZERO, false, false);
addRelation("MUL", wrapper_rel_83_MUL, false, false);
addRelation("SHL", wrapper_rel_84_SHL, false, false);
addRelation("AND", wrapper_rel_85_AND, false, false);
addRelation("AntiMaskOp", wrapper_rel_86_AntiMaskOp, false, true);
addRelation("OR", wrapper_rel_89_OR, false, false);
addRelation("RETURNDATACOPY", wrapper_rel_90_RETURNDATACOPY, false, false);
addRelation("callToReturnDataOp.To", wrapper_rel_91_callToReturnDataOp_To, false, false);
addRelation("CALLDATALOAD", wrapper_rel_92_CALLDATALOAD, false, false);
addRelation("__agg_single13", wrapper_rel_93_agg_single13, false, false);
addRelation("CALLDATACOPY", wrapper_rel_94_CALLDATACOPY, false, false);
addRelation("DIV", wrapper_rel_95_DIV, false, false);
addRelation("CALLCODE", wrapper_rel_96_CALLCODE, false, false);
addRelation("CALLStatement", wrapper_rel_97_CALLStatement, false, false);
addRelation("LOGIndexedArg", wrapper_rel_98_LOGIndexedArg, false, false);
addRelation("Statement_Block", wrapper_rel_99_Statement_Block, true, false);
addRelation("ActualArgs", wrapper_rel_100_ActualArgs, false, false);
addRelation("mloadAliases.BlockHasFromStmt", wrapper_rel_101_mloadAliases_BlockHasFromStmt, false, false);
addRelation("mstoreFreePtrOrder.BlockHasFromStmt", wrapper_rel_102_mstoreFreePtrOrder_BlockHasFromStmt, false, false);
addRelation("mstoreFreePtrOrder.BlockHasToStmt", wrapper_rel_103_mstoreFreePtrOrder_BlockHasToStmt, false, false);
addRelation("DirectThrowBlock", wrapper_rel_104_DirectThrowBlock, false, false);
addRelation("mloadAliasesPrecise.BlockHasBypassingStmt", wrapper_rel_105_mloadAliasesPrecise_BlockHasBypassingStmt, false, false);
addRelation("callToReturnDataOp.BlockHasBypassingStmt", wrapper_rel_106_callToReturnDataOp_BlockHasBypassingStmt, false, false);
addRelation("callToReturnDataOp.BlockHasToStmt", wrapper_rel_107_callToReturnDataOp_BlockHasToStmt, false, false);
addRelation("inliner.In_ActualArgs", wrapper_rel_108_inliner_In_ActualArgs, false, false);
addRelation("inliner.ThrowBlock", wrapper_rel_109_inliner_ThrowBlock, false, false);
addRelation("CallGraphEdge", wrapper_rel_110_CallGraphEdge, true, false);
addRelation("FormalArgs", wrapper_rel_111_FormalArgs, true, false);
addRelation("isVariable", wrapper_rel_112_isVariable, false, false);
addRelation("inliner.FunHasArgMismatch", wrapper_rel_113_inliner_FunHasArgMismatch, false, true);
addRelation("FunctionEntry", wrapper_rel_114_FunctionEntry, true, false);
addRelation("InFunction", wrapper_rel_115_InFunction, true, false);
addRelation("Statement_Function", wrapper_rel_116_Statement_Function, false, false);
addRelation("inliner.FunctionContainsMemConsStmt", wrapper_rel_117_inliner_FunctionContainsMemConsStmt, false, false);
addRelation("Variable_Function", wrapper_rel_118_Variable_Function, false, false);
addRelation("FormalReturnArgs", wrapper_rel_119_FormalReturnArgs, false, false);
addRelation("inliner.In_FormalReturnArgs", wrapper_rel_120_inliner_In_FormalReturnArgs, false, false);
addRelation("LocalBlockEdge", wrapper_rel_121_LocalBlockEdge, true, false);
addRelation("DoesNotDominate", wrapper_rel_122_DoesNotDominate, false, false);
addRelation("Dominates", wrapper_rel_125_Dominates, false, false);
addRelation("StructuredLoopBackEdge", wrapper_rel_126_StructuredLoopBackEdge, false, false);
addRelation("StructuredLoopHead", wrapper_rel_127_StructuredLoopHead, false, false);
addRelation("BlockInStructuredLoop", wrapper_rel_128_BlockInStructuredLoop, false, false);
addRelation("StatementInStructuredLoop", wrapper_rel_131_StatementInStructuredLoop, false, false);
addRelation("inductionVariableFlow.TransferBoundary", wrapper_rel_132_inductionVariableFlow_TransferBoundary, false, false);
addRelation("LocalBlockPath", wrapper_rel_133_LocalBlockPath, false, false);
addRelation("mloadAliases.FromStmtToStmtDiffBlockHavePath", wrapper_rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath", wrapper_rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtDiffBlockHavePath", wrapper_rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath, false, false);
addRelation("AfterCALLCheckRetDataSize", wrapper_rel_139_AfterCALLCheckRetDataSize, false, false);
addRelation("IsBlock", wrapper_rel_140_IsBlock, false, false);
addRelation("inliner.FunCalledWithImpreciseControlFlow", wrapper_rel_141_inliner_FunCalledWithImpreciseControlFlow, false, false);
addRelation("inliner.Function_Exit", wrapper_rel_142_inliner_Function_Exit, false, true);
addRelation("inliner.FunHasRetMismatch", wrapper_rel_143_inliner_FunHasRetMismatch, false, true);
addRelation("inliner.In_ValidBlock", wrapper_rel_144_inliner_In_ValidBlock, false, false);
addRelation("Statement_Next", wrapper_rel_145_Statement_Next, true, false);
addRelation("Helper_NextStatementInSameBlock", wrapper_rel_146_Helper_NextStatementInSameBlock, false, false);
addRelation("LocalStatementPathInBlock", wrapper_rel_147_LocalStatementPathInBlock, false, false);
addRelation("mloadAliases.FromStmtToStmtSameBlock", wrapper_rel_150_mloadAliases_FromStmtToStmtSameBlock, false, false);
addRelation("mloadAliasesPrecise.FromStmtToStmtSameBlockInterrupted", wrapper_rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("mloadAliasesPrecise.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtSameBlock", wrapper_rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock, false, false);
addRelation("mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("mloadAliasesPrecise.ReachableBypassingAny", wrapper_rel_156_mloadAliasesPrecise_ReachableBypassingAny, false, false);
addRelation("MLOADSFreePtrUnchangedNoMemReuse", wrapper_rel_157_MLOADSFreePtrUnchangedNoMemReuse, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtSameBlock", wrapper_rel_160_callToReturnDataOp_FromStmtToStmtSameBlock, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtSameBlockInterrupted", wrapper_rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("callToReturnDataOp.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("callToReturnDataOp.ReachableBypassingAny", wrapper_rel_163_callToReturnDataOp_ReachableBypassingAny, false, false);
addRelation("RETURNDATACOPYOfCALL", wrapper_rel_164_RETURNDATACOPYOfCALL, false, false);
addRelation("RETURNDATASIZEOfCALL", wrapper_rel_165_RETURNDATASIZEOfCALL, false, false);
addRelation("RETURNDATACOPYAllDataOfCALL", wrapper_rel_166_RETURNDATACOPYAllDataOfCALL, false, false);
addRelation("Block_Tail", wrapper_rel_167_Block_Tail, false, false);
addRelation("CALLUpdatesFreePtr", wrapper_rel_168_CALLUpdatesFreePtr, false, false);
addRelation("FunctionUpdatesFreePtr", wrapper_rel_171_FunctionUpdatesFreePtr, false, false);
addRelation("mloadAliases.Bypassing", wrapper_rel_174_mloadAliases_Bypassing, false, false);
addRelation("mloadAliases.BlockHasBypassingStmt", wrapper_rel_175_mloadAliases_BlockHasBypassingStmt, false, false);
addRelation("mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("mloadAliases.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("mloadAliases.FromStmtToStmtSameBlockInterrupted", wrapper_rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("mloadAliases.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("mloadAliases.ReachableBypassingAny", wrapper_rel_180_mloadAliases_ReachableBypassingAny, false, false);
addRelation("MLOADSFreePtrUnchanged", wrapper_rel_181_MLOADSFreePtrUnchanged, false, false);
addRelation("mstoreFreePtrOrder.Bypassing", wrapper_rel_182_mstoreFreePtrOrder_Bypassing, false, false);
addRelation("mstoreFreePtrOrder.BlockHasBypassingStmt", wrapper_rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtSameBlockInterrupted", wrapper_rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("mstoreFreePtrOrder.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("mstoreFreePtrOrder.ReachableBypassingAny", wrapper_rel_188_mstoreFreePtrOrder_ReachableBypassingAny, false, false);
addRelation("MLOADFreePtrLoadsValueStoredAt", wrapper_rel_189_MLOADFreePtrLoadsValueStoredAt, false, false);
addRelation("MSTOREFreePtrOrder", wrapper_rel_190_MSTOREFreePtrOrder, false, false);
addRelation("LoopExitCond", wrapper_rel_191_LoopExitCond, false, false);
addRelation("ActualReturnArgs", wrapper_rel_192_ActualReturnArgs, true, false);
addRelation("FunctionCallReturn", wrapper_rel_193_FunctionCallReturn, true, false);
addRelation("inductionVariableFlow.TransferOpcode", wrapper_rel_194_inductionVariableFlow_TransferOpcode, false, false);
addRelation("inductionVariableFlow.Flows", wrapper_rel_195_inductionVariableFlow_Flows, false, false);
addRelation("inductionVariableFlow.FunctionFlowSummary", wrapper_rel_198_inductionVariableFlow_FunctionFlowSummary, false, false);
addRelation("ShiftConst", wrapper_rel_201_ShiftConst, false, false);
addRelation("LShiftBytes", wrapper_rel_204_LShiftBytes, false, true);
addRelation("Mask_Length", wrapper_rel_205_Mask_Length, true, false);
addRelation("LowBytesMaskOp", wrapper_rel_206_LowBytesMaskOp, false, true);
addRelation("PartialMSTORE", wrapper_rel_207_PartialMSTORE, false, true);
addRelation("variableValueConstantFolding.RequestConstantFold2", wrapper_rel_208_variableValueConstantFolding_RequestConstantFold2, false, false);
addRelation("Variable_Value", wrapper_rel_211_Variable_Value, true, false);
addRelation("AuxStatementOpAndConstantArgValues", wrapper_rel_214_AuxStatementOpAndConstantArgValues, false, false);
addRelation("InductionVariable", wrapper_rel_217_InductionVariable, false, false);
addRelation("GlobalInductionVariableStore", wrapper_rel_220_GlobalInductionVariableStore, false, false);
addRelation("Variable_NumericValue", wrapper_rel_223_Variable_NumericValue, false, false);
addRelation("MSTOREFreePtr_IncByAmount", wrapper_rel_226_MSTOREFreePtr_IncByAmount, false, false);
addRelation("Variable_SymbolicValue", wrapper_rel_229_Variable_SymbolicValue, false, false);
addRelation("FreePointerBasedValue", wrapper_rel_232_FreePointerBasedValue, false, false);
addRelation("FreePointerBasedValuesWithFreePointerAliases", wrapper_rel_235_FreePointerBasedValuesWithFreePointerAliases, false, false);
addRelation("FreePointerBasedValuesNumDiff", wrapper_rel_238_FreePointerBasedValuesNumDiff, false, false);
addRelation("FreePointerBasedValuesWithFreePointerAliasesNumVals", wrapper_rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals, false, false);
addRelation("StatementWritesMemoryOfConstantLength", wrapper_rel_244_StatementWritesMemoryOfConstantLength, false, false);
addRelation("MemoryAddressVar", wrapper_rel_247_MemoryAddressVar, false, false);
addRelation("MemoryAddressVariable_Function", wrapper_rel_250_MemoryAddressVariable_Function, false, false);
addRelation("MemoryAddressVarsNumDiff", wrapper_rel_253_MemoryAddressVarsNumDiff, false, false);
addRelation("PossibleStructAllocation", wrapper_rel_256_PossibleStructAllocation, false, false);
addRelation("PossibleStructArg", wrapper_rel_259_PossibleStructArg, false, false);
addRelation("InductionVariableIncreasesByConst", wrapper_rel_262_InductionVariableIncreasesByConst, false, false);
addRelation("InductionVariableLowerBoundVar", wrapper_rel_265_InductionVariableLowerBoundVar, false, false);
addRelation("InductionVariableUpperBoundVar", wrapper_rel_268_InductionVariableUpperBoundVar, false, false);
addRelation("MemoryCopyLoop", wrapper_rel_271_MemoryCopyLoop, false, false);
addRelation("MemoryCopyLoopConstLength", wrapper_rel_274_MemoryCopyLoopConstLength, false, false);
addRelation("WellFormedLoopInductionVariable", wrapper_rel_277_WellFormedLoopInductionVariable, false, false);
addRelation("StatementWritesMemoryCopiedFromLoop", wrapper_rel_280_StatementWritesMemoryCopiedFromLoop, false, false);
addRelation("CALLReturnDataLengthVal", wrapper_rel_283_CALLReturnDataLengthVal, false, false);
addRelation("CALLReturnsFixedSizeData", wrapper_rel_286_CALLReturnsFixedSizeData, false, false);
addRelation("variableValueConstantFolding.ConstantFoldResult2", wrapper_rel_289_variableValueConstantFolding_ConstantFoldResult2, false, false);
addRelation("variableValueConstantFolding.ValidConstantFoldOperation", wrapper_rel_292_variableValueConstantFolding_ValidConstantFoldOperation, false, false);
addRelation("FreePointerBasedValuesEqual", wrapper_rel_295_FreePointerBasedValuesEqual, false, false);
addRelation("FreePointerBasedValue_AliasRep", wrapper_rel_296_FreePointerBasedValue_AliasRep, false, false);
addRelation("PossibleArrayAlias", wrapper_rel_297_PossibleArrayAlias, false, false);
addRelation("CALLReturnsArray", wrapper_rel_298_CALLReturnsArray, false, false);
addRelation("__agg_single2", wrapper_rel_299_agg_single2, false, false);
addRelation("VarPlusSixtyThreeAndNotThirtyOne", wrapper_rel_300_VarPlusSixtyThreeAndNotThirtyOne, false, false);
addRelation("ReturnDataByteArray", wrapper_rel_301_ReturnDataByteArray, false, false);
addRelation("IsABIEncodedArrayVar", wrapper_rel_302_IsABIEncodedArrayVar, false, false);
addRelation("ABIEncodedArrayVarsInSameClass", wrapper_rel_305_ABIEncodedArrayVarsInSameClass, false, false);
addRelation("ABIEncodedArrayVar_ClassRep", wrapper_rel_306_ABIEncodedArrayVar_ClassRep, false, false);
addRelation("ABIEncodedArrayNoFunctionSelector", wrapper_rel_307_ABIEncodedArrayNoFunctionSelector, false, false);
addRelation("ABIEncodedArrayReadByStmt", wrapper_rel_308_ABIEncodedArrayReadByStmt, false, false);
addRelation("ABIEncodedArrayWFunctionSelector", wrapper_rel_309_ABIEncodedArrayWFunctionSelector, false, false);
addRelation("StatementUsesMemoryOfComputableLength", wrapper_rel_310_StatementUsesMemoryOfComputableLength, false, false);
addRelation("StatementReadsMemoryOfConstantLength", wrapper_rel_311_StatementReadsMemoryOfConstantLength, false, false);
addRelation("Analytics_LenVarHasManyVars", wrapper_rel_312_Analytics_LenVarHasManyVars, false, true);
addRelation("__agg_single3", wrapper_rel_313_agg_single3, false, false);
addRelation("Verbatim_MemConsStmtsLengths", wrapper_rel_314_Verbatim_MemConsStmtsLengths, false, true);
addRelation("StatementWritesMemoryOfLength", wrapper_rel_315_StatementWritesMemoryOfLength, false, false);
addRelation("StatementWritesMemoryOfConstantLengthAtMemAlias", wrapper_rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias, false, true);
addRelation("memWriteToMemConsStmtImpr.BlockHasBypassingStmt", wrapper_rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt, false, false);
addRelation("mstoreToMemConsStmt.From", wrapper_rel_318_mstoreToMemConsStmt_From, false, false);
addRelation("mstoreToMemConsStmt.BlockHasFromStmt", wrapper_rel_319_mstoreToMemConsStmt_BlockHasFromStmt, false, false);
addRelation("StatementUsesMemoryOfNonComputableLength", wrapper_rel_320_StatementUsesMemoryOfNonComputableLength, false, false);
addRelation("mstoreToMemConsStmt.To", wrapper_rel_321_mstoreToMemConsStmt_To, false, false);
addRelation("mstoreToMemConsStmt.BlockHasToStmt", wrapper_rel_322_mstoreToMemConsStmt_BlockHasToStmt, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath", wrapper_rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtSameBlock", wrapper_rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock, false, false);
addRelation("mstoreToMemConsStmt.Bypassing", wrapper_rel_325_mstoreToMemConsStmt_Bypassing, false, false);
addRelation("mstoreToMemConsStmt.BlockHasBypassingStmt", wrapper_rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtSameBlockInterrupted", wrapper_rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("mstoreToMemConsStmt.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("mstoreToMemConsStmt.ReachableBypassingAny", wrapper_rel_331_mstoreToMemConsStmt_ReachableBypassingAny, false, false);
addRelation("InitialMemWriteToMemConsStmtWithNonComputableLength", wrapper_rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength, false, false);
addRelation("__agg_subclause", wrapper_rel_333_agg_subclause, false, false);
addRelation("StatementUsesMemoryOfNonComputableLength_LengthApprox", wrapper_rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox, false, true);
addRelation("StatementReadsMemoryOfConstantLengthAtMemAlias", wrapper_rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias, false, false);
addRelation("memWriteToMemConsStmtImpr.BlockHasToStmt", wrapper_rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath", wrapper_rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted", wrapper_rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted", wrapper_rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock", wrapper_rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockInterrupted", wrapper_rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted, false, false);
addRelation("memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted", wrapper_rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted, false, false);
addRelation("memWriteToMemConsStmtImpr.ReachableBypassingAny", wrapper_rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny, false, false);
addRelation("MemWriteToMemConsStmtWithConstantLength", wrapper_rel_344_MemWriteToMemConsStmtWithConstantLength, false, false);
addRelation("MemWriteToMemConsStmtWithNonComputableLength", wrapper_rel_345_MemWriteToMemConsStmtWithNonComputableLength, false, false);
addRelation("MemWriteToMemConsStmt", wrapper_rel_346_MemWriteToMemConsStmt, false, false);
addRelation("MemWriteToMemConsStmtInfoInit", wrapper_rel_347_MemWriteToMemConsStmtInfoInit, false, true);
addRelation("MemWriteToMemConsStmtInvalid", wrapper_rel_348_MemWriteToMemConsStmtInvalid, false, true);
addRelation("MemWriteToMemConsStmtInfo", wrapper_rel_349_MemWriteToMemConsStmtInfo, false, true);
addRelation("MemWriteToMemConsStmtConflLowerLimit", wrapper_rel_350_MemWriteToMemConsStmtConflLowerLimit, false, false);
addRelation("MemWriteToMemConsStmtLowerLimit", wrapper_rel_351_MemWriteToMemConsStmtLowerLimit, false, true);
addRelation("MemWriteToMemConsStmtConflUpperLimit", wrapper_rel_352_MemWriteToMemConsStmtConflUpperLimit, false, false);
addRelation("MemWriteToMemConsStmtUpperLimit", wrapper_rel_353_MemWriteToMemConsStmtUpperLimit, false, true);
addRelation("MemWriteToMemConsStmtPartOfPrev", wrapper_rel_354_MemWriteToMemConsStmtPartOfPrev, false, true);
addRelation("MemWriteToMemConsStmtResolved", wrapper_rel_355_MemWriteToMemConsStmtResolved, false, true);
addRelation("ABIEncodedArrayWriteTo", wrapper_rel_356_ABIEncodedArrayWriteTo, false, false);
addRelation("MSTOREToMemConsStmtWritesShiftedVar", wrapper_rel_357_MSTOREToMemConsStmtWritesShiftedVar, false, true);
addRelation("MSTOREToMemConsStmt_WrittenVar", wrapper_rel_358_MSTOREToMemConsStmt_WrittenVar, false, true);
addRelation("StatementUsesMemoryWriteAtRelativeIndex", wrapper_rel_359_StatementUsesMemoryWriteAtRelativeIndex, false, false);
addRelation("StatementUsesMemoryWritesAtRelativeIndexOrdered", wrapper_rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered, false, false);
addRelation("StatementUsesMemoryWritesAtRelativeIndexNotNext", wrapper_rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext, false, false);
addRelation("StatementUsesMemoryWritesAtRelativeIndexNext", wrapper_rel_362_StatementUsesMemoryWritesAtRelativeIndexNext, false, false);
addRelation("StatementUsesMemoryWriteAtRelativeIndex_Order", wrapper_rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order, false, false);
addRelation("StatementUsesMemoryMemoryArgumentNew", wrapper_rel_366_StatementUsesMemoryMemoryArgumentNew, false, false);
addRelation("CDArg", wrapper_rel_367_CDArg, false, true);
addRelation("StatementUsesMemoryMemoryArgument", wrapper_rel_368_StatementUsesMemoryMemoryArgument, false, false);
addRelation("MemoryStatement_ActualArgNew", wrapper_rel_369_MemoryStatement_ActualArgNew, false, true);
addRelation("MSTOREToMemConsStmt_WrittenValue", wrapper_rel_370_MSTOREToMemConsStmt_WrittenValue, false, false);
addRelation("MLOADReadsReturnOfCALL", wrapper_rel_371_MLOADReadsReturnOfCALL, false, false);
addRelation("__agg_single18", wrapper_rel_372_agg_single18, false, false);
addRelation("memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict", wrapper_rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict, false, false);
addRelation("CallDataLoadReadsLength", wrapper_rel_374_CallDataLoadReadsLength, false, false);
addRelation("ArgArrayLenWrittenTo", wrapper_rel_375_ArgArrayLenWrittenTo, false, false);
addRelation("InitialStoreToPossibleStruct", wrapper_rel_376_InitialStoreToPossibleStruct, false, false);
addRelation("FreePointerBasedValuesNumDiffNoMemReuse", wrapper_rel_377_FreePointerBasedValuesNumDiffNoMemReuse, false, false);
addRelation("IsCallDataArrayVar", wrapper_rel_378_IsCallDataArrayVar, false, false);
addRelation("VarPlusThrirtyOneAndNotThirtyOne", wrapper_rel_379_VarPlusThrirtyOneAndNotThirtyOne, false, false);
addRelation("VarDivByConstant", wrapper_rel_380_VarDivByConstant, false, false);
addRelation("VarTimesConstant", wrapper_rel_381_VarTimesConstant, false, false);
addRelation("VarPlusThrirtyOneDivMulSixtyFour", wrapper_rel_382_VarPlusThrirtyOneDivMulSixtyFour, false, false);
addRelation("CallDataCopyArgInfo", wrapper_rel_383_CallDataCopyArgInfo, false, false);
addRelation("__agg_single0", wrapper_rel_384_agg_single0, false, false);
addRelation("CALLReturnsNoData", wrapper_rel_385_CALLReturnsNoData, false, false);
addRelation("__agg_single1", wrapper_rel_386_agg_single1, false, false);
addRelation("AllCALLsClassified", wrapper_rel_387_AllCALLsClassified, false, true);
addRelation("CALLDATACOPY_AllCalldata", wrapper_rel_388_CALLDATACOPY_AllCalldata, false, false);
addRelation("CALLDATALOADOfConstant", wrapper_rel_389_CALLDATALOADOfConstant, false, false);
addRelation("PublicFunctionArg", wrapper_rel_390_PublicFunctionArg, false, true);
addRelation("Analytics_PublicFunctionArg", wrapper_rel_391_Analytics_PublicFunctionArg, false, true);
addRelation("Analytics_PublicFunctionArrayArg", wrapper_rel_392_Analytics_PublicFunctionArrayArg, false, true);
addRelation("CALLDATALOADOfStaticAddr", wrapper_rel_393_CALLDATALOADOfStaticAddr, false, false);
addRelation("__agg_single15", wrapper_rel_394_agg_single15, false, false);
addRelation("CALLToPrecompiledFunction", wrapper_rel_395_CALLToPrecompiledFunction, false, false);
addRelation("StoreFreeMemPtrToMemZero", wrapper_rel_396_StoreFreeMemPtrToMemZero, false, false);
addRelation("EcrecoverCompilerBug", wrapper_rel_397_EcrecoverCompilerBug, false, true);
addRelation("BinArith", wrapper_rel_398_BinArith, false, false);
addRelation("TernArith", wrapper_rel_399_TernArith, false, false);
addRelation("UnaryArith", wrapper_rel_400_UnaryArith, false, false);
addRelation("FlowOp", wrapper_rel_401_FlowOp, false, false);
addRelation("standardflowanalysis.Flows", wrapper_rel_402_standardflowanalysis_Flows, false, false);
addRelation("standardflowanalysis.FunctionFlowSummary", wrapper_rel_405_standardflowanalysis_FunctionFlowSummary, false, false);
addRelation("standardflowanalysis.InterFunctionActualArgFlow", wrapper_rel_408_standardflowanalysis_InterFunctionActualArgFlow, false, false);
addRelation("standardflowanalysis.GlobalFlows", wrapper_rel_409_standardflowanalysis_GlobalFlows, false, false);
addRelation("StructAllocation", wrapper_rel_412_StructAllocation, false, false);
addRelation("Struct_WordWidth", wrapper_rel_413_Struct_WordWidth, false, false);
addRelation("StructArg", wrapper_rel_416_StructArg, false, false);
addRelation("StructIndex", wrapper_rel_419_StructIndex, false, false);
addRelation("StructLoad", wrapper_rel_420_StructLoad, false, false);
addRelation("_StructLoad", wrapper_rel_421_StructLoad, false, false);
addRelation("__agg_single22", wrapper_rel_422_agg_single22, false, false);
addRelation("StructStore", wrapper_rel_423_StructStore, false, false);
addRelation("IsRegularArrayVar", wrapper_rel_424_IsRegularArrayVar, false, false);
addRelation("IsRawDataArrayVar", wrapper_rel_427_IsRawDataArrayVar, false, false);
addRelation("Array_ElementLength", wrapper_rel_430_Array_ElementLength, false, false);
addRelation("ArrayVarLengthVar", wrapper_rel_433_ArrayVarLengthVar, false, false);
addRelation("ArrayDataStartVar", wrapper_rel_436_ArrayDataStartVar, false, false);
addRelation("PossibleArrayLoose", wrapper_rel_439_PossibleArrayLoose, false, false);
addRelation("ArrayActualArg", wrapper_rel_442_ArrayActualArg, false, true);
addRelation("ArrayFormalRet", wrapper_rel_445_ArrayFormalRet, false, false);
addRelation("RegularArrayVarsInSameClass", wrapper_rel_448_RegularArrayVarsInSameClass, false, false);
addRelation("StructContainsArray", wrapper_rel_451_StructContainsArray, false, false);
addRelation("ABIEncodedArrayIncludesArray", wrapper_rel_454_ABIEncodedArrayIncludesArray, false, false);
addRelation("ABIEncodedArrayIncludesArrayAtConcreteIndex", wrapper_rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex, false, false);
addRelation("ArrayAllocationInternal", wrapper_rel_460_ArrayAllocationInternal, false, false);
addRelation("ArrayHasConstantLength", wrapper_rel_461_ArrayHasConstantLength, false, false);
addRelation("ArrayIndexAccess", wrapper_rel_462_ArrayIndexAccess, false, false);
addRelation("MemArrayPut", wrapper_rel_463_MemArrayPut, false, false);
addRelation("MemArrayGet", wrapper_rel_464_MemArrayGet, false, false);
addRelation("CallDataArrayGet", wrapper_rel_465_CallDataArrayGet, false, false);
addRelation("CALLDATALOADArrayRelated", wrapper_rel_466_CALLDATALOADArrayRelated, false, false);
addRelation("__agg_single14", wrapper_rel_467_agg_single14, false, false);
addRelation("Verbatim_CDLAllVSStaticVSArr", wrapper_rel_468_Verbatim_CDLAllVSStaticVSArr, false, true);
addRelation("arrayClassRep.LoadInBlock", wrapper_rel_469_arrayClassRep_LoadInBlock, false, false);
addRelation("arrayClassRep.DominatesInClass", wrapper_rel_470_arrayClassRep_DominatesInClass, false, false);
addRelation("arrayClassRep.DominatesAllInClass", wrapper_rel_471_arrayClassRep_DominatesAllInClass, false, false);
addRelation("arrayClassRep.Var_ClassRep", wrapper_rel_472_arrayClassRep_Var_ClassRep, false, false);
addRelation("RegularArrayVar_ClassRep", wrapper_rel_473_RegularArrayVar_ClassRep, false, false);
addRelation("ArrayStoreAtIndex", wrapper_rel_474_ArrayStoreAtIndex, false, false);
addRelation("ArrayStoreI", wrapper_rel_475_ArrayStoreI, false, false);
addRelation("__agg_single8", wrapper_rel_476_agg_single8, false, false);
addRelation("ArrayLoadAtIndex", wrapper_rel_477_ArrayLoadAtIndex, false, false);
addRelation("ArrayLoadI", wrapper_rel_478_ArrayLoadI, false, false);
addRelation("__agg_single20", wrapper_rel_479_agg_single20, false, false);
addRelation("assertVarIsArray.FromHasNoEdges", wrapper_rel_480_assertVarIsArray_FromHasNoEdges, false, true);
addRelation("assertVarIsArray.FromHasTwoEdges", wrapper_rel_481_assertVarIsArray_FromHasTwoEdges, false, true);
addRelation("ArrayWriteToRelativeIndex", wrapper_rel_482_ArrayWriteToRelativeIndex, false, true);
addRelation("RawDataArrayVarsInSameClass", wrapper_rel_483_RawDataArrayVarsInSameClass, false, false);
addRelation("rawDataArrayClassRep.LoadInBlock", wrapper_rel_484_rawDataArrayClassRep_LoadInBlock, false, false);
addRelation("rawDataArrayClassRep.DominatesInClass", wrapper_rel_485_rawDataArrayClassRep_DominatesInClass, false, false);
addRelation("rawDataArrayClassRep.DominatesAllInClass", wrapper_rel_486_rawDataArrayClassRep_DominatesAllInClass, false, false);
addRelation("rawDataArrayClassRep.Var_ClassRep", wrapper_rel_487_rawDataArrayClassRep_Var_ClassRep, false, false);
addRelation("RawDataArrayVar_ClassRep", wrapper_rel_488_RawDataArrayVar_ClassRep, false, false);
addRelation("VarIsArray", wrapper_rel_489_VarIsArray, false, false);
addRelation("MSTOREToMLOAD", wrapper_rel_490_MSTOREToMLOAD, false, false);
addRelation("ArbitraryCall", wrapper_rel_491_ArbitraryCall, false, true);
addRelation("AllocationAny", wrapper_rel_492_AllocationAny, false, false);
addRelation("__agg_single10", wrapper_rel_493_agg_single10, false, false);
addRelation("StatementUsesMemory_UsesArray", wrapper_rel_494_StatementUsesMemory_UsesArray, false, false);
addRelation("MLOADReadsArrayLength", wrapper_rel_495_MLOADReadsArrayLength, false, false);
addRelation("__agg_single19", wrapper_rel_496_agg_single19, false, false);
addRelation("ArrayDataActualArg", wrapper_rel_497_ArrayDataActualArg, false, true);
addRelation("ExternalCallTakesWholeCallData", wrapper_rel_498_ExternalCallTakesWholeCallData, false, true);
addRelation("_StructStore", wrapper_rel_499_StructStore, false, false);
addRelation("__agg_single12", wrapper_rel_500_agg_single12, false, false);
addRelation("localFlowAnalysis.TransferOpcode", wrapper_rel_501_localFlowAnalysis_TransferOpcode, false, false);
addRelation("localFlowAnalysis.Flows", wrapper_rel_502_localFlowAnalysis_Flows, false, false);
addRelation("localFlowAnalysis.FunctionFlowSummary", wrapper_rel_505_localFlowAnalysis_FunctionFlowSummary, false, false);
addRelation("ArrayStore", wrapper_rel_508_ArrayStore, false, false);
addRelation("WriteToArrayUsedByABIEncodedArray", wrapper_rel_509_WriteToArrayUsedByABIEncodedArray, false, false);
addRelation("ABIEncodedArrayWriteToIsNotArrayOrLen", wrapper_rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen, false, false);
addRelation("ABIEncodedArrayHasVarAtIndex", wrapper_rel_511_ABIEncodedArrayHasVarAtIndex, false, false);
addRelation("StatementUsesMemory_ActualMemoryArg", wrapper_rel_512_StatementUsesMemory_ActualMemoryArg, false, false);
addRelation("CALLWithPossibleSigHashFromSHA3", wrapper_rel_513_CALLWithPossibleSigHashFromSHA3, false, false);
addRelation("StatementUsesMemory_ActualArg", wrapper_rel_514_StatementUsesMemory_ActualArg, false, false);
addRelation("MemoryStatement_ActualArg", wrapper_rel_515_MemoryStatement_ActualArg, false, false);
addRelation("SHA3_1ARG", wrapper_rel_516_SHA3_1ARG, false, false);
addRelation("SHA3_2ARG", wrapper_rel_517_SHA3_2ARG, false, false);
addRelation("SHA3_3ARG", wrapper_rel_518_SHA3_3ARG, false, false);
addRelation("SHA3_KnownContent", wrapper_rel_519_SHA3_KnownContent, false, false);
addRelation("CallToSignatureFromSHA3", wrapper_rel_520_CallToSignatureFromSHA3, false, true);
addRelation("StatementConsumesMemoryNoArgs", wrapper_rel_521_StatementConsumesMemoryNoArgs, false, false);
addRelation("ABIWriteMSTORE", wrapper_rel_522_ABIWriteMSTORE, false, false);
addRelation("ArgWriteAny", wrapper_rel_523_ArgWriteAny, false, false);
addRelation("ModeledMSTORE", wrapper_rel_524_ModeledMSTORE, false, false);
addRelation("NonModeledMSTORE", wrapper_rel_525_NonModeledMSTORE, false, false);
addRelation("Analytics_NonModeledMSTORE", wrapper_rel_526_Analytics_NonModeledMSTORE, false, true);
addRelation("ArrayStoreSimple", wrapper_rel_527_ArrayStoreSimple, false, false);
addRelation("__agg_single9", wrapper_rel_528_agg_single9, false, false);
addRelation("__agg_single11", wrapper_rel_529_agg_single11, false, false);
addRelation("Verbatim_AllVsModeledMSTOREs", wrapper_rel_530_Verbatim_AllVsModeledMSTOREs, false, true);
addRelation("Analytics_MemConsStmtUsesFromDistinctPaths", wrapper_rel_531_Analytics_MemConsStmtUsesFromDistinctPaths, false, true);
addRelation("ArrayLoad", wrapper_rel_532_ArrayLoad, false, false);
addRelation("ModeledMLOAD", wrapper_rel_533_ModeledMLOAD, false, false);
addRelation("NonModeledMLOAD", wrapper_rel_534_NonModeledMLOAD, false, false);
addRelation("Analytics_NonModeledMLOAD", wrapper_rel_535_Analytics_NonModeledMLOAD, false, true);
addRelation("ArrayLoadSimple", wrapper_rel_536_ArrayLoadSimple, false, false);
addRelation("__agg_single21", wrapper_rel_537_agg_single21, false, false);
addRelation("Verbatim_AllVsModeledMLOADs", wrapper_rel_538_Verbatim_AllVsModeledMLOADs, false, true);
addRelation("ConstantPossibleSigHash", wrapper_rel_539_ConstantPossibleSigHash, true, false);
addRelation("CallToSignature", wrapper_rel_540_CallToSignature, false, true);
addRelation("Analytics_CallWithSig", wrapper_rel_541_Analytics_CallWithSig, false, true);
addRelation("ERC20ApproveCall", wrapper_rel_542_ERC20ApproveCall, false, false);
addRelation("Analytics_ERC20ApproveCall", wrapper_rel_543_Analytics_ERC20ApproveCall, false, true);
addRelation("ERC20TransferCall", wrapper_rel_544_ERC20TransferCall, false, false);
addRelation("Analytics_ERC20TransferCall", wrapper_rel_545_Analytics_ERC20TransferCall, false, true);
addRelation("ERC20TransferFromCall", wrapper_rel_546_ERC20TransferFromCall, false, false);
addRelation("Analytics_ERC20TransferFromCall", wrapper_rel_547_Analytics_ERC20TransferFromCall, false, true);
addRelation("Block_CodeChunkAccessed", wrapper_rel_548_Block_CodeChunkAccessed, true, false);
addRelation("Block_Gas", wrapper_rel_549_Block_Gas, true, false);
addRelation("FallthroughEdge", wrapper_rel_550_FallthroughEdge, true, false);
addRelation("IsFunction", wrapper_rel_551_IsFunction, true, false);
addRelation("inliner.FunctionReturnRestriction", wrapper_rel_552_inliner_FunctionReturnRestriction, false, false);
addRelation("PublicFunctionSelector", wrapper_rel_553_PublicFunctionSelector, true, false);
addRelation("IsPublicFunction", wrapper_rel_554_IsPublicFunction, false, false);
addRelation("inliner.InlineCandidate", wrapper_rel_555_inliner_InlineCandidate, false, true);
addRelation("inliner.SafelyInlinableFunction", wrapper_rel_556_inliner_SafelyInlinableFunction, false, true);
addRelation("inliner.CGEToInlineCandidate", wrapper_rel_557_inliner_CGEToInlineCandidate, false, false);
addRelation("inliner.FunctionToInline", wrapper_rel_558_inliner_FunctionToInline, false, true);
addRelation("NeedsMoreInlining", wrapper_rel_559_NeedsMoreInlining, false, true);
addRelation("inliner.BlockToClone", wrapper_rel_560_inliner_BlockToClone, false, true);
addRelation("inliner.InBlock_OutBlock", wrapper_rel_561_inliner_InBlock_OutBlock, false, false);
addRelation("inliner.Out_Block_CodeChunkAccessed", wrapper_rel_562_inliner_Out_Block_CodeChunkAccessed, false, true);
addRelation("inliner.Out_Block_Gas", wrapper_rel_563_inliner_Out_Block_Gas, false, true);
addRelation("inliner.Out_CallGraphEdge", wrapper_rel_564_inliner_Out_CallGraphEdge, false, true);
addRelation("inliner.Out_FallthroughEdge", wrapper_rel_565_inliner_Out_FallthroughEdge, false, true);
addRelation("inliner.Out_FunctionCallReturn", wrapper_rel_566_inliner_Out_FunctionCallReturn, false, true);
addRelation("inliner.Out_LocalBlockEdge", wrapper_rel_567_inliner_Out_LocalBlockEdge, false, true);
addRelation("inliner.StatementToClone", wrapper_rel_568_inliner_StatementToClone, false, true);
addRelation("inliner.InStatement_OutStatement", wrapper_rel_569_inliner_InStatement_OutStatement, false, false);
addRelation("inliner.Out_IsStatement", wrapper_rel_570_inliner_Out_IsStatement, false, true);
addRelation("inliner.Out_Statement_Block", wrapper_rel_571_inliner_Out_Statement_Block, false, true);
addRelation("inliner.VariableToClone", wrapper_rel_572_inliner_VariableToClone, false, true);
addRelation("inliner.Out_FunctionEntry", wrapper_rel_573_inliner_Out_FunctionEntry, false, true);
addRelation("inliner.Out_InFunction", wrapper_rel_574_inliner_Out_InFunction, false, true);
addRelation("inliner.CallToClonedFunction", wrapper_rel_575_inliner_CallToClonedFunction, false, true);
addRelation("inliner.ClonedCallArgs", wrapper_rel_576_inliner_ClonedCallArgs, false, true);
addRelation("inliner.FunctionToInline_RetStmt", wrapper_rel_577_inliner_FunctionToInline_RetStmt, false, true);
addRelation("inliner.ClonedCallRets", wrapper_rel_578_inliner_ClonedCallRets, false, true);
addRelation("inliner.InVar_OutVar", wrapper_rel_579_inliner_InVar_OutVar, false, true);
addRelation("inliner.Out_ActualReturnArgs", wrapper_rel_582_inliner_Out_ActualReturnArgs, false, true);
addRelation("inliner.Out_Statement_Uses", wrapper_rel_583_inliner_Out_Statement_Uses, false, true);
addRelation("inliner.Out_Variable_Value", wrapper_rel_584_inliner_Out_Variable_Value, false, true);
addRelation("inliner.Out_Statement_Defines", wrapper_rel_585_inliner_Out_Statement_Defines, false, true);
addRelation("inliner.Out_Statement_Next", wrapper_rel_586_inliner_Out_Statement_Next, false, true);
addRelation("inliner.Out_Statement_Opcode", wrapper_rel_587_inliner_Out_Statement_Opcode, false, true);
addRelation("inliner.Out_FormalArgs", wrapper_rel_588_inliner_Out_FormalArgs, false, true);
addRelation("inliner.Out_IsFunction", wrapper_rel_589_inliner_Out_IsFunction, false, true);
addRelation("OriginalStatement_Block", wrapper_rel_590_OriginalStatement_Block, true, false);
addRelation("inliner.Out_OriginalStatement_Block", wrapper_rel_591_inliner_Out_OriginalStatement_Block, false, true);
addRelation("Statement_OriginalStatement", wrapper_rel_592_Statement_OriginalStatement, true, false);
addRelation("inliner.Out_Statement_OriginalStatement", wrapper_rel_593_inliner_Out_Statement_OriginalStatement, false, true);
addRelation("Variable_BlockValue", wrapper_rel_594_Variable_BlockValue, true, false);
addRelation("inliner.Out_Variable_BlockValue", wrapper_rel_595_inliner_Out_Variable_BlockValue, false, true);
}
~Sf_fa93e8c04b1c471417d1ec06ed50d344() {
}

private:
std::string             inputDirectory;
std::string             outputDirectory;
SignalHandler*          signalHandler {SignalHandler::instance()};
std::atomic<RamDomain>  ctr {};
std::atomic<std::size_t>     iter {};

void runFunction(std::string  inputDirectoryArg,
                 std::string  outputDirectoryArg,
                 bool         performIOArg,
                 bool         pruneImdtRelsArg) {
    this->inputDirectory  = std::move(inputDirectoryArg);
    this->outputDirectory = std::move(outputDirectoryArg);
    this->performIO       = performIOArg;
    this->pruneImdtRels   = pruneImdtRelsArg; 

    // set default threads (in embedded mode)
    // if this is not set, and omp is used, the default omp setting of number of cores is used.
#if defined(_OPENMP)
    if (0 < getNumThreads()) { omp_set_num_threads(static_cast<int>(getNumThreads())); }
#endif

    signalHandler->set();
// -- query evaluation --
{
 std::vector<RamDomain> args, ret;
subroutine_0(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_1(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_112(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_223(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_334(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_360(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_371(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_382(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_393(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_404(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_2(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_13(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_24(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_35(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_46(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_57(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_68(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_79(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_90(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_101(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_113(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_124(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_135(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_146(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_157(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_168(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_179(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_190(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_201(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_212(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_224(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_235(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_246(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_257(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_268(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_279(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_290(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_301(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_312(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_323(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_335(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_346(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_352(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_353(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_354(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_355(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_356(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_357(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_358(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_359(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_361(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_362(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_363(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_364(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_365(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_366(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_367(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_368(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_369(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_370(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_372(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_373(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_374(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_375(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_376(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_377(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_378(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_379(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_380(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_381(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_383(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_384(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_385(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_386(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_387(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_388(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_389(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_390(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_391(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_392(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_394(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_395(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_396(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_397(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_398(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_399(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_400(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_401(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_402(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_403(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_405(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_406(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_407(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_408(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_409(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_410(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_411(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_412(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_413(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_414(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_3(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_4(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_5(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_6(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_7(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_8(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_9(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_10(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_11(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_12(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_14(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_15(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_16(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_17(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_18(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_19(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_20(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_21(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_22(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_23(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_25(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_26(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_27(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_28(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_29(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_30(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_31(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_32(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_33(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_34(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_36(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_37(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_38(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_39(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_40(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_41(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_42(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_43(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_44(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_45(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_47(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_48(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_49(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_50(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_51(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_52(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_53(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_54(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_55(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_56(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_58(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_59(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_60(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_61(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_62(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_63(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_64(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_65(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_66(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_67(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_69(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_70(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_71(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_72(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_73(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_74(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_75(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_76(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_77(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_78(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_80(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_81(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_82(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_83(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_84(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_85(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_86(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_87(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_88(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_89(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_91(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_92(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_93(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_94(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_95(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_96(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_97(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_98(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_99(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_100(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_102(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_103(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_104(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_105(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_106(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_107(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_108(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_109(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_110(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_111(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_114(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_115(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_116(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_117(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_118(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_119(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_120(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_121(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_122(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_123(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_125(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_126(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_127(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_128(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_129(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_130(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_131(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_132(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_133(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_134(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_136(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_137(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_138(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_139(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_140(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_141(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_142(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_143(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_144(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_145(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_147(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_148(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_149(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_150(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_151(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_152(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_153(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_154(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_155(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_156(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_158(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_159(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_160(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_161(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_162(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_163(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_164(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_165(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_166(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_167(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_169(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_170(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_171(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_172(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_173(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_174(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_175(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_176(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_177(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_178(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_180(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_181(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_182(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_183(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_184(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_185(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_186(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_187(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_188(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_189(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_191(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_192(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_193(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_194(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_195(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_196(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_197(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_198(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_199(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_200(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_202(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_203(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_204(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_205(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_206(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_207(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_208(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_209(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_210(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_211(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_213(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_214(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_215(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_216(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_217(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_218(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_219(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_220(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_221(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_222(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_225(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_226(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_227(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_228(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_229(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_230(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_231(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_232(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_233(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_234(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_236(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_237(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_238(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_239(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_240(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_241(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_242(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_243(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_244(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_245(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_247(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_248(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_249(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_250(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_251(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_252(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_253(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_254(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_255(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_256(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_258(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_259(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_260(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_261(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_262(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_263(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_264(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_265(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_266(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_267(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_269(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_270(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_271(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_272(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_273(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_274(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_275(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_276(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_277(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_278(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_280(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_281(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_282(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_283(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_284(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_285(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_286(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_287(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_288(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_289(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_291(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_292(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_293(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_294(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_295(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_296(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_297(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_298(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_299(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_300(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_302(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_303(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_304(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_305(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_306(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_307(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_308(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_309(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_310(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_311(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_313(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_314(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_315(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_316(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_317(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_318(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_319(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_320(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_321(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_322(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_324(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_325(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_326(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_327(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_328(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_329(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_330(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_331(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_332(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_333(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_336(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_337(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_338(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_339(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_340(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_341(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_342(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_343(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_344(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_345(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_347(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_348(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_349(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_350(args, ret);
}
{
 std::vector<RamDomain> args, ret;
subroutine_351(args, ret);
}

// -- relation hint statistics --
signalHandler->reset();
}
public:
void run() override { runFunction("", "", false, false); }
public:
void runAll(std::string inputDirectoryArg = "", std::string outputDirectoryArg = "", bool performIOArg=true, bool pruneImdtRelsArg=true) override { runFunction(inputDirectoryArg, outputDirectoryArg, performIOArg, pruneImdtRelsArg);
}
public:
void printAll(std::string outputDirectoryArg = "") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun\tblock"},{"auxArity","0"},{"name","inliner.Function_Exit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"fun\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_142_inliner_Function_Exit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunHasRetMismatch"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_143_inliner_FunHasRetMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tshiftedVar\tbytes"},{"auxArity","0"},{"name","LShiftBytes"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"shiftedVar\", \"bytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_204_LShiftBytes);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fromVar\ttoVar\tmaskLen"},{"auxArity","0"},{"name","LowBytesMaskOp"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fromVar\", \"toVar\", \"maskLen\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_206_LowBytesMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmload\tstoredVar\tupdateBytes"},{"auxArity","0"},{"name","PartialMSTORE"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"mload\", \"storedVar\", \"updateBytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_207_PartialMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tlenvar"},{"auxArity","0"},{"name","Analytics_LenVarHasManyVars"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"lenvar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_312_Analytics_LenVarHasManyVars);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","numOfMemConsStmts\thaveLengthInit\thaveLength"},{"auxArity","0"},{"name","Verbatim_MemConsStmtsLengths"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"numOfMemConsStmts\", \"haveLengthInit\", \"haveLength\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_314_Verbatim_MemConsStmtsLengths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tvalRep\trelativeLength"},{"auxArity","0"},{"name","StatementWritesMemoryOfConstantLengthAtMemAlias"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memWriteStmt\", \"valRep\", \"relativeLength\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memConsStmt\tstartVar\tapprox"},{"auxArity","0"},{"name","StatementUsesMemoryOfNonComputableLength_LengthApprox"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memConsStmt\", \"startVar\", \"approx\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInfoInit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_347_MemWriteToMemConsStmtInfoInit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInvalid"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_348_MemWriteToMemConsStmtInvalid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInfo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_349_MemWriteToMemConsStmtInfo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\tlowLimitByte"},{"auxArity","0"},{"name","MemWriteToMemConsStmtLowerLimit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"lowLimitByte\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_351_MemWriteToMemConsStmtLowerLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\tupLimitByte"},{"auxArity","0"},{"name","MemWriteToMemConsStmtUpperLimit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"upLimitByte\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_353_MemWriteToMemConsStmtUpperLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\trelativeIndex"},{"auxArity","0"},{"name","MemWriteToMemConsStmtPartOfPrev"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"relativeIndex\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_354_MemWriteToMemConsStmtPartOfPrev);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\trelativeIndex\tlowB\thighB"},{"auxArity","0"},{"name","MemWriteToMemConsStmtResolved"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"relativeIndex\", \"lowB\", \"highB\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_355_MemWriteToMemConsStmtResolved);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmemConsStmt\trelativeIndex\tvar"},{"auxArity","0"},{"name","MSTOREToMemConsStmtWritesShiftedVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"memConsStmt\", \"relativeIndex\", \"var\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_357_MSTOREToMemConsStmtWritesShiftedVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmemConsStmt\trelativeIndex\tvar"},{"auxArity","0"},{"name","MSTOREToMemConsStmt_WrittenVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"memConsStmt\", \"relativeIndex\", \"var\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_358_MSTOREToMemConsStmt_WrittenVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","CDArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"+:MemoryArgumentNew\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_367_CDArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tactual\tindex"},{"auxArity","0"},{"name","MemoryStatement_ActualArgNew"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"actual\", \"index\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"r:MemoryArgument\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_369_MemoryStatement_ActualArgNew);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","all"},{"auxArity","0"},{"name","AllCALLsClassified"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"all\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_387_AllCALLsClassified);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","pubFun\targ\tindex"},{"auxArity","0"},{"name","PublicFunctionArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"pubFun\", \"arg\", \"index\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_390_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","Analytics_PublicFunctionArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_391_Analytics_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","Analytics_PublicFunctionArrayArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_392_Analytics_PublicFunctionArrayArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","insn"},{"auxArity","0"},{"name","EcrecoverCompilerBug"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"insn\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_397_EcrecoverCompilerBug);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\tfun\tindex\tkind"},{"auxArity","0"},{"name","ArrayActualArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"caller\", \"fun\", \"index\", \"kind\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_442_ArrayActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","allnum\tstaticAddr\tarrGet"},{"auxArity","0"},{"name","Verbatim_CDLAllVSStaticVSArr"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"allnum\", \"staticAddr\", \"arrGet\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_468_Verbatim_CDLAllVSStaticVSArr);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","from"},{"auxArity","0"},{"name","assertVarIsArray.FromHasNoEdges"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"from\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_480_assertVarIsArray_FromHasNoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","from"},{"auxArity","0"},{"name","assertVarIsArray.FromHasTwoEdges"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"from\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_481_assertVarIsArray_FromHasTwoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arrayVar\tmstore\trelativeIndex"},{"auxArity","0"},{"name","ArrayWriteToRelativeIndex"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"arrayVar\", \"mstore\", \"relativeIndex\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Statement\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_482_ArrayWriteToRelativeIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","ArbitraryCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_491_ArbitraryCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\tfun\tindex\tkind"},{"auxArity","0"},{"name","ArrayDataActualArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"caller\", \"fun\", \"index\", \"kind\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_497_ArrayDataActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","ExternalCallTakesWholeCallData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_498_ExternalCallTakesWholeCallData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call\tsigText"},{"auxArity","0"},{"name","CallToSignatureFromSHA3"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"call\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_520_CallToSignatureFromSHA3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore"},{"auxArity","0"},{"name","Analytics_NonModeledMSTORE"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"mstore\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_526_Analytics_NonModeledMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","numOfMemStmts\tfreeptr\tstorei\tstore\tallocate\targ\tstructstore"},{"auxArity","0"},{"name","Verbatim_AllVsModeledMSTOREs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"numOfMemStmts\", \"freeptr\", \"storei\", \"store\", \"allocate\", \"arg\", \"structstore\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_530_Verbatim_AllVsModeledMSTOREs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memConsStmt"},{"auxArity","0"},{"name","Analytics_MemConsStmtUsesFromDistinctPaths"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"memConsStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_531_Analytics_MemConsStmtUsesFromDistinctPaths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mload"},{"auxArity","0"},{"name","Analytics_NonModeledMLOAD"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"mload\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_535_Analytics_NonModeledMLOAD);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mloads\tfreeptr\tretRead\tarrLen\tarrloadi\tarrload\tstructload"},{"auxArity","0"},{"name","Verbatim_AllVsModeledMLOADs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"mloads\", \"freeptr\", \"retRead\", \"arrLen\", \"arrloadi\", \"arrload\", \"structload\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_538_Verbatim_AllVsModeledMLOADs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call\tsigText"},{"auxArity","0"},{"name","CallToSignature"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"call\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_540_CallToSignature);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_CallWithSig"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_541_Analytics_CallWithSig);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20ApproveCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_543_Analytics_ERC20ApproveCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20TransferCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_545_Analytics_ERC20TransferCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20TransferFromCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_547_Analytics_ERC20TransferFromCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.InlineCandidate"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_555_inliner_InlineCandidate);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.SafelyInlinableFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_556_inliner_SafelyInlinableFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunctionToInline"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_558_inliner_FunctionToInline);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","NeedsMoreInlining"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_559_NeedsMoreInlining);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfromFun\tcallerBlock\tcallerFun\tnewBlock"},{"auxArity","0"},{"name","inliner.BlockToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"block\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_560_inliner_BlockToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tchunk"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block_CodeChunkAccessed.csv"},{"name","inliner.Out_Block_CodeChunkAccessed"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"chunk\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:Chunk\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_562_inliner_Out_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tgas"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block_Gas.csv"},{"name","inliner.Out_Block_Gas"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"gas\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_563_inliner_Out_Block_Gas);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionCall.csv"},{"name","inliner.Out_CallGraphEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_564_inliner_Out_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFallthroughEdge.csv"},{"name","inliner.Out_FallthroughEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_565_inliner_Out_FallthroughEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction\treturn"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionCallReturn.csv"},{"name","inliner.Out_FunctionCallReturn"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"block\", \"function\", \"return\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_566_inliner_Out_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"filename","LocalBlockEdge.csv"},{"name","inliner.Out_LocalBlockEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_567_inliner_Out_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tfromFun\tcallerBlock\tcallerFun\tnewStmt"},{"auxArity","0"},{"name","inliner.StatementToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"stmt\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_568_inliner_StatementToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Stmt.csv"},{"name","inliner.Out_IsStatement"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"stmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_570_inliner_Out_IsStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block.csv"},{"name","inliner.Out_Statement_Block"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_571_inliner_Out_Statement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tfromFun\tcallerBlock\tcallerFun\tnewVar"},{"auxArity","0"},{"name","inliner.VariableToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"var\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newVar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Variable\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_572_inliner_VariableToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionEntry.csv"},{"name","inliner.Out_FunctionEntry"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_573_inliner_Out_FunctionEntry);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"filename","InFunction.csv"},{"name","inliner.Out_InFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_574_inliner_Out_InFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun"},{"auxArity","0"},{"name","inliner.CallToClonedFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_575_inliner_CallToClonedFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun\tactualArg\tformalArg"},{"auxArity","0"},{"name","inliner.ClonedCallArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\", \"actualArg\", \"formalArg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Variable\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_576_inliner_ClonedCallArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun\tretStmt"},{"auxArity","0"},{"name","inliner.FunctionToInline_RetStmt"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"fun\", \"retStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_577_inliner_FunctionToInline_RetStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun\tretStmt\tactualRet\tformalRet"},{"auxArity","0"},{"name","inliner.ClonedCallRets"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\", \"retStmt\", \"actualRet\", \"formalRet\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Statement\", \"s:Variable\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_578_inliner_ClonedCallRets);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","inVar\tcallBlock\toutVar"},{"auxArity","0"},{"name","inliner.InVar_OutVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"inVar\", \"callBlock\", \"outVar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Block\", \"s:Variable\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_579_inliner_InVar_OutVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"filename","ActualReturnArgs.csv"},{"name","inliner.Out_ActualReturnArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"caller\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_582_inliner_Out_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\ti"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Use.csv"},{"name","inliner.Out_Statement_Uses"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"i\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_583_inliner_Out_Statement_Uses);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Variable_Value.csv"},{"name","inliner.Out_Variable_Value"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_584_inliner_Out_Variable_Value);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\tn"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Def.csv"},{"name","inliner.Out_Statement_Defines"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"n\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_585_inliner_Out_Statement_Defines);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tnext"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Statement_Next.csv"},{"name","inliner.Out_Statement_Next"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"next\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Statement\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_586_inliner_Out_Statement_Next);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\topcode"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Op.csv"},{"name","inliner.Out_Statement_Opcode"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"opcode\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Opcode\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_587_inliner_Out_Statement_Opcode);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fn\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"filename","FormalArgs.csv"},{"name","inliner.Out_FormalArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fn\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_588_inliner_Out_FormalArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func"},{"auxArity","0"},{"delimiter","\t"},{"filename","Function.csv"},{"name","inliner.Out_IsFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"func\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_589_inliner_Out_IsFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_OriginalStatement_Block.csv"},{"name","inliner.Out_OriginalStatement_Block"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"s:Block\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_591_inliner_Out_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","irstmt\tstmt"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Statement_OriginalStatement.csv"},{"name","inliner.Out_Statement_OriginalStatement"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"irstmt\", \"stmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_593_inliner_Out_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Variable_BlockValue.csv"},{"name","inliner.Out_Variable_BlockValue"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_595_inliner_Out_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fromVar\ttoVar\tbyteLow\tbyteHigh"},{"auxArity","0"},{"name","AntiMaskOp"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"fromVar\", \"toVar\", \"byteLow\", \"byteHigh\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_86_AntiMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunHasArgMismatch"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_113_inliner_FunHasArgMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectoryArg = "") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","LocalBlockEdge.csv"},{"name","LocalBlockEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_121_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << "Error loading LocalBlockEdge data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tnext"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Statement_Next.csv"},{"name","Statement_Next"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"next\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Statement\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_145_Statement_Next);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Next data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","ActualReturnArgs.csv"},{"name","ActualReturnArgs"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"caller\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_192_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << "Error loading ActualReturnArgs data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction\treturn"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionCallReturn.csv"},{"name","FunctionCallReturn"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"block\", \"function\", \"return\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_193_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << "Error loading FunctionCallReturn data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mask\tbytes"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","Mask_Length.csv"},{"name","Mask_Length"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"mask\", \"bytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Value\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_205_Mask_Length);
} catch (std::exception& e) {std::cerr << "Error loading Mask_Length data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_Value.csv"},{"name","Variable_Value"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_211_Variable_Value);
} catch (std::exception& e) {std::cerr << "Error loading Variable_Value data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\top"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Op.csv"},{"name","Statement_Opcode"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"op\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Opcode\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_2_Statement_Opcode);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Opcode data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\tn"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Def.csv"},{"name","Statement_Defines"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"n\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_1_Statement_Defines);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Defines data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\ti"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Use.csv"},{"name","Statement_Uses"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"i\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_7_Statement_Uses);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Uses data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_Value.csv"},{"name","BasicVariable_Value"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_13_BasicVariable_Value);
} catch (std::exception& e) {std::cerr << "Error loading BasicVariable_Value data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","constValSigHash\tnormalizedSigHash\tsigText"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","ConstantPossibleSigHash.csv"},{"name","ConstantPossibleSigHash"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"constValSigHash\", \"normalizedSigHash\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Value\", \"s:Value\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_539_ConstantPossibleSigHash);
} catch (std::exception& e) {std::cerr << "Error loading ConstantPossibleSigHash data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tchunk_id"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block_CodeChunkAccessed.csv"},{"name","Block_CodeChunkAccessed"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"chunk_id\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:Chunk\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_548_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << "Error loading Block_CodeChunkAccessed data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tgas"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block_Gas.csv"},{"name","Block_Gas"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"gas\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_549_Block_Gas);
} catch (std::exception& e) {std::cerr << "Error loading Block_Gas data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFallthroughEdge.csv"},{"name","FallthroughEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_550_FallthroughEdge);
} catch (std::exception& e) {std::cerr << "Error loading FallthroughEdge data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","Function.csv"},{"name","IsFunction"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"func\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_551_IsFunction);
} catch (std::exception& e) {std::cerr << "Error loading IsFunction data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func\tselector"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","PublicFunction.csv"},{"name","PublicFunctionSelector"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"func\", \"selector\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_553_PublicFunctionSelector);
} catch (std::exception& e) {std::cerr << "Error loading PublicFunctionSelector data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_OriginalStatement_Block.csv"},{"name","OriginalStatement_Block"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:OriginalStatement\", \"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_590_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << "Error loading OriginalStatement_Block data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\toriginalStatement"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Statement_OriginalStatement.csv"},{"name","Statement_OriginalStatement"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"originalStatement\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:OriginalStatement\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_592_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << "Error loading Statement_OriginalStatement data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_BlockValue.csv"},{"name","Variable_BlockValue"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_594_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << "Error loading Variable_BlockValue data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block.csv"},{"name","Statement_Block"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_99_Statement_Block);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Block data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionCall.csv"},{"name","CallGraphEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_110_CallGraphEdge);
} catch (std::exception& e) {std::cerr << "Error loading CallGraphEdge data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fn\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","FormalArgs.csv"},{"name","FormalArgs"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fn\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_111_FormalArgs);
} catch (std::exception& e) {std::cerr << "Error loading FormalArgs data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionEntry.csv"},{"name","FunctionEntry"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Block\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_114_FunctionEntry);
} catch (std::exception& e) {std::cerr << "Error loading FunctionEntry data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","InFunction.csv"},{"name","InFunction"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_115_InFunction);
} catch (std::exception& e) {std::cerr << "Error loading InFunction data: " << e.what() << '\n';}
}
public:
void dumpInputs() override {
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LocalBlockEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_121_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_Next";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_145_Statement_Next);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ActualReturnArgs";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_192_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FunctionCallReturn";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_193_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Mask_Length";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Value\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_205_Mask_Length);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Variable_Value";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Value\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_211_Variable_Value);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_Opcode";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Opcode\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_2_Statement_Opcode);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_Defines";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_1_Statement_Defines);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_Uses";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_7_Statement_Uses);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "BasicVariable_Value";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Value\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_13_BasicVariable_Value);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ConstantPossibleSigHash";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Value\", \"s:Value\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_539_ConstantPossibleSigHash);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Block_CodeChunkAccessed";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"i:Chunk\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_548_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Block_Gas";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_549_Block_Gas);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FallthroughEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_550_FallthroughEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "IsFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_551_IsFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "PublicFunctionSelector";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_553_PublicFunctionSelector);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "OriginalStatement_Block";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:OriginalStatement\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_590_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_OriginalStatement";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:OriginalStatement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_592_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Variable_BlockValue";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Value\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_594_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Statement_Block";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_99_Statement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "CallGraphEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_110_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FormalArgs";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_111_FormalArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FunctionEntry";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_114_FunctionEntry);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "InFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_115_InFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs() override {
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Function_Exit";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_142_inliner_Function_Exit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.FunHasRetMismatch";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_143_inliner_FunHasRetMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LShiftBytes";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_204_LShiftBytes);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LowBytesMaskOp";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_206_LowBytesMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "PartialMSTORE";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_207_PartialMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_LenVarHasManyVars";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_312_Analytics_LenVarHasManyVars);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Verbatim_MemConsStmtsLengths";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_314_Verbatim_MemConsStmtsLengths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StatementWritesMemoryOfConstantLengthAtMemAlias";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:symbol\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StatementUsesMemoryOfNonComputableLength_LengthApprox";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtInfoInit";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_347_MemWriteToMemConsStmtInfoInit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtInvalid";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_348_MemWriteToMemConsStmtInvalid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtInfo";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_349_MemWriteToMemConsStmtInfo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtLowerLimit";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_351_MemWriteToMemConsStmtLowerLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtUpperLimit";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_353_MemWriteToMemConsStmtUpperLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtPartOfPrev";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_354_MemWriteToMemConsStmtPartOfPrev);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemWriteToMemConsStmtResolved";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_355_MemWriteToMemConsStmtResolved);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MSTOREToMemConsStmtWritesShiftedVar";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_357_MSTOREToMemConsStmtWritesShiftedVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MSTOREToMemConsStmt_WrittenVar";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_358_MSTOREToMemConsStmt_WrittenVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "CDArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"+:MemoryArgumentNew\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_367_CDArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MemoryStatement_ActualArgNew";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"r:MemoryArgument\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_369_MemoryStatement_ActualArgNew);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AllCALLsClassified";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_387_AllCALLsClassified);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "PublicFunctionArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_390_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_PublicFunctionArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_391_Analytics_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_PublicFunctionArrayArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_392_Analytics_PublicFunctionArrayArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "EcrecoverCompilerBug";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_397_EcrecoverCompilerBug);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ArrayActualArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_442_ArrayActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Verbatim_CDLAllVSStaticVSArr";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_468_Verbatim_CDLAllVSStaticVSArr);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "assertVarIsArray.FromHasNoEdges";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_480_assertVarIsArray_FromHasNoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "assertVarIsArray.FromHasTwoEdges";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_481_assertVarIsArray_FromHasTwoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ArrayWriteToRelativeIndex";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Statement\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_482_ArrayWriteToRelativeIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ArbitraryCall";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_491_ArbitraryCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ArrayDataActualArg";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_497_ArrayDataActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ExternalCallTakesWholeCallData";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_498_ExternalCallTakesWholeCallData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "CallToSignatureFromSHA3";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_520_CallToSignatureFromSHA3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_NonModeledMSTORE";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_526_Analytics_NonModeledMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Verbatim_AllVsModeledMSTOREs";
rwOperation["types"] = "{\"relation\": {\"arity\": 7, \"auxArity\": 0, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_530_Verbatim_AllVsModeledMSTOREs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_MemConsStmtUsesFromDistinctPaths";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_531_Analytics_MemConsStmtUsesFromDistinctPaths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_NonModeledMLOAD";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_535_Analytics_NonModeledMLOAD);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Verbatim_AllVsModeledMLOADs";
rwOperation["types"] = "{\"relation\": {\"arity\": 7, \"auxArity\": 0, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_538_Verbatim_AllVsModeledMLOADs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "CallToSignature";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_540_CallToSignature);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_CallWithSig";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_541_Analytics_CallWithSig);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_ERC20ApproveCall";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_543_Analytics_ERC20ApproveCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_ERC20TransferCall";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_545_Analytics_ERC20TransferCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Analytics_ERC20TransferFromCall";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_547_Analytics_ERC20TransferFromCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.InlineCandidate";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_555_inliner_InlineCandidate);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.SafelyInlinableFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_556_inliner_SafelyInlinableFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.FunctionToInline";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_558_inliner_FunctionToInline);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "NeedsMoreInlining";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_559_NeedsMoreInlining);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.BlockToClone";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_560_inliner_BlockToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Block_CodeChunkAccessed";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"i:Chunk\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_562_inliner_Out_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Block_Gas";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_563_inliner_Out_Block_Gas);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_CallGraphEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_564_inliner_Out_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_FallthroughEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_565_inliner_Out_FallthroughEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_FunctionCallReturn";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_566_inliner_Out_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_LocalBlockEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_567_inliner_Out_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.StatementToClone";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_568_inliner_StatementToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_IsStatement";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_570_inliner_Out_IsStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_Block";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_571_inliner_Out_Statement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.VariableToClone";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_572_inliner_VariableToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_FunctionEntry";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_573_inliner_Out_FunctionEntry);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_InFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_574_inliner_Out_InFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.CallToClonedFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_575_inliner_CallToClonedFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.ClonedCallArgs";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Variable\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_576_inliner_ClonedCallArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.FunctionToInline_RetStmt";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_577_inliner_FunctionToInline_RetStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.ClonedCallRets";
rwOperation["types"] = "{\"relation\": {\"arity\": 6, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Statement\", \"s:Variable\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_578_inliner_ClonedCallRets);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.InVar_OutVar";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Block\", \"s:Variable\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_579_inliner_InVar_OutVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_ActualReturnArgs";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_582_inliner_Out_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_Uses";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_583_inliner_Out_Statement_Uses);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Variable_Value";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Value\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_584_inliner_Out_Variable_Value);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_Defines";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_585_inliner_Out_Statement_Defines);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_Next";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Statement\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_586_inliner_Out_Statement_Next);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_Opcode";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:Opcode\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_587_inliner_Out_Statement_Opcode);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_FormalArgs";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_588_inliner_Out_FormalArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_IsFunction";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_589_inliner_Out_IsFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_OriginalStatement_Block";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:symbol\", \"s:Block\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_591_inliner_Out_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Statement_OriginalStatement";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Statement\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_593_inliner_Out_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.Out_Variable_BlockValue";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Value\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_595_inliner_Out_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AntiMaskOp";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_86_AntiMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "inliner.FunHasArgMismatch";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Function\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_113_inliner_FunHasArgMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
SymbolTable& getSymbolTable() override {
return symTable;
}
RecordTable& getRecordTable() override {
return recordTable;
}
void setNumThreads(std::size_t numThreadsValue) override {
SouffleProgram::setNumThreads(numThreadsValue);
symTable.setNumLanes(getNumThreads());
recordTable.setNumLanes(getNumThreads());
}
void executeSubroutine(std::string name, const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) override {
if (name == "stratum_0") {
subroutine_0(args, ret);
return;}
if (name == "stratum_1") {
subroutine_1(args, ret);
return;}
if (name == "stratum_10") {
subroutine_2(args, ret);
return;}
if (name == "stratum_100") {
subroutine_3(args, ret);
return;}
if (name == "stratum_101") {
subroutine_4(args, ret);
return;}
if (name == "stratum_102") {
subroutine_5(args, ret);
return;}
if (name == "stratum_103") {
subroutine_6(args, ret);
return;}
if (name == "stratum_104") {
subroutine_7(args, ret);
return;}
if (name == "stratum_105") {
subroutine_8(args, ret);
return;}
if (name == "stratum_106") {
subroutine_9(args, ret);
return;}
if (name == "stratum_107") {
subroutine_10(args, ret);
return;}
if (name == "stratum_108") {
subroutine_11(args, ret);
return;}
if (name == "stratum_109") {
subroutine_12(args, ret);
return;}
if (name == "stratum_11") {
subroutine_13(args, ret);
return;}
if (name == "stratum_110") {
subroutine_14(args, ret);
return;}
if (name == "stratum_111") {
subroutine_15(args, ret);
return;}
if (name == "stratum_112") {
subroutine_16(args, ret);
return;}
if (name == "stratum_113") {
subroutine_17(args, ret);
return;}
if (name == "stratum_114") {
subroutine_18(args, ret);
return;}
if (name == "stratum_115") {
subroutine_19(args, ret);
return;}
if (name == "stratum_116") {
subroutine_20(args, ret);
return;}
if (name == "stratum_117") {
subroutine_21(args, ret);
return;}
if (name == "stratum_118") {
subroutine_22(args, ret);
return;}
if (name == "stratum_119") {
subroutine_23(args, ret);
return;}
if (name == "stratum_12") {
subroutine_24(args, ret);
return;}
if (name == "stratum_120") {
subroutine_25(args, ret);
return;}
if (name == "stratum_121") {
subroutine_26(args, ret);
return;}
if (name == "stratum_122") {
subroutine_27(args, ret);
return;}
if (name == "stratum_123") {
subroutine_28(args, ret);
return;}
if (name == "stratum_124") {
subroutine_29(args, ret);
return;}
if (name == "stratum_125") {
subroutine_30(args, ret);
return;}
if (name == "stratum_126") {
subroutine_31(args, ret);
return;}
if (name == "stratum_127") {
subroutine_32(args, ret);
return;}
if (name == "stratum_128") {
subroutine_33(args, ret);
return;}
if (name == "stratum_129") {
subroutine_34(args, ret);
return;}
if (name == "stratum_13") {
subroutine_35(args, ret);
return;}
if (name == "stratum_130") {
subroutine_36(args, ret);
return;}
if (name == "stratum_131") {
subroutine_37(args, ret);
return;}
if (name == "stratum_132") {
subroutine_38(args, ret);
return;}
if (name == "stratum_133") {
subroutine_39(args, ret);
return;}
if (name == "stratum_134") {
subroutine_40(args, ret);
return;}
if (name == "stratum_135") {
subroutine_41(args, ret);
return;}
if (name == "stratum_136") {
subroutine_42(args, ret);
return;}
if (name == "stratum_137") {
subroutine_43(args, ret);
return;}
if (name == "stratum_138") {
subroutine_44(args, ret);
return;}
if (name == "stratum_139") {
subroutine_45(args, ret);
return;}
if (name == "stratum_14") {
subroutine_46(args, ret);
return;}
if (name == "stratum_140") {
subroutine_47(args, ret);
return;}
if (name == "stratum_141") {
subroutine_48(args, ret);
return;}
if (name == "stratum_142") {
subroutine_49(args, ret);
return;}
if (name == "stratum_143") {
subroutine_50(args, ret);
return;}
if (name == "stratum_144") {
subroutine_51(args, ret);
return;}
if (name == "stratum_145") {
subroutine_52(args, ret);
return;}
if (name == "stratum_146") {
subroutine_53(args, ret);
return;}
if (name == "stratum_147") {
subroutine_54(args, ret);
return;}
if (name == "stratum_148") {
subroutine_55(args, ret);
return;}
if (name == "stratum_149") {
subroutine_56(args, ret);
return;}
if (name == "stratum_15") {
subroutine_57(args, ret);
return;}
if (name == "stratum_150") {
subroutine_58(args, ret);
return;}
if (name == "stratum_151") {
subroutine_59(args, ret);
return;}
if (name == "stratum_152") {
subroutine_60(args, ret);
return;}
if (name == "stratum_153") {
subroutine_61(args, ret);
return;}
if (name == "stratum_154") {
subroutine_62(args, ret);
return;}
if (name == "stratum_155") {
subroutine_63(args, ret);
return;}
if (name == "stratum_156") {
subroutine_64(args, ret);
return;}
if (name == "stratum_157") {
subroutine_65(args, ret);
return;}
if (name == "stratum_158") {
subroutine_66(args, ret);
return;}
if (name == "stratum_159") {
subroutine_67(args, ret);
return;}
if (name == "stratum_16") {
subroutine_68(args, ret);
return;}
if (name == "stratum_160") {
subroutine_69(args, ret);
return;}
if (name == "stratum_161") {
subroutine_70(args, ret);
return;}
if (name == "stratum_162") {
subroutine_71(args, ret);
return;}
if (name == "stratum_163") {
subroutine_72(args, ret);
return;}
if (name == "stratum_164") {
subroutine_73(args, ret);
return;}
if (name == "stratum_165") {
subroutine_74(args, ret);
return;}
if (name == "stratum_166") {
subroutine_75(args, ret);
return;}
if (name == "stratum_167") {
subroutine_76(args, ret);
return;}
if (name == "stratum_168") {
subroutine_77(args, ret);
return;}
if (name == "stratum_169") {
subroutine_78(args, ret);
return;}
if (name == "stratum_17") {
subroutine_79(args, ret);
return;}
if (name == "stratum_170") {
subroutine_80(args, ret);
return;}
if (name == "stratum_171") {
subroutine_81(args, ret);
return;}
if (name == "stratum_172") {
subroutine_82(args, ret);
return;}
if (name == "stratum_173") {
subroutine_83(args, ret);
return;}
if (name == "stratum_174") {
subroutine_84(args, ret);
return;}
if (name == "stratum_175") {
subroutine_85(args, ret);
return;}
if (name == "stratum_176") {
subroutine_86(args, ret);
return;}
if (name == "stratum_177") {
subroutine_87(args, ret);
return;}
if (name == "stratum_178") {
subroutine_88(args, ret);
return;}
if (name == "stratum_179") {
subroutine_89(args, ret);
return;}
if (name == "stratum_18") {
subroutine_90(args, ret);
return;}
if (name == "stratum_180") {
subroutine_91(args, ret);
return;}
if (name == "stratum_181") {
subroutine_92(args, ret);
return;}
if (name == "stratum_182") {
subroutine_93(args, ret);
return;}
if (name == "stratum_183") {
subroutine_94(args, ret);
return;}
if (name == "stratum_184") {
subroutine_95(args, ret);
return;}
if (name == "stratum_185") {
subroutine_96(args, ret);
return;}
if (name == "stratum_186") {
subroutine_97(args, ret);
return;}
if (name == "stratum_187") {
subroutine_98(args, ret);
return;}
if (name == "stratum_188") {
subroutine_99(args, ret);
return;}
if (name == "stratum_189") {
subroutine_100(args, ret);
return;}
if (name == "stratum_19") {
subroutine_101(args, ret);
return;}
if (name == "stratum_190") {
subroutine_102(args, ret);
return;}
if (name == "stratum_191") {
subroutine_103(args, ret);
return;}
if (name == "stratum_192") {
subroutine_104(args, ret);
return;}
if (name == "stratum_193") {
subroutine_105(args, ret);
return;}
if (name == "stratum_194") {
subroutine_106(args, ret);
return;}
if (name == "stratum_195") {
subroutine_107(args, ret);
return;}
if (name == "stratum_196") {
subroutine_108(args, ret);
return;}
if (name == "stratum_197") {
subroutine_109(args, ret);
return;}
if (name == "stratum_198") {
subroutine_110(args, ret);
return;}
if (name == "stratum_199") {
subroutine_111(args, ret);
return;}
if (name == "stratum_2") {
subroutine_112(args, ret);
return;}
if (name == "stratum_20") {
subroutine_113(args, ret);
return;}
if (name == "stratum_200") {
subroutine_114(args, ret);
return;}
if (name == "stratum_201") {
subroutine_115(args, ret);
return;}
if (name == "stratum_202") {
subroutine_116(args, ret);
return;}
if (name == "stratum_203") {
subroutine_117(args, ret);
return;}
if (name == "stratum_204") {
subroutine_118(args, ret);
return;}
if (name == "stratum_205") {
subroutine_119(args, ret);
return;}
if (name == "stratum_206") {
subroutine_120(args, ret);
return;}
if (name == "stratum_207") {
subroutine_121(args, ret);
return;}
if (name == "stratum_208") {
subroutine_122(args, ret);
return;}
if (name == "stratum_209") {
subroutine_123(args, ret);
return;}
if (name == "stratum_21") {
subroutine_124(args, ret);
return;}
if (name == "stratum_210") {
subroutine_125(args, ret);
return;}
if (name == "stratum_211") {
subroutine_126(args, ret);
return;}
if (name == "stratum_212") {
subroutine_127(args, ret);
return;}
if (name == "stratum_213") {
subroutine_128(args, ret);
return;}
if (name == "stratum_214") {
subroutine_129(args, ret);
return;}
if (name == "stratum_215") {
subroutine_130(args, ret);
return;}
if (name == "stratum_216") {
subroutine_131(args, ret);
return;}
if (name == "stratum_217") {
subroutine_132(args, ret);
return;}
if (name == "stratum_218") {
subroutine_133(args, ret);
return;}
if (name == "stratum_219") {
subroutine_134(args, ret);
return;}
if (name == "stratum_22") {
subroutine_135(args, ret);
return;}
if (name == "stratum_220") {
subroutine_136(args, ret);
return;}
if (name == "stratum_221") {
subroutine_137(args, ret);
return;}
if (name == "stratum_222") {
subroutine_138(args, ret);
return;}
if (name == "stratum_223") {
subroutine_139(args, ret);
return;}
if (name == "stratum_224") {
subroutine_140(args, ret);
return;}
if (name == "stratum_225") {
subroutine_141(args, ret);
return;}
if (name == "stratum_226") {
subroutine_142(args, ret);
return;}
if (name == "stratum_227") {
subroutine_143(args, ret);
return;}
if (name == "stratum_228") {
subroutine_144(args, ret);
return;}
if (name == "stratum_229") {
subroutine_145(args, ret);
return;}
if (name == "stratum_23") {
subroutine_146(args, ret);
return;}
if (name == "stratum_230") {
subroutine_147(args, ret);
return;}
if (name == "stratum_231") {
subroutine_148(args, ret);
return;}
if (name == "stratum_232") {
subroutine_149(args, ret);
return;}
if (name == "stratum_233") {
subroutine_150(args, ret);
return;}
if (name == "stratum_234") {
subroutine_151(args, ret);
return;}
if (name == "stratum_235") {
subroutine_152(args, ret);
return;}
if (name == "stratum_236") {
subroutine_153(args, ret);
return;}
if (name == "stratum_237") {
subroutine_154(args, ret);
return;}
if (name == "stratum_238") {
subroutine_155(args, ret);
return;}
if (name == "stratum_239") {
subroutine_156(args, ret);
return;}
if (name == "stratum_24") {
subroutine_157(args, ret);
return;}
if (name == "stratum_240") {
subroutine_158(args, ret);
return;}
if (name == "stratum_241") {
subroutine_159(args, ret);
return;}
if (name == "stratum_242") {
subroutine_160(args, ret);
return;}
if (name == "stratum_243") {
subroutine_161(args, ret);
return;}
if (name == "stratum_244") {
subroutine_162(args, ret);
return;}
if (name == "stratum_245") {
subroutine_163(args, ret);
return;}
if (name == "stratum_246") {
subroutine_164(args, ret);
return;}
if (name == "stratum_247") {
subroutine_165(args, ret);
return;}
if (name == "stratum_248") {
subroutine_166(args, ret);
return;}
if (name == "stratum_249") {
subroutine_167(args, ret);
return;}
if (name == "stratum_25") {
subroutine_168(args, ret);
return;}
if (name == "stratum_250") {
subroutine_169(args, ret);
return;}
if (name == "stratum_251") {
subroutine_170(args, ret);
return;}
if (name == "stratum_252") {
subroutine_171(args, ret);
return;}
if (name == "stratum_253") {
subroutine_172(args, ret);
return;}
if (name == "stratum_254") {
subroutine_173(args, ret);
return;}
if (name == "stratum_255") {
subroutine_174(args, ret);
return;}
if (name == "stratum_256") {
subroutine_175(args, ret);
return;}
if (name == "stratum_257") {
subroutine_176(args, ret);
return;}
if (name == "stratum_258") {
subroutine_177(args, ret);
return;}
if (name == "stratum_259") {
subroutine_178(args, ret);
return;}
if (name == "stratum_26") {
subroutine_179(args, ret);
return;}
if (name == "stratum_260") {
subroutine_180(args, ret);
return;}
if (name == "stratum_261") {
subroutine_181(args, ret);
return;}
if (name == "stratum_262") {
subroutine_182(args, ret);
return;}
if (name == "stratum_263") {
subroutine_183(args, ret);
return;}
if (name == "stratum_264") {
subroutine_184(args, ret);
return;}
if (name == "stratum_265") {
subroutine_185(args, ret);
return;}
if (name == "stratum_266") {
subroutine_186(args, ret);
return;}
if (name == "stratum_267") {
subroutine_187(args, ret);
return;}
if (name == "stratum_268") {
subroutine_188(args, ret);
return;}
if (name == "stratum_269") {
subroutine_189(args, ret);
return;}
if (name == "stratum_27") {
subroutine_190(args, ret);
return;}
if (name == "stratum_270") {
subroutine_191(args, ret);
return;}
if (name == "stratum_271") {
subroutine_192(args, ret);
return;}
if (name == "stratum_272") {
subroutine_193(args, ret);
return;}
if (name == "stratum_273") {
subroutine_194(args, ret);
return;}
if (name == "stratum_274") {
subroutine_195(args, ret);
return;}
if (name == "stratum_275") {
subroutine_196(args, ret);
return;}
if (name == "stratum_276") {
subroutine_197(args, ret);
return;}
if (name == "stratum_277") {
subroutine_198(args, ret);
return;}
if (name == "stratum_278") {
subroutine_199(args, ret);
return;}
if (name == "stratum_279") {
subroutine_200(args, ret);
return;}
if (name == "stratum_28") {
subroutine_201(args, ret);
return;}
if (name == "stratum_280") {
subroutine_202(args, ret);
return;}
if (name == "stratum_281") {
subroutine_203(args, ret);
return;}
if (name == "stratum_282") {
subroutine_204(args, ret);
return;}
if (name == "stratum_283") {
subroutine_205(args, ret);
return;}
if (name == "stratum_284") {
subroutine_206(args, ret);
return;}
if (name == "stratum_285") {
subroutine_207(args, ret);
return;}
if (name == "stratum_286") {
subroutine_208(args, ret);
return;}
if (name == "stratum_287") {
subroutine_209(args, ret);
return;}
if (name == "stratum_288") {
subroutine_210(args, ret);
return;}
if (name == "stratum_289") {
subroutine_211(args, ret);
return;}
if (name == "stratum_29") {
subroutine_212(args, ret);
return;}
if (name == "stratum_290") {
subroutine_213(args, ret);
return;}
if (name == "stratum_291") {
subroutine_214(args, ret);
return;}
if (name == "stratum_292") {
subroutine_215(args, ret);
return;}
if (name == "stratum_293") {
subroutine_216(args, ret);
return;}
if (name == "stratum_294") {
subroutine_217(args, ret);
return;}
if (name == "stratum_295") {
subroutine_218(args, ret);
return;}
if (name == "stratum_296") {
subroutine_219(args, ret);
return;}
if (name == "stratum_297") {
subroutine_220(args, ret);
return;}
if (name == "stratum_298") {
subroutine_221(args, ret);
return;}
if (name == "stratum_299") {
subroutine_222(args, ret);
return;}
if (name == "stratum_3") {
subroutine_223(args, ret);
return;}
if (name == "stratum_30") {
subroutine_224(args, ret);
return;}
if (name == "stratum_300") {
subroutine_225(args, ret);
return;}
if (name == "stratum_301") {
subroutine_226(args, ret);
return;}
if (name == "stratum_302") {
subroutine_227(args, ret);
return;}
if (name == "stratum_303") {
subroutine_228(args, ret);
return;}
if (name == "stratum_304") {
subroutine_229(args, ret);
return;}
if (name == "stratum_305") {
subroutine_230(args, ret);
return;}
if (name == "stratum_306") {
subroutine_231(args, ret);
return;}
if (name == "stratum_307") {
subroutine_232(args, ret);
return;}
if (name == "stratum_308") {
subroutine_233(args, ret);
return;}
if (name == "stratum_309") {
subroutine_234(args, ret);
return;}
if (name == "stratum_31") {
subroutine_235(args, ret);
return;}
if (name == "stratum_310") {
subroutine_236(args, ret);
return;}
if (name == "stratum_311") {
subroutine_237(args, ret);
return;}
if (name == "stratum_312") {
subroutine_238(args, ret);
return;}
if (name == "stratum_313") {
subroutine_239(args, ret);
return;}
if (name == "stratum_314") {
subroutine_240(args, ret);
return;}
if (name == "stratum_315") {
subroutine_241(args, ret);
return;}
if (name == "stratum_316") {
subroutine_242(args, ret);
return;}
if (name == "stratum_317") {
subroutine_243(args, ret);
return;}
if (name == "stratum_318") {
subroutine_244(args, ret);
return;}
if (name == "stratum_319") {
subroutine_245(args, ret);
return;}
if (name == "stratum_32") {
subroutine_246(args, ret);
return;}
if (name == "stratum_320") {
subroutine_247(args, ret);
return;}
if (name == "stratum_321") {
subroutine_248(args, ret);
return;}
if (name == "stratum_322") {
subroutine_249(args, ret);
return;}
if (name == "stratum_323") {
subroutine_250(args, ret);
return;}
if (name == "stratum_324") {
subroutine_251(args, ret);
return;}
if (name == "stratum_325") {
subroutine_252(args, ret);
return;}
if (name == "stratum_326") {
subroutine_253(args, ret);
return;}
if (name == "stratum_327") {
subroutine_254(args, ret);
return;}
if (name == "stratum_328") {
subroutine_255(args, ret);
return;}
if (name == "stratum_329") {
subroutine_256(args, ret);
return;}
if (name == "stratum_33") {
subroutine_257(args, ret);
return;}
if (name == "stratum_330") {
subroutine_258(args, ret);
return;}
if (name == "stratum_331") {
subroutine_259(args, ret);
return;}
if (name == "stratum_332") {
subroutine_260(args, ret);
return;}
if (name == "stratum_333") {
subroutine_261(args, ret);
return;}
if (name == "stratum_334") {
subroutine_262(args, ret);
return;}
if (name == "stratum_335") {
subroutine_263(args, ret);
return;}
if (name == "stratum_336") {
subroutine_264(args, ret);
return;}
if (name == "stratum_337") {
subroutine_265(args, ret);
return;}
if (name == "stratum_338") {
subroutine_266(args, ret);
return;}
if (name == "stratum_339") {
subroutine_267(args, ret);
return;}
if (name == "stratum_34") {
subroutine_268(args, ret);
return;}
if (name == "stratum_340") {
subroutine_269(args, ret);
return;}
if (name == "stratum_341") {
subroutine_270(args, ret);
return;}
if (name == "stratum_342") {
subroutine_271(args, ret);
return;}
if (name == "stratum_343") {
subroutine_272(args, ret);
return;}
if (name == "stratum_344") {
subroutine_273(args, ret);
return;}
if (name == "stratum_345") {
subroutine_274(args, ret);
return;}
if (name == "stratum_346") {
subroutine_275(args, ret);
return;}
if (name == "stratum_347") {
subroutine_276(args, ret);
return;}
if (name == "stratum_348") {
subroutine_277(args, ret);
return;}
if (name == "stratum_349") {
subroutine_278(args, ret);
return;}
if (name == "stratum_35") {
subroutine_279(args, ret);
return;}
if (name == "stratum_350") {
subroutine_280(args, ret);
return;}
if (name == "stratum_351") {
subroutine_281(args, ret);
return;}
if (name == "stratum_352") {
subroutine_282(args, ret);
return;}
if (name == "stratum_353") {
subroutine_283(args, ret);
return;}
if (name == "stratum_354") {
subroutine_284(args, ret);
return;}
if (name == "stratum_355") {
subroutine_285(args, ret);
return;}
if (name == "stratum_356") {
subroutine_286(args, ret);
return;}
if (name == "stratum_357") {
subroutine_287(args, ret);
return;}
if (name == "stratum_358") {
subroutine_288(args, ret);
return;}
if (name == "stratum_359") {
subroutine_289(args, ret);
return;}
if (name == "stratum_36") {
subroutine_290(args, ret);
return;}
if (name == "stratum_360") {
subroutine_291(args, ret);
return;}
if (name == "stratum_361") {
subroutine_292(args, ret);
return;}
if (name == "stratum_362") {
subroutine_293(args, ret);
return;}
if (name == "stratum_363") {
subroutine_294(args, ret);
return;}
if (name == "stratum_364") {
subroutine_295(args, ret);
return;}
if (name == "stratum_365") {
subroutine_296(args, ret);
return;}
if (name == "stratum_366") {
subroutine_297(args, ret);
return;}
if (name == "stratum_367") {
subroutine_298(args, ret);
return;}
if (name == "stratum_368") {
subroutine_299(args, ret);
return;}
if (name == "stratum_369") {
subroutine_300(args, ret);
return;}
if (name == "stratum_37") {
subroutine_301(args, ret);
return;}
if (name == "stratum_370") {
subroutine_302(args, ret);
return;}
if (name == "stratum_371") {
subroutine_303(args, ret);
return;}
if (name == "stratum_372") {
subroutine_304(args, ret);
return;}
if (name == "stratum_373") {
subroutine_305(args, ret);
return;}
if (name == "stratum_374") {
subroutine_306(args, ret);
return;}
if (name == "stratum_375") {
subroutine_307(args, ret);
return;}
if (name == "stratum_376") {
subroutine_308(args, ret);
return;}
if (name == "stratum_377") {
subroutine_309(args, ret);
return;}
if (name == "stratum_378") {
subroutine_310(args, ret);
return;}
if (name == "stratum_379") {
subroutine_311(args, ret);
return;}
if (name == "stratum_38") {
subroutine_312(args, ret);
return;}
if (name == "stratum_380") {
subroutine_313(args, ret);
return;}
if (name == "stratum_381") {
subroutine_314(args, ret);
return;}
if (name == "stratum_382") {
subroutine_315(args, ret);
return;}
if (name == "stratum_383") {
subroutine_316(args, ret);
return;}
if (name == "stratum_384") {
subroutine_317(args, ret);
return;}
if (name == "stratum_385") {
subroutine_318(args, ret);
return;}
if (name == "stratum_386") {
subroutine_319(args, ret);
return;}
if (name == "stratum_387") {
subroutine_320(args, ret);
return;}
if (name == "stratum_388") {
subroutine_321(args, ret);
return;}
if (name == "stratum_389") {
subroutine_322(args, ret);
return;}
if (name == "stratum_39") {
subroutine_323(args, ret);
return;}
if (name == "stratum_390") {
subroutine_324(args, ret);
return;}
if (name == "stratum_391") {
subroutine_325(args, ret);
return;}
if (name == "stratum_392") {
subroutine_326(args, ret);
return;}
if (name == "stratum_393") {
subroutine_327(args, ret);
return;}
if (name == "stratum_394") {
subroutine_328(args, ret);
return;}
if (name == "stratum_395") {
subroutine_329(args, ret);
return;}
if (name == "stratum_396") {
subroutine_330(args, ret);
return;}
if (name == "stratum_397") {
subroutine_331(args, ret);
return;}
if (name == "stratum_398") {
subroutine_332(args, ret);
return;}
if (name == "stratum_399") {
subroutine_333(args, ret);
return;}
if (name == "stratum_4") {
subroutine_334(args, ret);
return;}
if (name == "stratum_40") {
subroutine_335(args, ret);
return;}
if (name == "stratum_400") {
subroutine_336(args, ret);
return;}
if (name == "stratum_401") {
subroutine_337(args, ret);
return;}
if (name == "stratum_402") {
subroutine_338(args, ret);
return;}
if (name == "stratum_403") {
subroutine_339(args, ret);
return;}
if (name == "stratum_404") {
subroutine_340(args, ret);
return;}
if (name == "stratum_405") {
subroutine_341(args, ret);
return;}
if (name == "stratum_406") {
subroutine_342(args, ret);
return;}
if (name == "stratum_407") {
subroutine_343(args, ret);
return;}
if (name == "stratum_408") {
subroutine_344(args, ret);
return;}
if (name == "stratum_409") {
subroutine_345(args, ret);
return;}
if (name == "stratum_41") {
subroutine_346(args, ret);
return;}
if (name == "stratum_410") {
subroutine_347(args, ret);
return;}
if (name == "stratum_411") {
subroutine_348(args, ret);
return;}
if (name == "stratum_412") {
subroutine_349(args, ret);
return;}
if (name == "stratum_413") {
subroutine_350(args, ret);
return;}
if (name == "stratum_414") {
subroutine_351(args, ret);
return;}
if (name == "stratum_42") {
subroutine_352(args, ret);
return;}
if (name == "stratum_43") {
subroutine_353(args, ret);
return;}
if (name == "stratum_44") {
subroutine_354(args, ret);
return;}
if (name == "stratum_45") {
subroutine_355(args, ret);
return;}
if (name == "stratum_46") {
subroutine_356(args, ret);
return;}
if (name == "stratum_47") {
subroutine_357(args, ret);
return;}
if (name == "stratum_48") {
subroutine_358(args, ret);
return;}
if (name == "stratum_49") {
subroutine_359(args, ret);
return;}
if (name == "stratum_5") {
subroutine_360(args, ret);
return;}
if (name == "stratum_50") {
subroutine_361(args, ret);
return;}
if (name == "stratum_51") {
subroutine_362(args, ret);
return;}
if (name == "stratum_52") {
subroutine_363(args, ret);
return;}
if (name == "stratum_53") {
subroutine_364(args, ret);
return;}
if (name == "stratum_54") {
subroutine_365(args, ret);
return;}
if (name == "stratum_55") {
subroutine_366(args, ret);
return;}
if (name == "stratum_56") {
subroutine_367(args, ret);
return;}
if (name == "stratum_57") {
subroutine_368(args, ret);
return;}
if (name == "stratum_58") {
subroutine_369(args, ret);
return;}
if (name == "stratum_59") {
subroutine_370(args, ret);
return;}
if (name == "stratum_6") {
subroutine_371(args, ret);
return;}
if (name == "stratum_60") {
subroutine_372(args, ret);
return;}
if (name == "stratum_61") {
subroutine_373(args, ret);
return;}
if (name == "stratum_62") {
subroutine_374(args, ret);
return;}
if (name == "stratum_63") {
subroutine_375(args, ret);
return;}
if (name == "stratum_64") {
subroutine_376(args, ret);
return;}
if (name == "stratum_65") {
subroutine_377(args, ret);
return;}
if (name == "stratum_66") {
subroutine_378(args, ret);
return;}
if (name == "stratum_67") {
subroutine_379(args, ret);
return;}
if (name == "stratum_68") {
subroutine_380(args, ret);
return;}
if (name == "stratum_69") {
subroutine_381(args, ret);
return;}
if (name == "stratum_7") {
subroutine_382(args, ret);
return;}
if (name == "stratum_70") {
subroutine_383(args, ret);
return;}
if (name == "stratum_71") {
subroutine_384(args, ret);
return;}
if (name == "stratum_72") {
subroutine_385(args, ret);
return;}
if (name == "stratum_73") {
subroutine_386(args, ret);
return;}
if (name == "stratum_74") {
subroutine_387(args, ret);
return;}
if (name == "stratum_75") {
subroutine_388(args, ret);
return;}
if (name == "stratum_76") {
subroutine_389(args, ret);
return;}
if (name == "stratum_77") {
subroutine_390(args, ret);
return;}
if (name == "stratum_78") {
subroutine_391(args, ret);
return;}
if (name == "stratum_79") {
subroutine_392(args, ret);
return;}
if (name == "stratum_8") {
subroutine_393(args, ret);
return;}
if (name == "stratum_80") {
subroutine_394(args, ret);
return;}
if (name == "stratum_81") {
subroutine_395(args, ret);
return;}
if (name == "stratum_82") {
subroutine_396(args, ret);
return;}
if (name == "stratum_83") {
subroutine_397(args, ret);
return;}
if (name == "stratum_84") {
subroutine_398(args, ret);
return;}
if (name == "stratum_85") {
subroutine_399(args, ret);
return;}
if (name == "stratum_86") {
subroutine_400(args, ret);
return;}
if (name == "stratum_87") {
subroutine_401(args, ret);
return;}
if (name == "stratum_88") {
subroutine_402(args, ret);
return;}
if (name == "stratum_89") {
subroutine_403(args, ret);
return;}
if (name == "stratum_9") {
subroutine_404(args, ret);
return;}
if (name == "stratum_90") {
subroutine_405(args, ret);
return;}
if (name == "stratum_91") {
subroutine_406(args, ret);
return;}
if (name == "stratum_92") {
subroutine_407(args, ret);
return;}
if (name == "stratum_93") {
subroutine_408(args, ret);
return;}
if (name == "stratum_94") {
subroutine_409(args, ret);
return;}
if (name == "stratum_95") {
subroutine_410(args, ret);
return;}
if (name == "stratum_96") {
subroutine_411(args, ret);
return;}
if (name == "stratum_97") {
subroutine_412(args, ret);
return;}
if (name == "stratum_98") {
subroutine_413(args, ret);
return;}
if (name == "stratum_99") {
subroutine_414(args, ret);
return;}
fatal("unknown subroutine");
}
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_0(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\tn"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Def.csv"},{"name","Statement_Defines"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"n\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_1_Statement_Defines);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Defines data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_1(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\top"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Op.csv"},{"name","Statement_Opcode"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"op\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Opcode\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_2_Statement_Opcode);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Opcode data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_2(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single16(@generator_0) :- 
   @generator_0 = count : { MLOAD(+underscore_900,+underscore_901,+underscore_902) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_11_agg_single16_op_ctxt,rel_11_agg_single16->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_10_MLOAD->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_11_agg_single16->insert(tuple,READ_OP_CONTEXT(rel_11_agg_single16_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_3(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunctionContainsMemConsStmt(fun) :- 
   StatementUsesMemory(stmt,_),
   Statement_Function(stmt,fun).
in file function_inliner.dl [574:3-576:38])_");
if(!(rel_67_StatementUsesMemory->empty()) && !(rel_116_Statement_Function->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_117_inliner_FunctionContainsMemConsStmt_op_ctxt,rel_117_inliner_FunctionContainsMemConsStmt->createContext());
for(const auto& env0 : *rel_67_StatementUsesMemory) {
auto range = rel_116_Statement_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_117_inliner_FunctionContainsMemConsStmt->insert(tuple,READ_OP_CONTEXT(rel_117_inliner_FunctionContainsMemConsStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_67_StatementUsesMemory->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_4(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Variable_Function(v,f) :- 
   Statement_Uses(s,v,_),
   Statement_Block(s,b),
   InFunction(b,f).
in file decompiler_imports.dl [179:1-183:21])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_115_InFunction->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
for(const auto& env0 : *rel_7_Statement_Uses) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_118_Variable_Function->insert(tuple,READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Function(v,f) :- 
   Statement_Defines(s,v,_),
   Statement_Block(s,b),
   InFunction(b,f).
in file decompiler_imports.dl [179:1-183:21])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_115_InFunction->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_118_Variable_Function->insert(tuple,READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Function(v,f) :- 
   FormalArgs(f,v,_).
in file decompiler_imports.dl [184:1-185:24])_");
if(!(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_118_Variable_Function->insert(tuple,READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_5(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FormalReturnArgs(fn,a,(pos-1)) :- 
   Statement_Uses(s,a,pos),
   RETURNPRIVATE(s,_),
   pos >= 1,
   Statement_Block(s,b),
   InFunction(b,fn).
in file decompiler_imports.dl [158:1-163:22])_");
if(!(rel_80_RETURNPRIVATE->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_80_RETURNPRIVATE_op_ctxt,rel_80_RETURNPRIVATE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
auto range = rel_7_Statement_Uses->lowerUpperRange_002(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env0 : range) {
if( !rel_80_RETURNPRIVATE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_80_RETURNPRIVATE_op_ctxt)).empty()) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[1]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(1))))}};
rel_119_FormalReturnArgs->insert(tuple,READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_80_RETURNPRIVATE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_6(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.In_FormalReturnArgs(fn,a,(pos-1)) :- 
   Statement_Uses(s,a,pos),
   Statement_Opcode(s,"RETURNPRIVATE"),
   pos >= 1,
   Statement_Block(s,b),
   InFunction(b,fn).
in file function_inliner.dl [201:3-206:26])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
auto range = rel_7_Statement_Uses->lowerUpperRange_002(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env0 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[1]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(1))))}};
rel_120_inliner_In_FormalReturnArgs->insert(tuple,READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_7(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","LocalBlockEdge.csv"},{"name","LocalBlockEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_121_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << "Error loading LocalBlockEdge data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_8(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(DoesNotDominate(candidate,s) :- 
   FunctionEntry(s),
   InFunction(s,f),
   InFunction(candidate,f),
   candidate != s.
in file dominators.dl [6:1-10:18])_");
if(!(rel_115_InFunction->empty()) && !(rel_114_FunctionEntry->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt,rel_114_FunctionEntry->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt,rel_122_DoesNotDominate->createContext());
for(const auto& env0 : *rel_114_FunctionEntry) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[0]) != ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_122_DoesNotDominate->insert(tuple,READ_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt));
}
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt,rel_122_DoesNotDominate->createContext());
CREATE_OP_CONTEXT(rel_123_delta_DoesNotDominate_op_ctxt,rel_123_delta_DoesNotDominate->createContext());
for(const auto& env0 : *rel_122_DoesNotDominate) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_123_delta_DoesNotDominate->insert(tuple,READ_OP_CONTEXT(rel_123_delta_DoesNotDominate_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(DoesNotDominate(notdom,s) :- 
   DoesNotDominate(notdom,other),
   LocalBlockEdge(other,s),
   s != notdom.
in file dominators.dl [12:1-14:41])_");
if(!(rel_123_delta_DoesNotDominate->empty()) && !(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt,rel_122_DoesNotDominate->createContext());
CREATE_OP_CONTEXT(rel_123_delta_DoesNotDominate_op_ctxt,rel_123_delta_DoesNotDominate->createContext());
CREATE_OP_CONTEXT(rel_124_new_DoesNotDominate_op_ctxt,rel_124_new_DoesNotDominate->createContext());
for(const auto& env0 : *rel_123_delta_DoesNotDominate) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[0])) && !(rel_122_DoesNotDominate->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_124_new_DoesNotDominate->insert(tuple,READ_OP_CONTEXT(rel_124_new_DoesNotDominate_op_ctxt));
}
}
}
}
();}
if(rel_124_new_DoesNotDominate->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt,rel_122_DoesNotDominate->createContext());
CREATE_OP_CONTEXT(rel_124_new_DoesNotDominate_op_ctxt,rel_124_new_DoesNotDominate->createContext());
for(const auto& env0 : *rel_124_new_DoesNotDominate) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_122_DoesNotDominate->insert(tuple,READ_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt));
}
}
();std::swap(rel_123_delta_DoesNotDominate, rel_124_new_DoesNotDominate);
rel_124_new_DoesNotDominate->purge();
iter++;
}
iter = 0;
rel_123_delta_DoesNotDominate->purge();
rel_124_new_DoesNotDominate->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_9(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Dominates(dominator,s) :- 
   InFunction(dominator,f),
   InFunction(s,f),
   !DoesNotDominate(dominator,s).
in file dominators.dl [35:1-38:33])_");
if(!(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt,rel_122_DoesNotDominate->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
for(const auto& env0 : *rel_115_InFunction) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_122_DoesNotDominate->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_122_DoesNotDominate_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_125_Dominates->insert(tuple,READ_OP_CONTEXT(rel_125_Dominates_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_122_DoesNotDominate->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_10(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructuredLoopBackEdge(from,to) :- 
   LocalBlockEdge(from,to),
   Dominates(to,from).
in file loops.dl [8:1-11:22])_");
if(!(rel_121_LocalBlockEdge->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_126_StructuredLoopBackEdge_op_ctxt,rel_126_StructuredLoopBackEdge->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_126_StructuredLoopBackEdge->insert(tuple,READ_OP_CONTEXT(rel_126_StructuredLoopBackEdge_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_11(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructuredLoopHead(to) :- 
   LocalBlockEdge(from,to),
   Dominates(to,from).
in file loops.dl [8:1-11:22])_");
if(!(rel_121_LocalBlockEdge->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_127_StructuredLoopHead_op_ctxt,rel_127_StructuredLoopHead->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_127_StructuredLoopHead->insert(tuple,READ_OP_CONTEXT(rel_127_StructuredLoopHead_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_12(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(BlockInStructuredLoop(backEdgeNode,loophead) :- 
   StructuredLoopBackEdge(backEdgeNode,loophead).
in file loops.dl [15:1-15:95])_");
if(!(rel_126_StructuredLoopBackEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_126_StructuredLoopBackEdge_op_ctxt,rel_126_StructuredLoopBackEdge->createContext());
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
for(const auto& env0 : *rel_126_StructuredLoopBackEdge) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_128_BlockInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(BlockInStructuredLoop(loophead,loophead) :- 
   StructuredLoopHead(loophead).
in file loops.dl [16:1-16:74])_");
if(!(rel_127_StructuredLoopHead->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_127_StructuredLoopHead_op_ctxt,rel_127_StructuredLoopHead->createContext());
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
for(const auto& env0 : *rel_127_StructuredLoopHead) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_128_BlockInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_129_delta_BlockInStructuredLoop_op_ctxt,rel_129_delta_BlockInStructuredLoop->createContext());
for(const auto& env0 : *rel_128_BlockInStructuredLoop) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_129_delta_BlockInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_129_delta_BlockInStructuredLoop_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(BlockInStructuredLoop(s,loophead) :- 
   BlockInStructuredLoop(other,loophead),
   LocalBlockEdge(s,other),
   other != loophead.
in file loops.dl [19:1-22:21])_");
if(!(rel_129_delta_BlockInStructuredLoop->empty()) && !(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_129_delta_BlockInStructuredLoop_op_ctxt,rel_129_delta_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_130_new_BlockInStructuredLoop_op_ctxt,rel_130_new_BlockInStructuredLoop->createContext());
for(const auto& env0 : *rel_129_delta_BlockInStructuredLoop) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env0[1]))) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_128_BlockInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1])}};
rel_130_new_BlockInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_130_new_BlockInStructuredLoop_op_ctxt));
}
}
}
}
}
();}
if(rel_130_new_BlockInStructuredLoop->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_130_new_BlockInStructuredLoop_op_ctxt,rel_130_new_BlockInStructuredLoop->createContext());
for(const auto& env0 : *rel_130_new_BlockInStructuredLoop) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_128_BlockInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt));
}
}
();std::swap(rel_129_delta_BlockInStructuredLoop, rel_130_new_BlockInStructuredLoop);
rel_130_new_BlockInStructuredLoop->purge();
iter++;
}
iter = 0;
rel_129_delta_BlockInStructuredLoop->purge();
rel_130_new_BlockInStructuredLoop->purge();
if (pruneImdtRels) rel_126_StructuredLoopBackEdge->purge();
if (pruneImdtRels) rel_127_StructuredLoopHead->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_13(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AuxStatementOpAndArgs(stmt,op,a,b) :- 
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1),
   !Statement_Defines(stmt,a,_),
   !Statement_Defines(stmt,b,_),
   Statement_Opcode(stmt,op).
in file constant_folding_variable_value.dl [8:1-13:30])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt,rel_12_AuxStatementOpAndArgs->createContext());
auto range = rel_7_Statement_Uses->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env0 : range) {
if( !(!rel_1_Statement_Defines->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt)).empty())) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( !(!rel_1_Statement_Defines->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt)).empty())) {
auto range = rel_2_Statement_Opcode->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[1]),ramBitCast(env1[1])}};
rel_12_AuxStatementOpAndArgs->insert(tuple,READ_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_14(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementInStructuredLoop(s,loop) :- 
   BlockInStructuredLoop(b,loop),
   Statement_Block(s,b).
in file loops.dl [34:1-36:26])_");
if(!(rel_128_BlockInStructuredLoop->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
for(const auto& env0 : *rel_128_BlockInStructuredLoop) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1])}};
rel_131_StatementInStructuredLoop->insert(tuple,READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_15(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inductionVariableFlow.TransferBoundary(block) :- 
   BlockInStructuredLoop(block,_).
in file loops_semantics.dl [8:1-8:82])_");
if(!(rel_128_BlockInStructuredLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt,rel_132_inductionVariableFlow_TransferBoundary->createContext());
for(const auto& env0 : *rel_128_BlockInStructuredLoop) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_132_inductionVariableFlow_TransferBoundary->insert(tuple,READ_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_16(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LocalBlockPath(src,target) :- 
   LocalBlockEdge(src,target).
in file dominators.dl [88:1-89:31])_");
if(!(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_133_LocalBlockPath->insert(tuple,READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_134_delta_LocalBlockPath_op_ctxt,rel_134_delta_LocalBlockPath->createContext());
for(const auto& env0 : *rel_133_LocalBlockPath) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_134_delta_LocalBlockPath->insert(tuple,READ_OP_CONTEXT(rel_134_delta_LocalBlockPath_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(LocalBlockPath(src,target) :- 
   LocalBlockPath(src,mid),
   LocalBlockEdge(mid,target).
in file dominators.dl [91:1-93:31])_");
if(!(rel_134_delta_LocalBlockPath->empty()) && !(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_134_delta_LocalBlockPath_op_ctxt,rel_134_delta_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_135_new_LocalBlockPath_op_ctxt,rel_135_new_LocalBlockPath->createContext());
for(const auto& env0 : *rel_134_delta_LocalBlockPath) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_135_new_LocalBlockPath->insert(tuple,READ_OP_CONTEXT(rel_135_new_LocalBlockPath_op_ctxt));
}
}
}
}
();}
if(rel_135_new_LocalBlockPath->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_135_new_LocalBlockPath_op_ctxt,rel_135_new_LocalBlockPath->createContext());
for(const auto& env0 : *rel_135_new_LocalBlockPath) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_133_LocalBlockPath->insert(tuple,READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
}
}
();std::swap(rel_134_delta_LocalBlockPath, rel_135_new_LocalBlockPath);
rel_135_new_LocalBlockPath->purge();
iter++;
}
iter = 0;
rel_134_delta_LocalBlockPath->purge();
rel_135_new_LocalBlockPath->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_17(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3) :- 
   mloadAliases.BlockHasFromStmt(block1,stmt1),
   LocalBlockPath(block1,block3),
   mloadAliases.BlockHasFromStmt(block3,stmt3),
   block1 != block3,
   !Dominates(block3,block1).
in file components.dl [64:2-69:31])_");
if(!(rel_101_mloadAliases_BlockHasFromStmt->empty()) && !(rel_133_LocalBlockPath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt,rel_101_mloadAliases_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
for(const auto& env0 : *rel_101_mloadAliases_BlockHasFromStmt) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[1])) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_101_mloadAliases_BlockHasFromStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->insert(tuple,READ_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_18(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3) :- 
   mstoreFreePtrOrder.BlockHasFromStmt(block1,stmt1),
   LocalBlockPath(block1,block3),
   mstoreFreePtrOrder.BlockHasToStmt(block3,stmt3),
   block1 != block3,
   !Dominates(block3,block1).
in file components.dl [64:2-69:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_103_mstoreFreePtrOrder_BlockHasToStmt->empty()) && !(rel_102_mstoreFreePtrOrder_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt,rel_102_mstoreFreePtrOrder_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt,rel_103_mstoreFreePtrOrder_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->createContext());
for(const auto& env0 : *rel_102_mstoreFreePtrOrder_BlockHasFromStmt) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[1])) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_103_mstoreFreePtrOrder_BlockHasToStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->insert(tuple,READ_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_19(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3) :- 
   callToReturnDataOp.BlockHasBypassingStmt(block1,stmt1),
   LocalBlockPath(block1,block3),
   callToReturnDataOp.BlockHasToStmt(block3,stmt3),
   block1 != block3,
   !Dominates(block3,block1).
in file components.dl [64:2-69:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_107_callToReturnDataOp_BlockHasToStmt->empty()) && !(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt,rel_107_callToReturnDataOp_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->createContext());
for(const auto& env0 : *rel_106_callToReturnDataOp_BlockHasBypassingStmt) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[1])) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_107_callToReturnDataOp_BlockHasToStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->insert(tuple,READ_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_20(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AfterCALLCheckRetDataSize(call) :- 
   CALLReturnDataStartVar(call,_),
   Statement_Block(call,callBlock),
   LocalBlockEdge(callBlock,nonThrowBlock),
   Statement_Block(retData,nonThrowBlock),
   RETURNDATASIZE(retData,_),
   !DirectThrowBlock(nonThrowBlock).
in file uses_defs_abstractions.dl [457:1-463:36])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_121_LocalBlockEdge->empty()) && !(rel_5_RETURNDATASIZE->empty()) && !(rel_56_CALLReturnDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt,rel_5_RETURNDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_104_DirectThrowBlock_op_ctxt,rel_104_DirectThrowBlock->createContext());
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt,rel_139_AfterCALLCheckRetDataSize->createContext());
for(const auto& env0 : *rel_56_CALLReturnDataStartVar) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_104_DirectThrowBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_104_DirectThrowBlock_op_ctxt)))) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env3 : range) {
if( !rel_5_RETURNDATASIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_139_AfterCALLCheckRetDataSize->insert(tuple,READ_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt));
break;
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_104_DirectThrowBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_21(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(IsBlock(b) :- 
   Statement_Block(_,b).
in file decompiler_imports.dl [262:1-263:69])_");
if(!(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_140_IsBlock->insert(tuple,READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(IsBlock(b) :- 
   LocalBlockEdge(b,_).
in file decompiler_imports.dl [262:1-263:69])_");
if(!(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_140_IsBlock->insert(tuple,READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(IsBlock(b) :- 
   LocalBlockEdge(_,b).
in file decompiler_imports.dl [262:1-263:69])_");
if(!(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_140_IsBlock->insert(tuple,READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_22(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunCalledWithImpreciseControlFlow(fun) :- 
   CallGraphEdge(callerBlock,fun),
   LocalBlockEdge(callerBlock,next1),
   LocalBlockEdge(callerBlock,next2),
   next1 != next2.
in file function_inliner.dl [124:3-128:20])_");
if(!(rel_121_LocalBlockEdge->empty()) && !(rel_110_CallGraphEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_141_inliner_FunCalledWithImpreciseControlFlow_op_ctxt,rel_141_inliner_FunCalledWithImpreciseControlFlow->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env2[1]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_141_inliner_FunCalledWithImpreciseControlFlow->insert(tuple,READ_OP_CONTEXT(rel_141_inliner_FunCalledWithImpreciseControlFlow_op_ctxt));
break;
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_23(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Function_Exit(fun,block) :- 
   InFunction(block,fun),
   LocalBlockEdge(_,block),
   !inliner.ThrowBlock(block),
   !LocalBlockEdge(block,_).
in file function_inliner.dl [160:3-165:34])_");
if(!(rel_115_InFunction->empty()) && !(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt,rel_109_inliner_ThrowBlock->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
for(const auto& env0 : *rel_115_InFunction) {
if( !rel_121_LocalBlockEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt)).empty() && !(!rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt)).empty()) && !(rel_109_inliner_ThrowBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_142_inliner_Function_Exit->insert(tuple,READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Function_Exit(fun,block) :- 
   InFunction(block,fun),
   FunctionEntry(block),
   !inliner.ThrowBlock(block),
   !LocalBlockEdge(block,_).
in file function_inliner.dl [160:3-165:34])_");
if(!(rel_115_InFunction->empty()) && !(rel_114_FunctionEntry->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt,rel_109_inliner_ThrowBlock->createContext());
CREATE_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt,rel_114_FunctionEntry->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
for(const auto& env0 : *rel_115_InFunction) {
if( rel_114_FunctionEntry->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt)) && !(!rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt)).empty()) && !(rel_109_inliner_ThrowBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_142_inliner_Function_Exit->insert(tuple,READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun\tblock"},{"auxArity","0"},{"name","inliner.Function_Exit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"fun\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_142_inliner_Function_Exit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_109_inliner_ThrowBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_24(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_Value.csv"},{"name","BasicVariable_Value"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_13_BasicVariable_Value);
} catch (std::exception& e) {std::cerr << "Error loading BasicVariable_Value data: " << e.what() << '\n';}
}
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_14_delta_BasicVariable_Value_op_ctxt,rel_14_delta_BasicVariable_Value->createContext());
for(const auto& env0 : *rel_13_BasicVariable_Value) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_14_delta_BasicVariable_Value->insert(tuple,READ_OP_CONTEXT(rel_14_delta_BasicVariable_Value_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_16_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_17_delta_BasicAuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_16_BasicAuxStatementOpAndConstantArgValues) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_17_delta_BasicAuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_22_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_22_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_22_basicVariableValueConstantFolding_RequestConstantFold2) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_25_basicVariableValueConstantFolding_ConstantFoldResult2) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(BasicVariable_Value(to,result) :- 
   basicVariableValueConstantFolding.ConstantFoldResult2(op,a_val,b_val,result),
   BasicAuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val),
   Statement_Defines(stmt,to,_). .plan 1:(2,1,3)
in file constant_folding_variable_value.dl [48:1-51:34])_");
if(!(rel_16_BasicAuxStatementOpAndConstantArgValues->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_15_new_BasicVariable_Value_op_ctxt,rel_15_new_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_16_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_17_delta_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2) {
auto range = rel_16_BasicAuxStatementOpAndConstantArgValues->lowerUpperRange_0111(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_17_delta_BasicAuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt)))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env0[3])}};
rel_15_new_BasicVariable_Value->insert(tuple,READ_OP_CONTEXT(rel_15_new_BasicVariable_Value_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(BasicVariable_Value(to,result) :- 
   basicVariableValueConstantFolding.ConstantFoldResult2(op,a_val,b_val,result),
   BasicAuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val),
   Statement_Defines(stmt,to,_). .plan 1:(2,1,3)
in file constant_folding_variable_value.dl [48:1-51:34])_");
if(!(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_17_delta_BasicAuxStatementOpAndConstantArgValues->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_15_new_BasicVariable_Value_op_ctxt,rel_15_new_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_17_delta_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_17_delta_BasicAuxStatementOpAndConstantArgValues) {
auto range = rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env1[3])}};
rel_15_new_BasicVariable_Value->insert(tuple,READ_OP_CONTEXT(rel_15_new_BasicVariable_Value_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(BasicAuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val) :- 
   BasicVariable_Value(a,a_val),
   AuxStatementOpAndArgs(stmt,op,a,b),
   BasicVariable_Value(b,b_val). .plan 1:(3,2,1)
in file constant_folding_variable_value.dl [38:1-41:33])_");
if(!(rel_12_AuxStatementOpAndArgs->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_14_delta_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt,rel_12_AuxStatementOpAndArgs->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_14_delta_BasicVariable_Value_op_ctxt,rel_14_delta_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_16_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_18_new_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_18_new_BasicAuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_14_delta_BasicVariable_Value) {
auto range = rel_12_AuxStatementOpAndArgs->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_16_BasicAuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt))) && !(rel_14_delta_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env1[3]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_14_delta_BasicVariable_Value_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_18_new_BasicAuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_18_new_BasicAuxStatementOpAndConstantArgValues_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(BasicAuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val) :- 
   BasicVariable_Value(a,a_val),
   AuxStatementOpAndArgs(stmt,op,a,b),
   BasicVariable_Value(b,b_val). .plan 1:(3,2,1)
in file constant_folding_variable_value.dl [38:1-41:33])_");
if(!(rel_12_AuxStatementOpAndArgs->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_14_delta_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt,rel_12_AuxStatementOpAndArgs->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_14_delta_BasicVariable_Value_op_ctxt,rel_14_delta_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_16_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_18_new_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_18_new_BasicAuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_14_delta_BasicVariable_Value) {
auto range = rel_12_AuxStatementOpAndArgs->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_16_BasicAuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[1])}};
rel_18_new_BasicAuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_18_new_BasicAuxStatementOpAndConstantArgValues_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ValidConstantFoldOperation(op,arg1,arg2) :- 
   basicVariableValueConstantFolding.RequestConstantFold2(op,arg1,arg2),
   op != "DIV",
   op != "SDIV",
   op != "MOD",
   op != "SMOD".
in file constants.dl [16:3-19:21])_");
if(!(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(1))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(2))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(3))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(4))) && !(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ValidConstantFoldOperation(op,arg1,arg2) :- 
   basicVariableValueConstantFolding.RequestConstantFold2(op,arg1,arg2),
   arg2 != "0x0".
in file constants.dl [16:3-19:21])_");
if(!(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2) {
if( (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(RamSigned(5))) && !(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.RequestConstantFold2(op,a_val,b_val) :- 
   BasicAuxStatementOpAndConstantArgValues(_,op,a_val,b_val).
in file constant_folding_variable_value.dl [45:1-46:64])_");
if(!(rel_17_delta_BasicAuxStatementOpAndConstantArgValues->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_17_delta_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_17_delta_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_22_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_22_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_17_delta_BasicAuxStatementOpAndConstantArgValues) {
if( !(rel_22_basicVariableValueConstantFolding_RequestConstantFold2->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_22_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("ADD",arg1,arg2,as(@add_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("ADD",arg1,arg2).
in file constants.dl [33:3-33:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(6)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(6)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(6)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::add_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(6)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::add_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SUB",arg1,arg2,as(@sub_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SUB",arg1,arg2).
in file constants.dl [34:3-34:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(7)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(7)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(7)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sub_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(7)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sub_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("MUL",arg1,arg2,as(@mul_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("MUL",arg1,arg2).
in file constants.dl [35:3-35:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(8)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(8)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(8)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mul_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(8)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mul_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("DIV",arg1,arg2,as(@div_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("DIV",arg1,arg2).
in file constants.dl [36:3-36:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::div_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::div_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("MOD",arg1,arg2,as(@mod_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("MOD",arg1,arg2).
in file constants.dl [37:3-37:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(3)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(3)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("AND",arg1,arg2,as(@and_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("AND",arg1,arg2).
in file constants.dl [38:3-38:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(9)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(9)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(9)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::and_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(9)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::and_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("OR",arg1,arg2,as(@or_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("OR",arg1,arg2).
in file constants.dl [39:3-39:139])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(10)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(10)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(10)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::or_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(10)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::or_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("XOR",arg1,arg2,as(@xor_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("XOR",arg1,arg2).
in file constants.dl [40:3-40:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(11)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(11)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(11)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::xor_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(11)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::xor_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("GT",arg1,arg2,as(@gt_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("GT",arg1,arg2).
in file constants.dl [41:3-41:139])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(12)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(12)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(12)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::gt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(12)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::gt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("EQ",arg1,arg2,as(@eq_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("EQ",arg1,arg2).
in file constants.dl [42:3-42:139])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(13)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(13)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(13)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::eq_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(13)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::eq_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("LT",arg1,arg2,as(@lt_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("LT",arg1,arg2).
in file constants.dl [43:3-43:139])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(14)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(14)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(14)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::lt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(14)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::lt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("EXP",arg1,arg2,as(@exp_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("EXP",arg1,arg2).
in file constants.dl [44:3-44:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(15)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(15)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(15)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::exp_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(15)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::exp_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SMOD",arg1,arg2,as(@smod_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SMOD",arg1,arg2).
in file constants.dl [45:3-45:145])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(2)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::smod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(2)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::smod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SDIV",arg1,arg2,as(@sdiv_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SDIV",arg1,arg2).
in file constants.dl [46:3-46:145])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(4)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(4)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(4)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sdiv_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(4)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sdiv_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SGT",arg1,arg2,as(@sgt_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SGT",arg1,arg2).
in file constants.dl [47:3-47:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(16)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(16)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(16)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sgt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(16)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sgt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SLT",arg1,arg2,as(@slt_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SLT",arg1,arg2).
in file constants.dl [48:3-48:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(17)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(17)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(17)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::slt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(17)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::slt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SHL",arg1,arg2,as(@shl_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SHL",arg1,arg2).
in file constants.dl [49:3-49:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(18)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(18)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(18)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shl_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(18)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shl_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SHR",arg1,arg2,as(@shr_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SHR",arg1,arg2).
in file constants.dl [50:3-50:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(19)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(19)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(19)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shr_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(19)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shr_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(basicVariableValueConstantFolding.ConstantFoldResult2("SAR",arg1,arg2,as(@sar_256(arg1,arg2), Value)) :- 
   basicVariableValueConstantFolding.ValidConstantFoldOperation("SAR",arg1,arg2).
in file constants.dl [51:3-51:142])_");
if(!(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
auto range = rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(20)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(20)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(20)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sar_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(20)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sar_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
if(rel_15_new_BasicVariable_Value->empty() && rel_18_new_BasicAuxStatementOpAndConstantArgValues->empty() && rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->empty() && rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->empty() && rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_15_new_BasicVariable_Value_op_ctxt,rel_15_new_BasicVariable_Value->createContext());
for(const auto& env0 : *rel_15_new_BasicVariable_Value) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_13_BasicVariable_Value->insert(tuple,READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
}
}
();std::swap(rel_14_delta_BasicVariable_Value, rel_15_new_BasicVariable_Value);
rel_15_new_BasicVariable_Value->purge();
[&](){
CREATE_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_16_BasicAuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_18_new_BasicAuxStatementOpAndConstantArgValues_op_ctxt,rel_18_new_BasicAuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_18_new_BasicAuxStatementOpAndConstantArgValues) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_16_BasicAuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_16_BasicAuxStatementOpAndConstantArgValues_op_ctxt));
}
}
();std::swap(rel_17_delta_BasicAuxStatementOpAndConstantArgValues, rel_18_new_BasicAuxStatementOpAndConstantArgValues);
rel_18_new_BasicAuxStatementOpAndConstantArgValues->purge();
[&](){
CREATE_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
();std::swap(rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation, rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation);
rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->purge();
[&](){
CREATE_OP_CONTEXT(rel_22_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_22_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_22_basicVariableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_22_basicVariableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
();std::swap(rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2, rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2);
rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->purge();
[&](){
CREATE_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_25_basicVariableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
();std::swap(rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2, rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2);
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->purge();
iter++;
}
iter = 0;
rel_14_delta_BasicVariable_Value->purge();
rel_15_new_BasicVariable_Value->purge();
rel_17_delta_BasicAuxStatementOpAndConstantArgValues->purge();
rel_18_new_BasicAuxStatementOpAndConstantArgValues->purge();
rel_20_delta_basicVariableValueConstantFolding_ValidConstantFoldOperation->purge();
rel_21_new_basicVariableValueConstantFolding_ValidConstantFoldOperation->purge();
rel_23_delta_basicVariableValueConstantFolding_RequestConstantFold2->purge();
rel_24_new_basicVariableValueConstantFolding_RequestConstantFold2->purge();
rel_26_delta_basicVariableValueConstantFolding_ConstantFoldResult2->purge();
rel_27_new_basicVariableValueConstantFolding_ConstantFoldResult2->purge();
if (pruneImdtRels) rel_16_BasicAuxStatementOpAndConstantArgValues->purge();
if (pruneImdtRels) rel_19_basicVariableValueConstantFolding_ValidConstantFoldOperation->purge();
if (pruneImdtRels) rel_22_basicVariableValueConstantFolding_RequestConstantFold2->purge();
if (pruneImdtRels) rel_25_basicVariableValueConstantFolding_ConstantFoldResult2->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_25(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunHasRetMismatch(fun) :- 
   CallGraphEdge(callerBlock,fun),
   Statement_Block(callStmt,callerBlock),
   Statement_Opcode(callStmt,"CALLPRIVATE"),
   Statement_Defines(callStmt,_,i),
   inliner.Function_Exit(fun,retBlock),
   Statement_Block(retStmt,retBlock),
   Statement_Opcode(retStmt,"RETURNPRIVATE"),
   !Statement_Uses(retStmt,_,(i+1)).
in file function_inliner.dl [113:3-121:43])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_142_inliner_Function_Exit->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
CREATE_OP_CONTEXT(rel_143_inliner_FunHasRetMismatch_op_ctxt,rel_143_inliner_FunHasRetMismatch->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(21))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_142_inliner_Function_Exit->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env4[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt)) && !(!rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env2[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env2[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_143_inliner_FunHasRetMismatch->insert(tuple,READ_OP_CONTEXT(rel_143_inliner_FunHasRetMismatch_op_ctxt));
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunHasRetMismatch"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_143_inliner_FunHasRetMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_26(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.In_ValidBlock(block) :- 
   LocalBlockEdge(block,_).
in file function_inliner.dl [298:3-301:34])_");
if(!(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_144_inliner_In_ValidBlock->insert(tuple,READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(inliner.In_ValidBlock(block) :- 
   LocalBlockEdge(_,block).
in file function_inliner.dl [298:3-301:34])_");
if(!(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_144_inliner_In_ValidBlock->insert(tuple,READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(inliner.In_ValidBlock(block) :- 
   Statement_Block(_,block).
in file function_inliner.dl [298:3-301:34])_");
if(!(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_144_inliner_In_ValidBlock->insert(tuple,READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_27(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tnext"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Statement_Next.csv"},{"name","Statement_Next"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"next\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Statement\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_145_Statement_Next);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Next data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_28(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Helper_NextStatementInSameBlock(stmt1,stmt2) :- 
   Statement_Next(stmt1,stmt2),
   Statement_Block(stmt1,block),
   Statement_Block(stmt2,block).
in file decompiler_imports.dl [238:1-241:33])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_145_Statement_Next->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_145_Statement_Next_op_ctxt,rel_145_Statement_Next->createContext());
CREATE_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt,rel_146_Helper_NextStatementInSameBlock->createContext());
for(const auto& env0 : *rel_145_Statement_Next) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
if( rel_99_Statement_Block->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_146_Helper_NextStatementInSameBlock->insert(tuple,READ_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_29(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LocalStatementPathInBlock(stmt1,stmt2) :- 
   Helper_NextStatementInSameBlock(stmt1,stmt2).
in file dominators.dl [97:1-98:49])_");
if(!(rel_146_Helper_NextStatementInSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt,rel_146_Helper_NextStatementInSameBlock->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
for(const auto& env0 : *rel_146_Helper_NextStatementInSameBlock) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_147_LocalStatementPathInBlock->insert(tuple,READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_148_delta_LocalStatementPathInBlock_op_ctxt,rel_148_delta_LocalStatementPathInBlock->createContext());
for(const auto& env0 : *rel_147_LocalStatementPathInBlock) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_148_delta_LocalStatementPathInBlock->insert(tuple,READ_OP_CONTEXT(rel_148_delta_LocalStatementPathInBlock_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(LocalStatementPathInBlock(stmt1,stmt3) :- 
   LocalStatementPathInBlock(stmt1,stmt2),
   Helper_NextStatementInSameBlock(stmt2,stmt3).
in file dominators.dl [100:1-102:49])_");
if(!(rel_148_delta_LocalStatementPathInBlock->empty()) && !(rel_146_Helper_NextStatementInSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt,rel_146_Helper_NextStatementInSameBlock->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_148_delta_LocalStatementPathInBlock_op_ctxt,rel_148_delta_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_149_new_LocalStatementPathInBlock_op_ctxt,rel_149_new_LocalStatementPathInBlock->createContext());
for(const auto& env0 : *rel_148_delta_LocalStatementPathInBlock) {
auto range = rel_146_Helper_NextStatementInSameBlock->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_149_new_LocalStatementPathInBlock->insert(tuple,READ_OP_CONTEXT(rel_149_new_LocalStatementPathInBlock_op_ctxt));
}
}
}
}
();}
if(rel_149_new_LocalStatementPathInBlock->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_149_new_LocalStatementPathInBlock_op_ctxt,rel_149_new_LocalStatementPathInBlock->createContext());
for(const auto& env0 : *rel_149_new_LocalStatementPathInBlock) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_147_LocalStatementPathInBlock->insert(tuple,READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt));
}
}
();std::swap(rel_148_delta_LocalStatementPathInBlock, rel_149_new_LocalStatementPathInBlock);
rel_149_new_LocalStatementPathInBlock->purge();
iter++;
}
iter = 0;
rel_148_delta_LocalStatementPathInBlock->purge();
rel_149_new_LocalStatementPathInBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_30(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtSameBlock(stmt1,stmt3) :- 
   mloadAliases.BlockHasFromStmt(block,stmt1),
   mloadAliases.BlockHasFromStmt(block,stmt3),
   LocalStatementPathInBlock(stmt1,stmt3),
   stmt1 != stmt3.
in file components.dl [45:2-49:19])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_101_mloadAliases_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt,rel_101_mloadAliases_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt,rel_150_mloadAliases_FromStmtToStmtSameBlock->createContext());
for(const auto& env0 : *rel_101_mloadAliases_BlockHasFromStmt) {
auto range = rel_101_mloadAliases_BlockHasFromStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1])}};
rel_150_mloadAliases_FromStmtToStmtSameBlock->insert(tuple,READ_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_31(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtSameBlock(stmt1,stmt3),
   mloadAliases.BlockHasFromStmt(block,stmt1),
   mloadAliasesPrecise.BlockHasBypassingStmt(block,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3.
in file components.dl [51:2-58:19])_");
if(!(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->empty()) && !(rel_150_mloadAliases_FromStmtToStmtSameBlock->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_101_mloadAliases_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt,rel_101_mloadAliases_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt,rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt,rel_150_mloadAliases_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_150_mloadAliases_FromStmtToStmtSameBlock) {
auto range = rel_101_mloadAliases_BlockHasFromStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_32(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtSameBlock(stmt1,stmt3),
   !mloadAliasesPrecise.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3).
in file components.dl [60:2-62:54])_");
if(!(rel_150_mloadAliases_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt,rel_150_mloadAliases_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_150_mloadAliases_FromStmtToStmtSameBlock) {
if( !(rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_151_mloadAliasesPrecise_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_33(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtSameBlock(stmt1,stmt3) :- 
   mstoreFreePtrOrder.BlockHasFromStmt(block,stmt1),
   mstoreFreePtrOrder.BlockHasToStmt(block,stmt3),
   LocalStatementPathInBlock(stmt1,stmt3),
   stmt1 != stmt3.
in file components.dl [45:2-49:19])_");
if(!(rel_103_mstoreFreePtrOrder_BlockHasToStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_102_mstoreFreePtrOrder_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt,rel_102_mstoreFreePtrOrder_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt,rel_103_mstoreFreePtrOrder_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock_op_ctxt,rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->createContext());
for(const auto& env0 : *rel_102_mstoreFreePtrOrder_BlockHasFromStmt) {
auto range = rel_103_mstoreFreePtrOrder_BlockHasToStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1])}};
rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->insert(tuple,READ_OP_CONTEXT(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_103_mstoreFreePtrOrder_BlockHasToStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_34(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   LocalBlockPath(block1,block2),
   mloadAliasesPrecise.BlockHasBypassingStmt(block2,_),
   LocalBlockPath(block2,block3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2).
in file components.dl [71:2-78:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty()) && !(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt,rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[3])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt)).empty() && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mloadAliasesPrecise.BlockHasBypassingStmt(block1,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2).
in file components.dl [80:2-83:44])_");
if(!(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt,rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mloadAliasesPrecise.BlockHasBypassingStmt(block3,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3).
in file components.dl [85:2-88:44])_");
if(!(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt,rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
if (pruneImdtRels) rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_35(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADFreePtr(mload) :- 
   MLOAD(mload,addrVar,_),
   BasicVariable_Value(addrVar,"0x40").
in file memory_addresses.dl [25:1-27:40])_");
if(!(rel_10_MLOAD->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
if( rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(RamSigned(22))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_28_MLOADFreePtr->insert(tuple,READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_36(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   !mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3).
in file components.dl [90:2-92:81])_");
if(!(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_154_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_37(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.ReachableBypassingAny(stmt1,stmt3) :- 
   mloadAliasesPrecise.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt,rel_156_mloadAliasesPrecise_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_156_mloadAliasesPrecise_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mloadAliasesPrecise.ReachableBypassingAny(stmt1,stmt3) :- 
   mloadAliasesPrecise.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt,rel_156_mloadAliasesPrecise_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_156_mloadAliasesPrecise_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_152_mloadAliasesPrecise_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_155_mloadAliasesPrecise_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_38(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2) :- 
   mloadAliasesPrecise.ReachableBypassingAny(mload1,mload2).
in file memory_addresses.dl [145:1-147:61])_");
if(!(rel_156_mloadAliasesPrecise_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt,rel_156_mloadAliasesPrecise_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
for(const auto& env0 : *rel_156_mloadAliasesPrecise_ReachableBypassingAny) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_157_MLOADSFreePtrUnchangedNoMemReuse->insert(tuple,READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2) :- 
   mloadAliasesPrecise.ReachableBypassingAny(mload2,mload1).
in file memory_addresses.dl [145:1-147:61])_");
if(!(rel_156_mloadAliasesPrecise_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_156_mloadAliasesPrecise_ReachableBypassingAny_op_ctxt,rel_156_mloadAliasesPrecise_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
for(const auto& env0 : *rel_156_mloadAliasesPrecise_ReachableBypassingAny) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_157_MLOADSFreePtrUnchangedNoMemReuse->insert(tuple,READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MLOADSFreePtrUnchangedNoMemReuse(mloadFreePtr,mloadFreePtr) :- 
   MLOADFreePtr(mloadFreePtr).
in file memory_addresses.dl [149:1-150:30])_");
if(!(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_157_MLOADSFreePtrUnchangedNoMemReuse->insert(tuple,READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_156_mloadAliasesPrecise_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_39(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   callToReturnDataOp.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   LocalBlockPath(block1,block2),
   callToReturnDataOp.BlockHasBypassingStmt(block2,_),
   LocalBlockPath(block2,block3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2).
in file components.dl [71:2-78:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->empty()) && !(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[3])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !rel_106_callToReturnDataOp_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt)).empty() && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   callToReturnDataOp.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   callToReturnDataOp.BlockHasBypassingStmt(block1,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2).
in file components.dl [80:2-83:44])_");
if(!(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_106_callToReturnDataOp_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   callToReturnDataOp.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   callToReturnDataOp.BlockHasBypassingStmt(block3,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3).
in file components.dl [85:2-88:44])_");
if(!(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_106_callToReturnDataOp_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_40(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3) :- 
   callToReturnDataOp.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   !callToReturnDataOp.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3).
in file components.dl [90:2-92:81])_");
if(!(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_138_callToReturnDataOp_FromStmtToStmtDiffBlockHavePath->purge();
if (pruneImdtRels) rel_158_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_41(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtSameBlock(stmt1,stmt3) :- 
   callToReturnDataOp.BlockHasBypassingStmt(block,stmt1),
   callToReturnDataOp.BlockHasToStmt(block,stmt3),
   LocalStatementPathInBlock(stmt1,stmt3),
   stmt1 != stmt3.
in file components.dl [45:2-49:19])_");
if(!(rel_107_callToReturnDataOp_BlockHasToStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt,rel_107_callToReturnDataOp_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock_op_ctxt,rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->createContext());
for(const auto& env0 : *rel_106_callToReturnDataOp_BlockHasBypassingStmt) {
auto range = rel_107_callToReturnDataOp_BlockHasToStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1])}};
rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->insert(tuple,READ_OP_CONTEXT(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_107_callToReturnDataOp_BlockHasToStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_42(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3) :- 
   callToReturnDataOp.FromStmtToStmtSameBlock(stmt1,stmt3),
   callToReturnDataOp.BlockHasBypassingStmt(block,stmt1),
   callToReturnDataOp.BlockHasBypassingStmt(block,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3.
in file components.dl [51:2-58:19])_");
if(!(rel_106_callToReturnDataOp_BlockHasBypassingStmt->empty()) && !(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->empty()) && !(rel_147_LocalStatementPathInBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock_op_ctxt,rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_160_callToReturnDataOp_FromStmtToStmtSameBlock) {
auto range = rel_106_callToReturnDataOp_BlockHasBypassingStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_106_callToReturnDataOp_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_106_callToReturnDataOp_BlockHasBypassingStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_43(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3) :- 
   callToReturnDataOp.FromStmtToStmtSameBlock(stmt1,stmt3),
   !callToReturnDataOp.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3).
in file components.dl [60:2-62:54])_");
if(!(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_160_callToReturnDataOp_FromStmtToStmtSameBlock_op_ctxt,rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_160_callToReturnDataOp_FromStmtToStmtSameBlock) {
if( !(rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_160_callToReturnDataOp_FromStmtToStmtSameBlock->purge();
if (pruneImdtRels) rel_161_callToReturnDataOp_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_44(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.ReachableBypassingAny(stmt1,stmt3) :- 
   callToReturnDataOp.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt,rel_163_callToReturnDataOp_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_163_callToReturnDataOp_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(callToReturnDataOp.ReachableBypassingAny(stmt1,stmt3) :- 
   callToReturnDataOp.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt,rel_163_callToReturnDataOp_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_163_callToReturnDataOp_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_162_callToReturnDataOp_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_159_callToReturnDataOp_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_45(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNDATACOPYOfCALL(retDataCopy,memStartVar,retDataStartVar,length,call) :- 
   callToReturnDataOp.ReachableBypassingAny(call,retDataCopy),
   RETURNDATACOPY(retDataCopy,memStartVar,retDataStartVar,length).
in file uses_defs_abstractions.dl [502:1-504:69])_");
if(!(rel_163_callToReturnDataOp_ReachableBypassingAny->empty()) && !(rel_90_RETURNDATACOPY->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt,rel_90_RETURNDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt,rel_163_callToReturnDataOp_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt,rel_164_RETURNDATACOPYOfCALL->createContext());
for(const auto& env0 : *rel_163_callToReturnDataOp_ReachableBypassingAny) {
auto range = rel_90_RETURNDATACOPY->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[0])}};
rel_164_RETURNDATACOPYOfCALL->insert(tuple,READ_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_46(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADFreePtr_To(mload,to) :- 
   MLOADFreePtr(mload),
   MLOAD(mload,_,to).
in file memory_addresses.dl [29:1-31:23])_");
if(!(rel_28_MLOADFreePtr->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
auto range = rel_10_MLOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_29_MLOADFreePtr_To->insert(tuple,READ_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_47(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNDATASIZEOfCALL(retDataSize,sizeVar,call) :- 
   callToReturnDataOp.ReachableBypassingAny(call,retDataSize),
   RETURNDATASIZE(retDataSize,sizeVar).
in file uses_defs_abstractions.dl [506:1-508:40])_");
if(!(rel_163_callToReturnDataOp_ReachableBypassingAny->empty()) && !(rel_5_RETURNDATASIZE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt,rel_5_RETURNDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_163_callToReturnDataOp_ReachableBypassingAny_op_ctxt,rel_163_callToReturnDataOp_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
for(const auto& env0 : *rel_163_callToReturnDataOp_ReachableBypassingAny) {
auto range = rel_5_RETURNDATASIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_165_RETURNDATASIZEOfCALL->insert(tuple,READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_5_RETURNDATASIZE->purge();
if (pruneImdtRels) rel_163_callToReturnDataOp_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_48(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNDATACOPYAllDataOfCALL(retDataCopy,memStartVar,call) :- 
   RETURNDATACOPYOfCALL(retDataCopy,memStartVar,retDataStartVar,lenVar,call),
   BasicVariable_Value(retDataStartVar,"0x0"),
   RETURNDATASIZEOfCALL(_,lenVar,call).
in file uses_defs_abstractions.dl [510:1-513:41])_");
if(!(rel_13_BasicVariable_Value->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_164_RETURNDATACOPYOfCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt,rel_164_RETURNDATACOPYOfCALL->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
for(const auto& env0 : *rel_164_RETURNDATACOPYOfCALL) {
if( !rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(env0[4])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt)).empty() && rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[4])}};
rel_166_RETURNDATACOPYAllDataOfCALL->insert(tuple,READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_49(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Block_Tail(block,stmt) :- 
   Statement_Block(stmt,block),
   !PHI(stmt,_,_),
   !Helper_NextStatementInSameBlock(stmt,_).
in file decompiler_imports.dl [254:1-257:45])_");
if(!(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_48_PHI_op_ctxt,rel_48_PHI->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt,rel_146_Helper_NextStatementInSameBlock->createContext());
CREATE_OP_CONTEXT(rel_167_Block_Tail_op_ctxt,rel_167_Block_Tail->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
if( !(!rel_146_Helper_NextStatementInSameBlock->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_146_Helper_NextStatementInSameBlock_op_ctxt)).empty()) && !(!rel_48_PHI->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_48_PHI_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_167_Block_Tail->insert(tuple,READ_OP_CONTEXT(rel_167_Block_Tail_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_146_Helper_NextStatementInSameBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_50(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FunctionUpdatesFreePtr(fun) :- 
   Statement_Function(stmt,fun),
   MSTOREFreePtr(stmt).
in file memory_addresses.dl [48:1-50:52])_");
if(!(rel_116_Statement_Function->empty()) && !(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt,rel_171_FunctionUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_116_Statement_Function) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_171_FunctionUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt));
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt,rel_168_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_169_delta_CALLUpdatesFreePtr_op_ctxt,rel_169_delta_CALLUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_168_CALLUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_169_delta_CALLUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_169_delta_CALLUpdatesFreePtr_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt,rel_171_FunctionUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_172_delta_FunctionUpdatesFreePtr_op_ctxt,rel_172_delta_FunctionUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_171_FunctionUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_172_delta_FunctionUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_172_delta_FunctionUpdatesFreePtr_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(CALLUpdatesFreePtr(callStmt) :- 
   CallGraphEdge(callBlock,fun),
   FunctionUpdatesFreePtr(fun),
   Block_Tail(callBlock,callStmt).
in file memory_addresses.dl [52:1-55:35])_");
if(!(rel_172_delta_FunctionUpdatesFreePtr->empty()) && !(rel_167_Block_Tail->empty()) && !(rel_110_CallGraphEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_167_Block_Tail_op_ctxt,rel_167_Block_Tail->createContext());
CREATE_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt,rel_168_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_170_new_CALLUpdatesFreePtr_op_ctxt,rel_170_new_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_172_delta_FunctionUpdatesFreePtr_op_ctxt,rel_172_delta_FunctionUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
if( rel_172_delta_FunctionUpdatesFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_172_delta_FunctionUpdatesFreePtr_op_ctxt))) {
auto range = rel_167_Block_Tail->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_167_Block_Tail_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_168_CALLUpdatesFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_170_new_CALLUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_170_new_CALLUpdatesFreePtr_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FunctionUpdatesFreePtr(fun) :- 
   Statement_Function(stmt,fun),
   CALLUpdatesFreePtr(stmt).
in file memory_addresses.dl [48:1-50:52])_");
if(!(rel_116_Statement_Function->empty()) && !(rel_169_delta_CALLUpdatesFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_169_delta_CALLUpdatesFreePtr_op_ctxt,rel_169_delta_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt,rel_171_FunctionUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_173_new_FunctionUpdatesFreePtr_op_ctxt,rel_173_new_FunctionUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_116_Statement_Function) {
if( rel_169_delta_CALLUpdatesFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_169_delta_CALLUpdatesFreePtr_op_ctxt)) && !(rel_171_FunctionUpdatesFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_173_new_FunctionUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_173_new_FunctionUpdatesFreePtr_op_ctxt));
}
}
}
();}
if(rel_170_new_CALLUpdatesFreePtr->empty() && rel_173_new_FunctionUpdatesFreePtr->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt,rel_168_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_170_new_CALLUpdatesFreePtr_op_ctxt,rel_170_new_CALLUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_170_new_CALLUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_168_CALLUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt));
}
}
();std::swap(rel_169_delta_CALLUpdatesFreePtr, rel_170_new_CALLUpdatesFreePtr);
rel_170_new_CALLUpdatesFreePtr->purge();
[&](){
CREATE_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt,rel_171_FunctionUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_173_new_FunctionUpdatesFreePtr_op_ctxt,rel_173_new_FunctionUpdatesFreePtr->createContext());
for(const auto& env0 : *rel_173_new_FunctionUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_171_FunctionUpdatesFreePtr->insert(tuple,READ_OP_CONTEXT(rel_171_FunctionUpdatesFreePtr_op_ctxt));
}
}
();std::swap(rel_172_delta_FunctionUpdatesFreePtr, rel_173_new_FunctionUpdatesFreePtr);
rel_173_new_FunctionUpdatesFreePtr->purge();
iter++;
}
iter = 0;
rel_169_delta_CALLUpdatesFreePtr->purge();
rel_170_new_CALLUpdatesFreePtr->purge();
rel_172_delta_FunctionUpdatesFreePtr->purge();
rel_173_new_FunctionUpdatesFreePtr->purge();
if (pruneImdtRels) rel_171_FunctionUpdatesFreePtr->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_51(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.Bypassing(stmt) :- 
   MSTOREFreePtr(stmt).
in file memory_addresses.dl [118:1-118:80])_");
if(!(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_174_mloadAliases_Bypassing_op_ctxt,rel_174_mloadAliases_Bypassing->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_174_mloadAliases_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_174_mloadAliases_Bypassing_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mloadAliases.Bypassing(stmt) :- 
   CALLUpdatesFreePtr(stmt).
in file memory_addresses.dl [118:1-118:80])_");
if(!(rel_168_CALLUpdatesFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt,rel_168_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_174_mloadAliases_Bypassing_op_ctxt,rel_174_mloadAliases_Bypassing->createContext());
for(const auto& env0 : *rel_168_CALLUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_174_mloadAliases_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_174_mloadAliases_Bypassing_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_52(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.BlockHasBypassingStmt(block,stmt) :- 
   mloadAliases.Bypassing(stmt),
   Statement_Block(stmt,block).
in file components.dl [37:2-39:33])_");
if(!(rel_174_mloadAliases_Bypassing->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_174_mloadAliases_Bypassing_op_ctxt,rel_174_mloadAliases_Bypassing->createContext());
CREATE_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt,rel_175_mloadAliases_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_174_mloadAliases_Bypassing) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_175_mloadAliases_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_174_mloadAliases_Bypassing->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_53(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   LocalBlockPath(block1,block2),
   mloadAliases.BlockHasBypassingStmt(block2,_),
   LocalBlockPath(block2,block3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2).
in file components.dl [71:2-78:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty()) && !(rel_175_mloadAliases_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt,rel_175_mloadAliases_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[3])) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[1])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !rel_175_mloadAliases_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt)).empty() && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mloadAliases.BlockHasBypassingStmt(block1,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2).
in file components.dl [80:2-83:44])_");
if(!(rel_175_mloadAliases_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt,rel_175_mloadAliases_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_175_mloadAliases_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mloadAliases.BlockHasBypassingStmt(block3,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3).
in file components.dl [85:2-88:44])_");
if(!(rel_175_mloadAliases_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt,rel_175_mloadAliases_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_175_mloadAliases_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_54(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   !mloadAliases.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3).
in file components.dl [90:2-92:81])_");
if(!(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_136_mloadAliases_FromStmtToStmtDiffBlockHavePath->purge();
if (pruneImdtRels) rel_176_mloadAliases_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_55(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtSameBlock(stmt1,stmt3),
   mloadAliases.BlockHasFromStmt(block,stmt1),
   mloadAliases.BlockHasBypassingStmt(block,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3.
in file components.dl [51:2-58:19])_");
if(!(rel_175_mloadAliases_BlockHasBypassingStmt->empty()) && !(rel_150_mloadAliases_FromStmtToStmtSameBlock->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_101_mloadAliases_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt,rel_101_mloadAliases_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt,rel_150_mloadAliases_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt,rel_175_mloadAliases_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_150_mloadAliases_FromStmtToStmtSameBlock) {
auto range = rel_101_mloadAliases_BlockHasFromStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_175_mloadAliases_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_175_mloadAliases_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_101_mloadAliases_BlockHasFromStmt->purge();
if (pruneImdtRels) rel_175_mloadAliases_BlockHasBypassingStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_56(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtSameBlock(stmt1,stmt3),
   !mloadAliases.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3).
in file components.dl [60:2-62:54])_");
if(!(rel_150_mloadAliases_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_150_mloadAliases_FromStmtToStmtSameBlock_op_ctxt,rel_150_mloadAliases_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_150_mloadAliases_FromStmtToStmtSameBlock) {
if( !(rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_150_mloadAliases_FromStmtToStmtSameBlock->purge();
if (pruneImdtRels) rel_178_mloadAliases_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_57(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single17(@generator_0) :- 
   @generator_0 = count : { MLOADFreePtr(+underscore_903) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_30_agg_single17_op_ctxt,rel_30_agg_single17->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_28_MLOADFreePtr->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_30_agg_single17->insert(tuple,READ_OP_CONTEXT(rel_30_agg_single17_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_58(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.ReachableBypassingAny(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt,rel_180_mloadAliases_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_180_mloadAliases_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mloadAliases.ReachableBypassingAny(stmt1,stmt3) :- 
   mloadAliases.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt,rel_180_mloadAliases_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_180_mloadAliases_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_179_mloadAliases_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_177_mloadAliases_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_59(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADSFreePtrUnchanged(mload1,mload2) :- 
   mloadAliases.ReachableBypassingAny(mload1,mload2).
in file memory_addresses.dl [122:1-124:54])_");
if(!(rel_180_mloadAliases_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt,rel_180_mloadAliases_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt,rel_181_MLOADSFreePtrUnchanged->createContext());
for(const auto& env0 : *rel_180_mloadAliases_ReachableBypassingAny) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_181_MLOADSFreePtrUnchanged->insert(tuple,READ_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MLOADSFreePtrUnchanged(mload1,mload2) :- 
   mloadAliases.ReachableBypassingAny(mload2,mload1).
in file memory_addresses.dl [122:1-124:54])_");
if(!(rel_180_mloadAliases_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_180_mloadAliases_ReachableBypassingAny_op_ctxt,rel_180_mloadAliases_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt,rel_181_MLOADSFreePtrUnchanged->createContext());
for(const auto& env0 : *rel_180_mloadAliases_ReachableBypassingAny) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_181_MLOADSFreePtrUnchanged->insert(tuple,READ_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MLOADSFreePtrUnchanged(mloadFreePtr,mloadFreePtr) :- 
   MLOADFreePtr(mloadFreePtr).
in file memory_addresses.dl [126:1-127:30])_");
if(!(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt,rel_181_MLOADSFreePtrUnchanged->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_181_MLOADSFreePtrUnchanged->insert(tuple,READ_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_180_mloadAliases_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_60(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.Bypassing(stmt) :- 
   MSTOREFreePtr(stmt).
in file memory_addresses.dl [60:1-60:86])_");
if(!(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_182_mstoreFreePtrOrder_Bypassing_op_ctxt,rel_182_mstoreFreePtrOrder_Bypassing->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_182_mstoreFreePtrOrder_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_182_mstoreFreePtrOrder_Bypassing_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mstoreFreePtrOrder.Bypassing(stmt) :- 
   CALLUpdatesFreePtr(stmt).
in file memory_addresses.dl [60:1-60:86])_");
if(!(rel_168_CALLUpdatesFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_168_CALLUpdatesFreePtr_op_ctxt,rel_168_CALLUpdatesFreePtr->createContext());
CREATE_OP_CONTEXT(rel_182_mstoreFreePtrOrder_Bypassing_op_ctxt,rel_182_mstoreFreePtrOrder_Bypassing->createContext());
for(const auto& env0 : *rel_168_CALLUpdatesFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_182_mstoreFreePtrOrder_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_182_mstoreFreePtrOrder_Bypassing_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_168_CALLUpdatesFreePtr->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_61(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.BlockHasBypassingStmt(block,stmt) :- 
   mstoreFreePtrOrder.Bypassing(stmt),
   Statement_Block(stmt,block).
in file components.dl [37:2-39:33])_");
if(!(rel_182_mstoreFreePtrOrder_Bypassing->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_182_mstoreFreePtrOrder_Bypassing_op_ctxt,rel_182_mstoreFreePtrOrder_Bypassing->createContext());
CREATE_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt,rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_182_mstoreFreePtrOrder_Bypassing) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_182_mstoreFreePtrOrder_Bypassing->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_62(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   LocalBlockPath(block1,block2),
   mstoreFreePtrOrder.BlockHasBypassingStmt(block2,_),
   LocalBlockPath(block2,block3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2).
in file components.dl [71:2-78:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->empty()) && !(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt,rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[3])) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[1])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt)).empty() && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mstoreFreePtrOrder.BlockHasBypassingStmt(block1,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2).
in file components.dl [80:2-83:44])_");
if(!(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt,rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3) :- 
   mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   mstoreFreePtrOrder.BlockHasBypassingStmt(block3,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3).
in file components.dl [85:2-88:44])_");
if(!(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt,rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_63(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3) :- 
   mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3),
   !mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3).
in file components.dl [90:2-92:81])_");
if(!(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_137_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePath->purge();
if (pruneImdtRels) rel_184_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_64(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3) :- 
   mstoreFreePtrOrder.FromStmtToStmtSameBlock(stmt1,stmt3),
   mstoreFreePtrOrder.BlockHasFromStmt(block,stmt1),
   mstoreFreePtrOrder.BlockHasBypassingStmt(block,stmt2),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3.
in file components.dl [51:2-58:19])_");
if(!(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->empty()) && !(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_102_mstoreFreePtrOrder_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt,rel_102_mstoreFreePtrOrder_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock_op_ctxt,rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt,rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock) {
auto range = rel_102_mstoreFreePtrOrder_BlockHasFromStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_102_mstoreFreePtrOrder_BlockHasFromStmt->purge();
if (pruneImdtRels) rel_183_mstoreFreePtrOrder_BlockHasBypassingStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_65(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3) :- 
   mstoreFreePtrOrder.FromStmtToStmtSameBlock(stmt1,stmt3),
   !mstoreFreePtrOrder.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3).
in file components.dl [60:2-62:54])_");
if(!(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock_op_ctxt,rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock) {
if( !(rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_153_mstoreFreePtrOrder_FromStmtToStmtSameBlock->purge();
if (pruneImdtRels) rel_186_mstoreFreePtrOrder_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_66(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.ReachableBypassingAny(stmt1,stmt3) :- 
   mstoreFreePtrOrder.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt,rel_188_mstoreFreePtrOrder_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_188_mstoreFreePtrOrder_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mstoreFreePtrOrder.ReachableBypassingAny(stmt1,stmt3) :- 
   mstoreFreePtrOrder.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3).
in file components.dl [94:2-96:63])_");
if(!(rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt,rel_188_mstoreFreePtrOrder_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_188_mstoreFreePtrOrder_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_187_mstoreFreePtrOrder_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_185_mstoreFreePtrOrder_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_67(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADFreePtrLoadsValueStoredAt(mload,mstore) :- 
   mstoreFreePtrOrder.ReachableBypassingAny(mstore,mload),
   MLOADFreePtr(mload).
in file memory_addresses.dl [76:1-78:23])_");
if(!(rel_188_mstoreFreePtrOrder_ReachableBypassingAny->empty()) && !(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt,rel_188_mstoreFreePtrOrder_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
for(const auto& env0 : *rel_188_mstoreFreePtrOrder_ReachableBypassingAny) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_189_MLOADFreePtrLoadsValueStoredAt->insert(tuple,READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_68(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarPlusConst(var,const,varPlus) :- 
   ADDFix(_,var,constVar,varPlus),
   BasicVariable_Value(constVar,const).
in file helpers.dl [67:1-69:40])_");
if(!(rel_9_ADDFix->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt,rel_31_VarPlusConst->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[3])}};
rel_31_VarPlusConst->insert(tuple,READ_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarPlusConst(var,"0x0",var) :- 
   Statement_Defines(_,var,_).
in file helpers.dl [71:1-72:32])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt,rel_31_VarPlusConst->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(5)),ramBitCast(env0[1])}};
rel_31_VarPlusConst->insert(tuple,READ_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_69(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREFreePtrOrder(mstore1,mstore2) :- 
   mstoreFreePtrOrder.ReachableBypassingAny(mstore1,mstore2),
   MSTOREFreePtr(mstore2).
in file memory_addresses.dl [64:1-66:26])_");
if(!(rel_188_mstoreFreePtrOrder_ReachableBypassingAny->empty()) && !(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_188_mstoreFreePtrOrder_ReachableBypassingAny_op_ctxt,rel_188_mstoreFreePtrOrder_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
for(const auto& env0 : *rel_188_mstoreFreePtrOrder_ReachableBypassingAny) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_190_MSTOREFreePtrOrder->insert(tuple,READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_188_mstoreFreePtrOrder_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_70(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LoopExitCond(condVar,loop) :- 
   BlockInStructuredLoop(jmpiBlock,loop),
   Block_Tail(jmpiBlock,jmpi),
   JUMPI(jmpi,_,condVar),
   LocalBlockEdge(jmpiBlock,out),
   !BlockInStructuredLoop(out,loop),
   LocalBlockEdge(jmpiBlock,in),
   BlockInStructuredLoop(in,loop).
in file loops.dl [49:1-56:36])_");
if(!(rel_121_LocalBlockEdge->empty()) && !(rel_77_JUMPI->empty()) && !(rel_128_BlockInStructuredLoop->empty()) && !(rel_167_Block_Tail->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_77_JUMPI_op_ctxt,rel_77_JUMPI->createContext());
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt,rel_128_BlockInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_167_Block_Tail_op_ctxt,rel_167_Block_Tail->createContext());
CREATE_OP_CONTEXT(rel_191_LoopExitCond_op_ctxt,rel_191_LoopExitCond->createContext());
for(const auto& env0 : *rel_128_BlockInStructuredLoop) {
auto range = rel_167_Block_Tail->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_167_Block_Tail_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_77_JUMPI->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_77_JUMPI_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_128_BlockInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt)))) {
auto range = rel_121_LocalBlockEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt));
for(const auto& env4 : range) {
if( rel_128_BlockInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_128_BlockInStructuredLoop_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1])}};
rel_191_LoopExitCond->insert(tuple,READ_OP_CONTEXT(rel_191_LoopExitCond_op_ctxt));
break;
}
}
break;
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_77_JUMPI->purge();
if (pruneImdtRels) rel_167_Block_Tail->purge();
if (pruneImdtRels) rel_128_BlockInStructuredLoop->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_71(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","ActualReturnArgs.csv"},{"name","ActualReturnArgs"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"caller\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_192_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << "Error loading ActualReturnArgs data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_72(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction\treturn"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionCallReturn.csv"},{"name","FunctionCallReturn"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"block\", \"function\", \"return\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_193_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << "Error loading FunctionCallReturn data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_73(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inductionVariableFlow.TransferOpcode("AND").
in file loops_semantics.dl [7:1-7:45])_");
[&](){
CREATE_OP_CONTEXT(rel_194_inductionVariableFlow_TransferOpcode_op_ctxt,rel_194_inductionVariableFlow_TransferOpcode->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(9))}};
rel_194_inductionVariableFlow_TransferOpcode->insert(tuple,READ_OP_CONTEXT(rel_194_inductionVariableFlow_TransferOpcode_op_ctxt));
}
();signalHandler->setMsg(R"_(inductionVariableFlow.TransferOpcode("PHI").
in file flows.dl [144:3-144:25])_");
[&](){
CREATE_OP_CONTEXT(rel_194_inductionVariableFlow_TransferOpcode_op_ctxt,rel_194_inductionVariableFlow_TransferOpcode->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(23))}};
rel_194_inductionVariableFlow_TransferOpcode->insert(tuple,READ_OP_CONTEXT(rel_194_inductionVariableFlow_TransferOpcode_op_ctxt));
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_74(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inductionVariableFlow.Flows(x,x) :- 
   isVariable(x).
in file flows.dl [96:3-97:32])_");
if(!(rel_112_isVariable->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_112_isVariable) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_195_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(inductionVariableFlow.Flows(x,y) :- 
   inductionVariableFlow.TransferOpcode(op),
   Statement_Opcode(stmt,op),
   Statement_Block(stmt,block),
   inductionVariableFlow.TransferBoundary(block),
   Statement_Defines(stmt,y,_),
   Statement_Uses(stmt,x,_).
in file flows.dl [108:3-115:32])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_132_inductionVariableFlow_TransferBoundary->empty()) && !(rel_194_inductionVariableFlow_TransferOpcode->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt,rel_132_inductionVariableFlow_TransferBoundary->createContext());
CREATE_OP_CONTEXT(rel_194_inductionVariableFlow_TransferOpcode_op_ctxt,rel_194_inductionVariableFlow_TransferOpcode->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_194_inductionVariableFlow_TransferOpcode) {
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_132_inductionVariableFlow_TransferBoundary->contains(Tuple<RamDomain,1>{{ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env4[1]),ramBitCast(env3[1])}};
rel_195_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
}
}
break;
}
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt,rel_196_delta_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_195_inductionVariableFlow_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_196_delta_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_198_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_198_inductionVariableFlow_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_199_delta_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_199_delta_inductionVariableFlow_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_198_inductionVariableFlow_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_199_delta_inductionVariableFlow_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_199_delta_inductionVariableFlow_FunctionFlowSummary_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(inductionVariableFlow.Flows(actual,actualReturn) :- 
   inductionVariableFlow.FunctionFlowSummary(fn,formal,m),
   FunctionCallReturn(block,fn,_),
   FormalArgs(fn,formal,n),
   ActualArgs(block,actual,n),
   ActualReturnArgs(block,actualReturn,m),
   inductionVariableFlow.TransferBoundary(block).
in file flows.dl [118:3-125:29])_");
if(!(rel_193_FunctionCallReturn->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_132_inductionVariableFlow_TransferBoundary->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_199_delta_inductionVariableFlow_FunctionFlowSummary->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt,rel_132_inductionVariableFlow_TransferBoundary->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt,rel_197_new_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_199_delta_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_199_delta_inductionVariableFlow_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_199_delta_inductionVariableFlow_FunctionFlowSummary) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_132_inductionVariableFlow_TransferBoundary->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_132_inductionVariableFlow_TransferBoundary_op_ctxt))) {
auto range = rel_111_FormalArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_100_ActualArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env4[1])}};
rel_197_new_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inductionVariableFlow.Flows(x,z) :- 
   inductionVariableFlow.Flows(x,y),
   inductionVariableFlow.Flows(y,z). .plan 1:(2,1)
in file flows.dl [135:3-137:17])_");
if(!(rel_196_delta_inductionVariableFlow_Flows->empty()) && !(rel_195_inductionVariableFlow_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt,rel_196_delta_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt,rel_197_new_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_196_delta_inductionVariableFlow_Flows) {
auto range = rel_195_inductionVariableFlow_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt))) && !(rel_196_delta_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_197_new_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inductionVariableFlow.Flows(x,z) :- 
   inductionVariableFlow.Flows(x,y),
   inductionVariableFlow.Flows(y,z). .plan 1:(2,1)
in file flows.dl [135:3-137:17])_");
if(!(rel_196_delta_inductionVariableFlow_Flows->empty()) && !(rel_195_inductionVariableFlow_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt,rel_196_delta_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt,rel_197_new_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_196_delta_inductionVariableFlow_Flows) {
auto range = rel_195_inductionVariableFlow_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1])}};
rel_197_new_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inductionVariableFlow.FunctionFlowSummary(fn,from,n) :- 
   inductionVariableFlow.Flows(from,to),
   FormalReturnArgs(fn,to,n).
in file flows.dl [131:4-133:35])_");
if(!(rel_196_delta_inductionVariableFlow_Flows->empty()) && !(rel_119_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_196_delta_inductionVariableFlow_Flows_op_ctxt,rel_196_delta_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_198_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_198_inductionVariableFlow_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_200_new_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_200_new_inductionVariableFlow_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_196_delta_inductionVariableFlow_Flows) {
auto range = rel_119_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_198_inductionVariableFlow_FunctionFlowSummary->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_198_inductionVariableFlow_FunctionFlowSummary_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_200_new_inductionVariableFlow_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_200_new_inductionVariableFlow_FunctionFlowSummary_op_ctxt));
}
}
}
}
();}
if(rel_197_new_inductionVariableFlow_Flows->empty() && rel_200_new_inductionVariableFlow_FunctionFlowSummary->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_197_new_inductionVariableFlow_Flows_op_ctxt,rel_197_new_inductionVariableFlow_Flows->createContext());
for(const auto& env0 : *rel_197_new_inductionVariableFlow_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_195_inductionVariableFlow_Flows->insert(tuple,READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
}
}
();std::swap(rel_196_delta_inductionVariableFlow_Flows, rel_197_new_inductionVariableFlow_Flows);
rel_197_new_inductionVariableFlow_Flows->purge();
[&](){
CREATE_OP_CONTEXT(rel_198_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_198_inductionVariableFlow_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_200_new_inductionVariableFlow_FunctionFlowSummary_op_ctxt,rel_200_new_inductionVariableFlow_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_200_new_inductionVariableFlow_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_198_inductionVariableFlow_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_198_inductionVariableFlow_FunctionFlowSummary_op_ctxt));
}
}
();std::swap(rel_199_delta_inductionVariableFlow_FunctionFlowSummary, rel_200_new_inductionVariableFlow_FunctionFlowSummary);
rel_200_new_inductionVariableFlow_FunctionFlowSummary->purge();
iter++;
}
iter = 0;
rel_196_delta_inductionVariableFlow_Flows->purge();
rel_197_new_inductionVariableFlow_Flows->purge();
rel_199_delta_inductionVariableFlow_FunctionFlowSummary->purge();
rel_200_new_inductionVariableFlow_FunctionFlowSummary->purge();
if (pruneImdtRels) rel_198_inductionVariableFlow_FunctionFlowSummary->purge();
if (pruneImdtRels) rel_194_inductionVariableFlow_TransferOpcode->purge();
if (pruneImdtRels) rel_132_inductionVariableFlow_TransferBoundary->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_75(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ShiftConst("0x1",0).
in file casts_shifts.dl [80:1-80:22])_");
[&](){
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
Tuple<RamDomain,2> tuple{{ramBitCast(RamSigned(24)),ramBitCast(RamSigned(0))}};
rel_201_ShiftConst->insert(tuple,READ_OP_CONTEXT(rel_201_ShiftConst_op_ctxt));
}
();[&](){
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_202_delta_ShiftConst_op_ctxt,rel_202_delta_ShiftConst->createContext());
for(const auto& env0 : *rel_201_ShiftConst) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_202_delta_ShiftConst->insert(tuple,READ_OP_CONTEXT(rel_202_delta_ShiftConst_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(ShiftConst(cat(oldVal,"00"),(n+1)) :- 
   ShiftConst(oldVal,n),
   n < 30.
in file casts_shifts.dl [82:1-85:10])_");
if(!(rel_202_delta_ShiftConst->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_202_delta_ShiftConst_op_ctxt,rel_202_delta_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_203_new_ShiftConst_op_ctxt,rel_203_new_ShiftConst->createContext());
auto range = rel_202_delta_ShiftConst->lowerUpperRange_02(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(30))}},READ_OP_CONTEXT(rel_202_delta_ShiftConst_op_ctxt));
for(const auto& env0 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(RamSigned(30))) && !(rel_201_ShiftConst->contains(Tuple<RamDomain,2>{{ramBitCast(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(25)))),ramBitCast((ramBitCast<RamSigned>(env0[1]) + ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_201_ShiftConst_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(25)))),ramBitCast((ramBitCast<RamSigned>(env0[1]) + ramBitCast<RamSigned>(RamSigned(1))))}};
rel_203_new_ShiftConst->insert(tuple,READ_OP_CONTEXT(rel_203_new_ShiftConst_op_ctxt));
}
}
}
();}
if(rel_203_new_ShiftConst->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_203_new_ShiftConst_op_ctxt,rel_203_new_ShiftConst->createContext());
for(const auto& env0 : *rel_203_new_ShiftConst) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_201_ShiftConst->insert(tuple,READ_OP_CONTEXT(rel_201_ShiftConst_op_ctxt));
}
}
();std::swap(rel_202_delta_ShiftConst, rel_203_new_ShiftConst);
rel_203_new_ShiftConst->purge();
iter++;
}
iter = 0;
rel_202_delta_ShiftConst->purge();
rel_203_new_ShiftConst->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_76(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LShiftBytes(stmt,shiftedVar,bytes) :- 
   MUL(stmt,shiftedVar,var,_),
   BasicVariable_Value(var,shitftConst),
   ShiftConst(shitftConst,bytes).
in file casts_shifts.dl [92:1-95:34])_");
if(!(rel_13_BasicVariable_Value->empty()) && !(rel_201_ShiftConst->empty()) && !(rel_83_MUL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_83_MUL_op_ctxt,rel_83_MUL->createContext());
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
for(const auto& env0 : *rel_83_MUL) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_201_ShiftConst->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_201_ShiftConst_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_204_LShiftBytes->insert(tuple,READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(LShiftBytes(stmt,shiftedVar,bytes) :- 
   MUL(stmt,var,shiftedVar,_),
   BasicVariable_Value(var,shitftConst),
   ShiftConst(shitftConst,bytes).
in file casts_shifts.dl [92:1-95:34])_");
if(!(rel_13_BasicVariable_Value->empty()) && !(rel_201_ShiftConst->empty()) && !(rel_83_MUL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_83_MUL_op_ctxt,rel_83_MUL->createContext());
CREATE_OP_CONTEXT(rel_201_ShiftConst_op_ctxt,rel_201_ShiftConst->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
for(const auto& env0 : *rel_83_MUL) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_201_ShiftConst->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_201_ShiftConst_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env2[1])}};
rel_204_LShiftBytes->insert(tuple,READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(LShiftBytes(stmt,shiftedVar,(@hex_to_number(shitftBits)/8)) :- 
   SHL(stmt,var,shiftedVar,_),
   BasicVariable_Value(var,shitftBits),
   (@hex_to_number(shitftBits)%8) = 0.
in file casts_shifts.dl [102:1-105:38])_");
if(!(rel_84_SHL->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_84_SHL_op_ctxt,rel_84_SHL->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
for(const auto& env0 : *rel_84_SHL) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) % ramBitCast<RamSigned>(RamSigned(8)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) / ramBitCast<RamSigned>(RamSigned(8))))}};
rel_204_LShiftBytes->insert(tuple,READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tshiftedVar\tbytes"},{"auxArity","0"},{"name","LShiftBytes"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"shiftedVar\", \"bytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_204_LShiftBytes);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_84_SHL->purge();
if (pruneImdtRels) rel_201_ShiftConst->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_77(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mask\tbytes"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","Mask_Length.csv"},{"name","Mask_Length"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"mask\", \"bytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Value\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_205_Mask_Length);
} catch (std::exception& e) {std::cerr << "Error loading Mask_Length data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_78(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LowBytesMaskOp(from,to,1) :- 
   ISZERO(_,from,tmp),
   ISZERO(_,tmp,to).
in file casts_shifts.dl [56:1-58:22])_");
if(!(rel_82_ISZERO->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_82_ISZERO_op_ctxt,rel_82_ISZERO->createContext());
CREATE_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt,rel_206_LowBytesMaskOp->createContext());
for(const auto& env0 : *rel_82_ISZERO) {
auto range = rel_82_ISZERO->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_82_ISZERO_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(RamSigned(1))}};
rel_206_LowBytesMaskOp->insert(tuple,READ_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(LowBytesMaskOp(from,to,castedTo) :- 
   ValueIsByteMask(mask),
   Mask_Length(mask,castedTo),
   BasicVariable_Value(maskVar,mask),
   AND(_,from,maskVar,to).
in file casts_shifts.dl [61:1-65:59])_");
if(!(rel_205_Mask_Length->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_34_ValueIsByteMask->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_34_ValueIsByteMask_op_ctxt,rel_34_ValueIsByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_205_Mask_Length_op_ctxt,rel_205_Mask_Length->createContext());
CREATE_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt,rel_206_LowBytesMaskOp->createContext());
for(const auto& env0 : *rel_34_ValueIsByteMask) {
auto range = rel_205_Mask_Length->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_205_Mask_Length_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_85_AND->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env3[1]),ramBitCast(env3[3]),ramBitCast(env1[1])}};
rel_206_LowBytesMaskOp->insert(tuple,READ_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(LowBytesMaskOp(from,to,castedTo) :- 
   ValueIsByteMask(mask),
   Mask_Length(mask,castedTo),
   BasicVariable_Value(maskVar,mask),
   AND(_,maskVar,from,to).
in file casts_shifts.dl [61:1-65:59])_");
if(!(rel_205_Mask_Length->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_34_ValueIsByteMask->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_34_ValueIsByteMask_op_ctxt,rel_34_ValueIsByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_205_Mask_Length_op_ctxt,rel_205_Mask_Length->createContext());
CREATE_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt,rel_206_LowBytesMaskOp->createContext());
for(const auto& env0 : *rel_34_ValueIsByteMask) {
auto range = rel_205_Mask_Length->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_205_Mask_Length_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_85_AND->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env3[2]),ramBitCast(env3[3]),ramBitCast(env1[1])}};
rel_206_LowBytesMaskOp->insert(tuple,READ_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fromVar\ttoVar\tmaskLen"},{"auxArity","0"},{"name","LowBytesMaskOp"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fromVar\", \"toVar\", \"maskLen\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_206_LowBytesMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_205_Mask_Length->purge();
if (pruneImdtRels) rel_34_ValueIsByteMask->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_79(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ValueWithEvenLength(val,strlen(val)) :- 
   BasicVariable_Value(_,val),
   (strlen(val)%2) = 0.
in file casts_shifts.dl [11:1-14:15])_");
if(!(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt,rel_32_ValueWithEvenLength->createContext());
for(const auto& env0 : *rel_13_BasicVariable_Value) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(static_cast<RamSigned>(symTable.decode(env0[1]).size())) % ramBitCast<RamSigned>(RamSigned(2)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(static_cast<RamSigned>(symTable.decode(env0[1]).size()))}};
rel_32_ValueWithEvenLength->insert(tuple,READ_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_80(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PartialMSTORE(mstore,mload,realFrom,(32-maskBytes)) :- 
   MLOAD(mload,indexVar,loaded),
   MSTORE(mstore,indexVar,from),
   LocalStatementPathInBlock(mload,mstore),
   LowBytesMaskOp(loaded,loadedMasked,maskBytes),
   OR(_,loadedMasked,shifted,from),
   Statement_Defines(shiftStmt,shifted,0),
   LShiftBytes(shiftStmt,realFrom,maskBytes).
in file core.dl [29:1-36:47])_");
if(!(rel_40_MSTORE->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_89_OR->empty()) && !(rel_206_LowBytesMaskOp->empty()) && !(rel_204_LShiftBytes->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_89_OR_op_ctxt,rel_89_OR->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
CREATE_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt,rel_206_LowBytesMaskOp->createContext());
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_206_LowBytesMaskOp->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_89_OR->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_89_OR_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_204_LShiftBytes->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env5[1]),ramBitCast((ramBitCast<RamSigned>(RamSigned(32)) - ramBitCast<RamSigned>(env2[2])))}};
rel_207_PartialMSTORE->insert(tuple,READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PartialMSTORE(mstore,mload,realFrom,(32-maskBytes)) :- 
   MLOAD(mload,indexVar,loaded),
   MSTORE(mstore,indexVar,from),
   LocalStatementPathInBlock(mload,mstore),
   LowBytesMaskOp(loaded,loadedMasked,maskBytes),
   OR(_,shifted,loadedMasked,from),
   Statement_Defines(shiftStmt,shifted,0),
   LShiftBytes(shiftStmt,realFrom,maskBytes).
in file core.dl [29:1-36:47])_");
if(!(rel_40_MSTORE->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_89_OR->empty()) && !(rel_206_LowBytesMaskOp->empty()) && !(rel_204_LShiftBytes->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_89_OR_op_ctxt,rel_89_OR->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
CREATE_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt,rel_206_LowBytesMaskOp->createContext());
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_206_LowBytesMaskOp->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_206_LowBytesMaskOp_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_89_OR->lowerUpperRange_0011(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_89_OR_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_204_LShiftBytes->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env5[1]),ramBitCast((ramBitCast<RamSigned>(RamSigned(32)) - ramBitCast<RamSigned>(env2[2])))}};
rel_207_PartialMSTORE->insert(tuple,READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt));
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmload\tstoredVar\tupdateBytes"},{"auxArity","0"},{"name","PartialMSTORE"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"mload\", \"storedVar\", \"updateBytes\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_207_PartialMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_89_OR->purge();
if (pruneImdtRels) rel_206_LowBytesMaskOp->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_81(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_Value.csv"},{"name","Variable_Value"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_211_Variable_Value);
} catch (std::exception& e) {std::cerr << "Error loading Variable_Value data: " << e.what() << '\n';}
}
signalHandler->setMsg(R"_(InductionVariable(inductionVar,loop) :- 
   ADD(addStmt,v,_,x),
   StatementInStructuredLoop(addStmt,loop),
   inductionVariableFlow.Flows(x,v),
   inductionVariableFlow.Flows(x,inductionVar),
   Statement_Defines(indVarSet,inductionVar,_),
   StatementInStructuredLoop(indVarSet,loop).
in file loops_semantics.dl [14:1-20:47])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_195_inductionVariableFlow_Flows->empty()) && !(rel_131_StatementInStructuredLoop->empty()) && !(rel_8_ADD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
for(const auto& env0 : *rel_8_ADD) {
if( rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt))) {
auto range = rel_131_StatementInStructuredLoop->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_195_inductionVariableFlow_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env3 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env3[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_217_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt));
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariable(inductionVar,loop) :- 
   ADD(addStmt,_,v,x),
   StatementInStructuredLoop(addStmt,loop),
   inductionVariableFlow.Flows(x,v),
   inductionVariableFlow.Flows(x,inductionVar),
   Statement_Defines(indVarSet,inductionVar,_),
   StatementInStructuredLoop(indVarSet,loop).
in file loops_semantics.dl [14:1-20:47])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_195_inductionVariableFlow_Flows->empty()) && !(rel_131_StatementInStructuredLoop->empty()) && !(rel_8_ADD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
for(const auto& env0 : *rel_8_ADD) {
if( rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt))) {
auto range = rel_131_StatementInStructuredLoop->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_195_inductionVariableFlow_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env3 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env3[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_217_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt));
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariable(inductionVar,loop) :- 
   SUB(subStmt,v,_,x),
   StatementInStructuredLoop(subStmt,loop),
   inductionVariableFlow.Flows(x,v),
   inductionVariableFlow.Flows(x,inductionVar),
   Statement_Defines(indVarSet,inductionVar,_),
   StatementInStructuredLoop(indVarSet,loop).
in file loops_semantics.dl [23:1-29:47])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_195_inductionVariableFlow_Flows->empty()) && !(rel_131_StatementInStructuredLoop->empty()) && !(rel_51_SUB->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt,rel_195_inductionVariableFlow_Flows->createContext());
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
for(const auto& env0 : *rel_51_SUB) {
if( rel_195_inductionVariableFlow_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt))) {
auto range = rel_131_StatementInStructuredLoop->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_195_inductionVariableFlow_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_195_inductionVariableFlow_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env3 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env3[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_217_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt));
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(msize,"++"),"0")) :- 
   MSIZE(msize,to).
in file memory_addresses.dl [189:1-192:36])_");
if(!(rel_3_MSIZE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
for(const auto& env0 : *rel_3_MSIZE) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27))))}};
rel_229_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),"0")) :- 
   MLOADFreePtr_To(mload,to).
in file memory_addresses.dl [203:1-206:36])_");
if(!(rel_29_MLOADFreePtr_To->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27))))}};
rel_229_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(msize,"++"),"0"),msize,0,0) :- 
   MSIZE(msize,_).
in file memory_addresses.dl [189:1-192:36])_");
if(!(rel_3_MSIZE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_3_MSIZE) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27)))),ramBitCast(env0[0]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}};
rel_232_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),"0"),mload,0,0) :- 
   MLOADFreePtr_To(mload,_).
in file memory_addresses.dl [203:1-206:36])_");
if(!(rel_29_MLOADFreePtr_To->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[0]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27)))),ramBitCast(env0[0]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}};
rel_232_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLength(mstore,addrVar,32) :- 
   MSTORE(mstore,addrVar,_),
   !PartialMSTORE(mstore,_,_,_).
in file core.dl [135:1-137:35])_");
if(!(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( !(!rel_207_PartialMSTORE->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(32))}};
rel_244_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLength(mstore,addrVar,bytes) :- 
   MSTORE(mstore,addrVar,_),
   PartialMSTORE(mstore,_,_,bytes).
in file core.dl [139:1-141:38])_");
if(!(rel_40_MSTORE->empty()) && !(rel_207_PartialMSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
auto range = rel_207_PartialMSTORE->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[3])}};
rel_244_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLength(mstore,addrVar,1) :- 
   MSTORE8(mstore,addrVar,_).
in file core.dl [143:1-144:31])_");
if(!(rel_60_MSTORE8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_60_MSTORE8_op_ctxt,rel_60_MSTORE8->createContext());
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_60_MSTORE8) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(1))}};
rel_244_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   MSTORE(_,indexVar,_).
in file core.dl [192:1-199:39])_");
if(!(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   MSTORE8(_,indexVar,_).
in file core.dl [192:1-199:39])_");
if(!(rel_60_MSTORE8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_60_MSTORE8_op_ctxt,rel_60_MSTORE8->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_60_MSTORE8) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   VariableLengthMemoryCopyStatement(_,indexVar,_).
in file core.dl [192:1-199:39])_");
if(!(rel_75_VariableLengthMemoryCopyStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_75_VariableLengthMemoryCopyStatement) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   CALLReturnDataStartVar(_,indexVar).
in file core.dl [192:1-199:39])_");
if(!(rel_56_CALLReturnDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_56_CALLReturnDataStartVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   StatementUsesMemory_StartVar(_,_,indexVar).
in file core.dl [192:1-199:39])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[2])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   MLOAD(_,indexVar,_).
in file core.dl [192:1-199:39])_");
if(!(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_208_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_208_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_209_delta_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_209_delta_variableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_208_variableValueConstantFolding_RequestConstantFold2) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_209_delta_variableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_209_delta_variableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
for(const auto& env0 : *rel_211_Variable_Value) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_212_delta_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt,rel_214_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt,rel_215_delta_AuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_214_AuxStatementOpAndConstantArgValues) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_215_delta_AuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_218_delta_InductionVariable_op_ctxt,rel_218_delta_InductionVariable->createContext());
for(const auto& env0 : *rel_217_InductionVariable) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_218_delta_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_218_delta_InductionVariable_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt,rel_220_GlobalInductionVariableStore->createContext());
CREATE_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt,rel_221_delta_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_220_GlobalInductionVariableStore) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_221_delta_GlobalInductionVariableStore->insert(tuple,READ_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
for(const auto& env0 : *rel_223_Variable_NumericValue) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_224_delta_Variable_NumericValue->insert(tuple,READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt,rel_227_delta_MSTOREFreePtr_IncByAmount->createContext());
for(const auto& env0 : *rel_226_MSTOREFreePtr_IncByAmount) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_227_delta_MSTOREFreePtr_IncByAmount->insert(tuple,READ_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
for(const auto& env0 : *rel_229_Variable_SymbolicValue) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_230_delta_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_232_FreePointerBasedValue) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_233_delta_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_235_FreePointerBasedValuesWithFreePointerAliases) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_239_delta_FreePointerBasedValuesNumDiff_op_ctxt,rel_239_delta_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_238_FreePointerBasedValuesNumDiff) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_239_delta_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_239_delta_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
CREATE_OP_CONTEXT(rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals->insert(tuple,READ_OP_CONTEXT(rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_245_delta_StatementWritesMemoryOfConstantLength_op_ctxt,rel_245_delta_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_244_StatementWritesMemoryOfConstantLength) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_245_delta_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_245_delta_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
CREATE_OP_CONTEXT(rel_248_delta_MemoryAddressVar_op_ctxt,rel_248_delta_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_247_MemoryAddressVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_248_delta_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_248_delta_MemoryAddressVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt,rel_251_delta_MemoryAddressVariable_Function->createContext());
for(const auto& env0 : *rel_250_MemoryAddressVariable_Function) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_251_delta_MemoryAddressVariable_Function->insert(tuple,READ_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt,rel_254_delta_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_253_MemoryAddressVarsNumDiff) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_254_delta_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_257_delta_PossibleStructAllocation_op_ctxt,rel_257_delta_PossibleStructAllocation->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_257_delta_PossibleStructAllocation->insert(tuple,READ_OP_CONTEXT(rel_257_delta_PossibleStructAllocation_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_259_PossibleStructArg_op_ctxt,rel_259_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_260_delta_PossibleStructArg_op_ctxt,rel_260_delta_PossibleStructArg->createContext());
for(const auto& env0 : *rel_259_PossibleStructArg) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_260_delta_PossibleStructArg->insert(tuple,READ_OP_CONTEXT(rel_260_delta_PossibleStructArg_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt,rel_262_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt,rel_263_delta_InductionVariableIncreasesByConst->createContext());
for(const auto& env0 : *rel_262_InductionVariableIncreasesByConst) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_263_delta_InductionVariableIncreasesByConst->insert(tuple,READ_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt,rel_266_delta_InductionVariableLowerBoundVar->createContext());
for(const auto& env0 : *rel_265_InductionVariableLowerBoundVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_266_delta_InductionVariableLowerBoundVar->insert(tuple,READ_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt,rel_269_delta_InductionVariableUpperBoundVar->createContext());
for(const auto& env0 : *rel_268_InductionVariableUpperBoundVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_269_delta_InductionVariableUpperBoundVar->insert(tuple,READ_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_272_delta_MemoryCopyLoop_op_ctxt,rel_272_delta_MemoryCopyLoop->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_272_delta_MemoryCopyLoop->insert(tuple,READ_OP_CONTEXT(rel_272_delta_MemoryCopyLoop_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_275_delta_MemoryCopyLoopConstLength_op_ctxt,rel_275_delta_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_274_MemoryCopyLoopConstLength) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_275_delta_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_275_delta_MemoryCopyLoopConstLength_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_277_WellFormedLoopInductionVariable_op_ctxt,rel_277_WellFormedLoopInductionVariable->createContext());
CREATE_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt,rel_278_delta_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_277_WellFormedLoopInductionVariable) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_278_delta_WellFormedLoopInductionVariable->insert(tuple,READ_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_281_delta_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_281_delta_StatementWritesMemoryCopiedFromLoop->insert(tuple,READ_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt,rel_283_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_284_delta_CALLReturnDataLengthVal_op_ctxt,rel_284_delta_CALLReturnDataLengthVal->createContext());
for(const auto& env0 : *rel_283_CALLReturnDataLengthVal) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_284_delta_CALLReturnDataLengthVal->insert(tuple,READ_OP_CONTEXT(rel_284_delta_CALLReturnDataLengthVal_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt,rel_286_CALLReturnsFixedSizeData->createContext());
CREATE_OP_CONTEXT(rel_287_delta_CALLReturnsFixedSizeData_op_ctxt,rel_287_delta_CALLReturnsFixedSizeData->createContext());
for(const auto& env0 : *rel_286_CALLReturnsFixedSizeData) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_287_delta_CALLReturnsFixedSizeData->insert(tuple,READ_OP_CONTEXT(rel_287_delta_CALLReturnsFixedSizeData_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_290_delta_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_290_delta_variableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_289_variableValueConstantFolding_ConstantFoldResult2) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_290_delta_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_290_delta_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_292_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_292_variableValueConstantFolding_ValidConstantFoldOperation) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(variableValueConstantFolding.RequestConstantFold2(op,a_val,b_val) :- 
   AuxStatementOpAndConstantArgValues(_,op,a_val,b_val).
in file constant_folding_variable_value.dl [24:1-25:59])_");
if(!(rel_215_delta_AuxStatementOpAndConstantArgValues->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_208_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_208_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_210_new_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_210_new_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt,rel_215_delta_AuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_215_delta_AuxStatementOpAndConstantArgValues) {
if( !(rel_208_variableValueConstantFolding_RequestConstantFold2->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_208_variableValueConstantFolding_RequestConstantFold2_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_210_new_variableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_210_new_variableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,result) :- 
   variableValueConstantFolding.ConstantFoldResult2(op,a_val,b_val,result),
   AuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val),
   Statement_Defines(stmt,to,_). .plan 1:(2,1,3)
in file constant_folding_variable_value.dl [27:1-30:34])_");
if(!(rel_214_AuxStatementOpAndConstantArgValues->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_290_delta_variableValueConstantFolding_ConstantFoldResult2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt,rel_214_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt,rel_215_delta_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_290_delta_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_290_delta_variableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_290_delta_variableValueConstantFolding_ConstantFoldResult2) {
auto range = rel_214_AuxStatementOpAndConstantArgValues->lowerUpperRange_0111(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_215_delta_AuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt)))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env0[3])}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,result) :- 
   variableValueConstantFolding.ConstantFoldResult2(op,a_val,b_val,result),
   AuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val),
   Statement_Defines(stmt,to,_). .plan 1:(2,1,3)
in file constant_folding_variable_value.dl [27:1-30:34])_");
if(!(rel_289_variableValueConstantFolding_ConstantFoldResult2->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_215_delta_AuxStatementOpAndConstantArgValues->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_215_delta_AuxStatementOpAndConstantArgValues_op_ctxt,rel_215_delta_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_215_delta_AuxStatementOpAndConstantArgValues) {
auto range = rel_289_variableValueConstantFolding_ConstantFoldResult2->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env1[3])}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,val) :- 
   UniqueMSTOREMLOADForAddrVar(store,load),
   MSTORE(store,var,from),
   MLOAD(load,var,to),
   LocalStatementPathInBlock(store,load),
   Variable_Value(from,val).
in file misc.dl [142:1-147:29])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_10_MLOAD->empty()) && !(rel_40_MSTORE->empty()) && !(rel_212_delta_Variable_Value->empty()) && !(rel_46_UniqueMSTOREMLOADForAddrVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_46_UniqueMSTOREMLOADForAddrVar_op_ctxt,rel_46_UniqueMSTOREMLOADForAddrVar->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
for(const auto& env0 : *rel_46_UniqueMSTOREMLOADForAddrVar) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env3[1])}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,val) :- 
   UniqueMSTOREMLOADForAddrVar(store,load),
   MSTORE(store,var,from),
   MLOAD(load,var,to),
   Statement_Block(store,storeBlock),
   Statement_Block(load,loadBlock),
   Dominates(storeBlock,loadBlock),
   Variable_Value(from,val).
in file misc.dl [150:1-157:29])_");
if(!(rel_125_Dominates->empty()) && !(rel_46_UniqueMSTOREMLOADForAddrVar->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_10_MLOAD->empty()) && !(rel_212_delta_Variable_Value->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_46_UniqueMSTOREMLOADForAddrVar_op_ctxt,rel_46_UniqueMSTOREMLOADForAddrVar->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
for(const auto& env0 : *rel_46_UniqueMSTOREMLOADForAddrVar) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(env5[1])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env5[1])}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,as(@number_to_hex((numVal1-numVal2)), Value)) :- 
   SUB(_,var1,var2,to),
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValue(freePtrBasedVal1,_,_,numVal1),
   Variable_SymbolicValue(var2,freePtrBasedVal2),
   FreePointerBasedValue(freePtrBasedVal2,_,_,numVal2),
   FreePointerBasedValuesWithFreePointerAliases(freePtrBasedVal1,freePtrBasedVal2).
in file memory_addresses.dl [266:1-273:27])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_51_SUB->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)) && !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt))) && !(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3])}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,as(@number_to_hex((numVal1-numVal2)), Value)) :- 
   SUB(_,var1,var2,to),
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValue(freePtrBasedVal1,_,_,numVal1),
   Variable_SymbolicValue(var2,freePtrBasedVal2),
   FreePointerBasedValue(freePtrBasedVal2,_,_,numVal2),
   FreePointerBasedValuesWithFreePointerAliases(freePtrBasedVal1,freePtrBasedVal2).
in file memory_addresses.dl [266:1-273:27])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)) && !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt))) && !(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3])}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,as(@number_to_hex((numVal1-numVal2)), Value)) :- 
   SUB(_,var1,var2,to),
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValue(freePtrBasedVal1,_,_,numVal1),
   Variable_SymbolicValue(var2,freePtrBasedVal2),
   FreePointerBasedValue(freePtrBasedVal2,_,_,numVal2),
   FreePointerBasedValuesWithFreePointerAliases(freePtrBasedVal1,freePtrBasedVal2).
in file memory_addresses.dl [266:1-273:27])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_51_SUB->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)) && !(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3])}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,as(@number_to_hex((numVal1-numVal2)), Value)) :- 
   SUB(_,var1,var2,to),
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValue(freePtrBasedVal1,_,_,numVal1),
   Variable_SymbolicValue(var2,freePtrBasedVal2),
   FreePointerBasedValue(freePtrBasedVal2,_,_,numVal2),
   FreePointerBasedValuesWithFreePointerAliases(freePtrBasedVal1,freePtrBasedVal2).
in file memory_addresses.dl [266:1-273:27])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)) && !(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_Value(to,as(@number_to_hex((numVal1-numVal2)), Value)) :- 
   SUB(_,var1,var2,to),
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValue(freePtrBasedVal1,_,_,numVal1),
   Variable_SymbolicValue(var2,freePtrBasedVal2),
   FreePointerBasedValue(freePtrBasedVal2,_,_,numVal2),
   FreePointerBasedValuesWithFreePointerAliases(freePtrBasedVal1,freePtrBasedVal2).
in file memory_addresses.dl [266:1-273:27])_");
if(!(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_51_SUB->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)(ramBitCast<RamSigned>(env2[3]) - ramBitCast<RamSigned>(env4[3]))))))}};
rel_213_new_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(AuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val) :- 
   Variable_Value(a,a_val),
   AuxStatementOpAndArgs(stmt,op,a,b),
   Variable_Value(b,b_val). .plan 1:(3,2,1)
in file constant_folding_variable_value.dl [17:1-20:28])_");
if(!(rel_12_AuxStatementOpAndArgs->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt,rel_12_AuxStatementOpAndArgs->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt,rel_214_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_216_new_AuxStatementOpAndConstantArgValues_op_ctxt,rel_216_new_AuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_212_delta_Variable_Value) {
auto range = rel_12_AuxStatementOpAndArgs->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_212_delta_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env1[3]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt))) && !(rel_214_AuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_216_new_AuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_216_new_AuxStatementOpAndConstantArgValues_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(AuxStatementOpAndConstantArgValues(stmt,op,a_val,b_val) :- 
   Variable_Value(a,a_val),
   AuxStatementOpAndArgs(stmt,op,a,b),
   Variable_Value(b,b_val). .plan 1:(3,2,1)
in file constant_folding_variable_value.dl [17:1-20:28])_");
if(!(rel_12_AuxStatementOpAndArgs->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt,rel_12_AuxStatementOpAndArgs->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt,rel_214_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_216_new_AuxStatementOpAndConstantArgValues_op_ctxt,rel_216_new_AuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_212_delta_Variable_Value) {
auto range = rel_12_AuxStatementOpAndArgs->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_12_AuxStatementOpAndArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_214_AuxStatementOpAndConstantArgValues->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[1])}};
rel_216_new_AuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_216_new_AuxStatementOpAndConstantArgValues_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariable(var,loop) :- 
   SLOAD(loadStmt,index,var),
   Variable_Value(index,storeVal),
   GlobalInductionVariableStore(storeVal,loop),
   StatementInStructuredLoop(loadStmt,loop).
in file loops_semantics.dl [57:1-61:45])_");
if(!(rel_212_delta_Variable_Value->empty()) && !(rel_220_GlobalInductionVariableStore->empty()) && !(rel_78_SLOAD->empty()) && !(rel_131_StatementInStructuredLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_219_new_InductionVariable_op_ctxt,rel_219_new_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt,rel_220_GlobalInductionVariableStore->createContext());
CREATE_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt,rel_221_delta_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_78_SLOAD) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_220_GlobalInductionVariableStore->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt));
for(const auto& env2 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt)) && !(rel_217_InductionVariable->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt))) && !(rel_221_delta_GlobalInductionVariableStore->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(env2[1])}};
rel_219_new_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_219_new_InductionVariable_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariable(var,loop) :- 
   SLOAD(loadStmt,index,var),
   Variable_Value(index,storeVal),
   GlobalInductionVariableStore(storeVal,loop),
   StatementInStructuredLoop(loadStmt,loop).
in file loops_semantics.dl [57:1-61:45])_");
if(!(rel_211_Variable_Value->empty()) && !(rel_221_delta_GlobalInductionVariableStore->empty()) && !(rel_78_SLOAD->empty()) && !(rel_131_StatementInStructuredLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_219_new_InductionVariable_op_ctxt,rel_219_new_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt,rel_221_delta_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_78_SLOAD) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_221_delta_GlobalInductionVariableStore->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_221_delta_GlobalInductionVariableStore_op_ctxt));
for(const auto& env2 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt)) && !(rel_217_InductionVariable->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(env2[1])}};
rel_219_new_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_219_new_InductionVariable_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(GlobalInductionVariableStore(storeVal,loop) :- 
   SLOAD(loadStmt,index,var),
   ADD(addStmt,var,_,addvar),
   SSTORE(storeStmt,index,addvar),
   StatementInStructuredLoop(loadStmt,loop),
   StatementInStructuredLoop(addStmt,loop),
   StatementInStructuredLoop(storeStmt,loop),
   Variable_Value(index,storeVal).
in file loops_semantics.dl [48:1-55:36])_");
if(!(rel_131_StatementInStructuredLoop->empty()) && !(rel_78_SLOAD->empty()) && !(rel_79_SSTORE->empty()) && !(rel_8_ADD->empty()) && !(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_79_SSTORE_op_ctxt,rel_79_SSTORE->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt,rel_220_GlobalInductionVariableStore->createContext());
CREATE_OP_CONTEXT(rel_222_new_GlobalInductionVariableStore_op_ctxt,rel_222_new_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_78_SLOAD) {
auto range = rel_8_ADD->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_8_ADD_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_79_SSTORE->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env1[3])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_79_SSTORE_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_131_StatementInStructuredLoop->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
for(const auto& env3 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt)) && rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_220_GlobalInductionVariableStore->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env4[1]),ramBitCast(env3[1])}};
rel_222_new_GlobalInductionVariableStore->insert(tuple,READ_OP_CONTEXT(rel_222_new_GlobalInductionVariableStore_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(GlobalInductionVariableStore(storeVal,loop) :- 
   SLOAD(loadStmt,index,var),
   ADD(addStmt,_,var,addvar),
   SSTORE(storeStmt,index,addvar),
   StatementInStructuredLoop(loadStmt,loop),
   StatementInStructuredLoop(addStmt,loop),
   StatementInStructuredLoop(storeStmt,loop),
   Variable_Value(index,storeVal).
in file loops_semantics.dl [48:1-55:36])_");
if(!(rel_131_StatementInStructuredLoop->empty()) && !(rel_78_SLOAD->empty()) && !(rel_79_SSTORE->empty()) && !(rel_8_ADD->empty()) && !(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_79_SSTORE_op_ctxt,rel_79_SSTORE->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt,rel_220_GlobalInductionVariableStore->createContext());
CREATE_OP_CONTEXT(rel_222_new_GlobalInductionVariableStore_op_ctxt,rel_222_new_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_78_SLOAD) {
auto range = rel_8_ADD->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_8_ADD_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_79_SSTORE->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env1[3])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_79_SSTORE_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_131_StatementInStructuredLoop->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt));
for(const auto& env3 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt)) && rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_220_GlobalInductionVariableStore->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env4[1]),ramBitCast(env3[1])}};
rel_222_new_GlobalInductionVariableStore->insert(tuple,READ_OP_CONTEXT(rel_222_new_GlobalInductionVariableStore_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_NumericValue(var,@hex_to_number(val)) :- 
   Variable_Value(var,val).
in file helpers.dl [21:1-22:28])_");
if(!(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_225_new_Variable_NumericValue_op_ctxt,rel_225_new_Variable_NumericValue->createContext());
for(const auto& env0 : *rel_212_delta_Variable_Value) {
if( !(rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(functors::hex_to_number(symTable.decode(env0[1]).c_str()))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(functors::hex_to_number(symTable.decode(env0[1]).c_str()))}};
rel_225_new_Variable_NumericValue->insert(tuple,READ_OP_CONTEXT(rel_225_new_Variable_NumericValue_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MSTOREFreePtr_IncByAmount(mstore,amount) :- 
   MSTOREFreePtr(mstore),
   MSTORE(mstore,_,storedVar),
   Variable_SymbolicValue(storedVar,storedVal),
   FreePointerBasedValue(storedVal,mload,_,amount),
   MSTOREFreePtrOrder(prevMstore,mstore),
   MLOADFreePtrLoadsValueStoredAt(mload,prevMstore).
in file memory_addresses.dl [91:1-97:53])_");
if(!(rel_40_MSTORE->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_189_MLOADFreePtrLoadsValueStoredAt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_228_new_MSTOREFreePtr_IncByAmount_op_ctxt,rel_228_new_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_226_MSTOREFreePtr_IncByAmount->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt)))) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env4 : range) {
if( rel_189_MLOADFreePtrLoadsValueStoredAt->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[3])}};
rel_228_new_MSTOREFreePtr_IncByAmount->insert(tuple,READ_OP_CONTEXT(rel_228_new_MSTOREFreePtr_IncByAmount_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MSTOREFreePtr_IncByAmount(mstore,amount) :- 
   MSTOREFreePtr(mstore),
   MSTORE(mstore,_,storedVar),
   Variable_SymbolicValue(storedVar,storedVal),
   FreePointerBasedValue(storedVal,mload,_,amount),
   MSTOREFreePtrOrder(prevMstore,mstore),
   MLOADFreePtrLoadsValueStoredAt(mload,prevMstore).
in file memory_addresses.dl [91:1-97:53])_");
if(!(rel_40_MSTORE->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_189_MLOADFreePtrLoadsValueStoredAt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_228_new_MSTOREFreePtr_IncByAmount_op_ctxt,rel_228_new_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_226_MSTOREFreePtr_IncByAmount->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt)))) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env4 : range) {
if( rel_189_MLOADFreePtrLoadsValueStoredAt->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[3])}};
rel_228_new_MSTOREFreePtr_IncByAmount->insert(tuple,READ_OP_CONTEXT(rel_228_new_MSTOREFreePtr_IncByAmount_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,val1) :- 
   PHIStmtTwoUses(_,msizeVar,mloadFreePtrVar,to),
   Variable_SymbolicValue(msizeVar,val1),
   Variable_SymbolicValue(mloadFreePtrVar,val2),
   FreePointerBasedValue(val1,msize,0,0),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,mload,0,0),
   MLOADFreePtr(mload).
in file memory_addresses.dl [194:1-201:23])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_3_MSIZE->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_28_MLOADFreePtr->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_49_PHIStmtTwoUses) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty() && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env3[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt)) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env4[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,val1) :- 
   PHIStmtTwoUses(_,msizeVar,mloadFreePtrVar,to),
   Variable_SymbolicValue(msizeVar,val1),
   Variable_SymbolicValue(mloadFreePtrVar,val2),
   FreePointerBasedValue(val1,msize,0,0),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,mload,0,0),
   MLOADFreePtr(mload).
in file memory_addresses.dl [194:1-201:23])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_3_MSIZE->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_28_MLOADFreePtr->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_49_PHIStmtTwoUses) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty() && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env3[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt)) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env4[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,val1) :- 
   PHIStmtTwoUses(_,msizeVar,mloadFreePtrVar,to),
   Variable_SymbolicValue(msizeVar,val1),
   Variable_SymbolicValue(mloadFreePtrVar,val2),
   FreePointerBasedValue(val1,msize,0,0),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,mload,0,0),
   MLOADFreePtr(mload).
in file memory_addresses.dl [194:1-201:23])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_3_MSIZE->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_28_MLOADFreePtr->empty()) && !(rel_49_PHIStmtTwoUses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_49_PHIStmtTwoUses) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt)) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env4[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,val1) :- 
   PHIStmtTwoUses(_,msizeVar,mloadFreePtrVar,to),
   Variable_SymbolicValue(msizeVar,val1),
   Variable_SymbolicValue(mloadFreePtrVar,val2),
   FreePointerBasedValue(val1,msize,0,0),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,mload,0,0),
   MLOADFreePtr(mload).
in file memory_addresses.dl [194:1-201:23])_");
if(!(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_3_MSIZE->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_28_MLOADFreePtr->empty()) && !(rel_49_PHIStmtTwoUses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_49_PHIStmtTwoUses) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty()) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1011(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
break;
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(formal,cat(cat(formal,"++"),"0")) :- 
   PossibleStructArg(_,_,formal).
in file memory_addresses.dl [209:1-212:37])_");
if(!(rel_260_delta_PossibleStructArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_260_delta_PossibleStructArg_op_ctxt,rel_260_delta_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
for(const auto& env0 : *rel_260_delta_PossibleStructArg) {
if( !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal+numVal2)))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal+numVal2)))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal+numVal2)))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   ADDFix(_,numVar,freePtrBasedVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal2-numVal)))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal2-numVal)))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string((numVal2-numVal)))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(to,cat(cat(mload,"++"),to_string(numVal2))) :- 
   SUB(_,freePtrBasedVar,numVar,to),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string((numDiff+numVal)))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_281_delta_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_281_delta_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_281_delta_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string((numDiff+numVal)))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string((numDiff+numVal)))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string(numVal))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_281_delta_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_281_delta_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_281_delta_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string(numVal))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Variable_SymbolicValue(newIndexVar,cat(cat(mload,"++"),to_string(numVal))) :- 
   StatementWritesMemoryCopiedFromLoop(_,newIndexVar,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,_,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(rel_229_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3])))))}};
rel_231_new_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(formal,"++"),"0"),as(formal, Statement),0,0) :- 
   PossibleStructArg(_,_,formal).
in file memory_addresses.dl [209:1-212:37])_");
if(!(rel_260_delta_PossibleStructArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_260_delta_PossibleStructArg_op_ctxt,rel_260_delta_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_260_delta_PossibleStructArg) {
if( !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27)))),ramBitCast(env0[2]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(26)))) + symTable.decode(RamSigned(27)))),ramBitCast(env0[2]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal+numVal2))),mload,depth,(numVal+numVal2)) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal+numVal2))),mload,depth,(numVal+numVal2)) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal+numVal2))),mload,depth,(numVal+numVal2)) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal+numVal2) != numVal2.
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   ADDFix(_,numVar,freePtrBasedVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal+numVal2).
in file memory_addresses.dl [218:1-229:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env3[3])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal2-numVal))),mload,depth,(numVal2-numVal)) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal2-numVal))),mload,depth,(numVal2-numVal)) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numVal2-numVal))),mload,depth,(numVal2-numVal)) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   (numVal2-numVal) != numVal2.
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))) != ramBitCast<RamDomain>(env3[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1]))))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_224_delta_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal2)),mload,depth,numVal2) :- 
   SUB(_,freePtrBasedVar,numVar,_),
   Variable_NumericValue(numVar,numVal),
   Variable_SymbolicValue(freePtrBasedVar,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal2),
   numVal2 = (numVal2-numVal).
in file memory_addresses.dl [231:1-242:47])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_51_SUB->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_51_SUB) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[3]) - ramBitCast<RamSigned>(env1[1])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env3[3]))))),ramBitCast(env3[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numDiff+numVal))),mload,depth,(numDiff+numVal)) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_281_delta_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_281_delta_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_281_delta_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numDiff+numVal))),mload,depth,(numDiff+numVal)) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string((numDiff+numVal))),mload,depth,(numDiff+numVal)) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   (numDiff+numVal) != numVal.
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))) != ramBitCast<RamDomain>(env2[3])) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3]))))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal)),mload,depth,numVal) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_281_delta_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_281_delta_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_281_delta_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_281_delta_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal)),mload,depth,numVal) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(rel_233_delta_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValue(cat(cat(mload,"++"),to_string(numVal)),mload,depth,numVal) :- 
   StatementWritesMemoryCopiedFromLoop(_,_,memAddrTo,numDiff,_),
   Variable_SymbolicValue(memAddrTo,freePtrBasedVal),
   FreePointerBasedValue(freePtrBasedVal,mload,depth,numVal),
   numVal = (numDiff+numVal).
in file memory_addresses.dl [249:1-259:47])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env2[3])))) && !(rel_232_FreePointerBasedValue->contains(Tuple<RamDomain,4>{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(26)))) + symTable.decode(symTable.encode(std::to_string(env2[3]))))),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_234_new_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,mload1,_,_),
   MLOADSFreePtrUnchanged(mload1,mload2),
   FreePointerBasedValue(val2,mload2,_,_). .plan 1:(3,2,1)
in file memory_addresses.dl [275:1-278:45])_");
if(!(rel_181_MLOADSFreePtrUnchanged->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt,rel_181_MLOADSFreePtrUnchanged->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_181_MLOADSFreePtrUnchanged->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,mload1,_,_),
   MLOADSFreePtrUnchanged(mload1,mload2),
   FreePointerBasedValue(val2,mload2,_,_). .plan 1:(3,2,1)
in file memory_addresses.dl [275:1-278:45])_");
if(!(rel_181_MLOADSFreePtrUnchanged->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt,rel_181_MLOADSFreePtrUnchanged->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_181_MLOADSFreePtrUnchanged->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_181_MLOADSFreePtrUnchanged_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,mload,_,_),
   FreePointerBasedValue(val2,mload,_,_). .plan 1:(2,1)
in file memory_addresses.dl [282:1-284:44])_");
if(!(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,mload,_,_),
   FreePointerBasedValue(val2,mload,_,_). .plan 1:(2,1)
in file memory_addresses.dl [282:1-284:44])_");
if(!(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,msize,_,_),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,msize,_,_). .plan 1:(3,2,1)
in file memory_addresses.dl [287:1-290:44])_");
if(!(rel_3_MSIZE->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliases(val1,val2) :- 
   FreePointerBasedValue(val1,msize,_,_),
   MSIZE(msize,_),
   FreePointerBasedValue(val2,msize,_,_). .plan 1:(3,2,1)
in file memory_addresses.dl [287:1-290:44])_");
if(!(rel_3_MSIZE->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
if( !rel_3_MSIZE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_235_FreePointerBasedValuesWithFreePointerAliases->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val1,val2,(num1-num2)) :- 
   FreePointerBasedValuesWithFreePointerAliasesNumVals(val1,val2,num1,num2).
in file memory_addresses.dl [299:1-300:79])_");
if(!(rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env0[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env0[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val1,val2,((-(amount)-numVal2)+numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_227_delta_MSTOREFreePtr_IncByAmount->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt,rel_227_delta_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_190_MSTOREFreePtrOrder) {
auto range = rel_227_delta_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env3[0]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env3[0]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env3[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env1[1])))) - ramBitCast<RamSigned>(env5[3]))) + ramBitCast<RamSigned>(env3[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3])}},Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env3[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env1[1])))) - ramBitCast<RamSigned>(env5[3]))) + ramBitCast<RamSigned>(env3[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val1,val2,((-(amount)-numVal2)+numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_226_MSTOREFreePtr_IncByAmount->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_226_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3])}},Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env3[1])))) - ramBitCast<RamSigned>(env5[3]))) + ramBitCast<RamSigned>(env0[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env3[1])))) - ramBitCast<RamSigned>(env5[3]))) + ramBitCast<RamSigned>(env0[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val1,val2,((-(amount)-numVal2)+numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_226_MSTOREFreePtr_IncByAmount->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_226_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env2[1])))) - ramBitCast<RamSigned>(env0[3]))) + ramBitCast<RamSigned>(env5[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((-(ramBitCast<RamSigned>(env2[1])))) - ramBitCast<RamSigned>(env0[3]))) + ramBitCast<RamSigned>(env5[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val2,val1,((amount+numVal2)-numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_227_delta_MSTOREFreePtr_IncByAmount->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt,rel_227_delta_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_190_MSTOREFreePtrOrder) {
auto range = rel_227_delta_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_227_delta_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env3[0]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3])}},Tuple<RamDomain,4>{{ramBitCast(env3[0]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env5[0]),ramBitCast(env3[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env5[3]))) - ramBitCast<RamSigned>(env3[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3])}},Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env5[0]),ramBitCast(env3[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[1]) + ramBitCast<RamSigned>(env5[3]))) - ramBitCast<RamSigned>(env3[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val2,val1,((amount+numVal2)-numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_226_MSTOREFreePtr_IncByAmount->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_226_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env3[1]) + ramBitCast<RamSigned>(env5[3]))) - ramBitCast<RamSigned>(env0[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3])}},Tuple<RamDomain,4>{{ramBitCast(env5[0]), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env3[1]) + ramBitCast<RamSigned>(env5[3]))) - ramBitCast<RamSigned>(env0[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiff(val2,val1,((amount+numVal2)-numVal1)) :- 
   MSTOREFreePtrOrder(mstore1,mstore2),
   MSTOREFreePtr_IncByAmount(mstore2,amount),
   MLOADFreePtrLoadsValueStoredAt(mload1,mstore1),
   FreePointerBasedValue(val1,mload1,_,numVal1),
   MLOADFreePtrLoadsValueStoredAt(mload2,mstore2),
   FreePointerBasedValue(val2,mload2,_,numVal2). .plan 1:(4,3,1,2,5,6), 2:(6,5,2,1,3,4)
in file memory_addresses.dl [302:1-309:51])_");
if(!(rel_189_MLOADFreePtrLoadsValueStoredAt->empty()) && !(rel_226_MSTOREFreePtr_IncByAmount->empty()) && !(rel_190_MSTOREFreePtrOrder->empty()) && !(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt,rel_189_MLOADFreePtrLoadsValueStoredAt->createContext());
CREATE_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt,rel_190_MSTOREFreePtrOrder->createContext());
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_226_MSTOREFreePtr_IncByAmount->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_190_MSTOREFreePtrOrder->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_190_MSTOREFreePtrOrder_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_189_MLOADFreePtrLoadsValueStoredAt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_189_MLOADFreePtrLoadsValueStoredAt_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_238_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env2[1]) + ramBitCast<RamSigned>(env0[3]))) - ramBitCast<RamSigned>(env5[3])))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env2[1]) + ramBitCast<RamSigned>(env0[3]))) - ramBitCast<RamSigned>(env5[3])))}};
rel_240_new_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliasesNumVals(val1,val2,numVal1,numVal2) :- 
   FreePointerBasedValuesWithFreePointerAliases(val1,val2),
   FreePointerBasedValue(val1,_,_,numVal1),
   FreePointerBasedValue(val2,_,_,numVal2). .plan 1:(2,1,3), 2:(3,1,2)
in file memory_addresses.dl [293:1-296:46])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
CREATE_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_236_delta_FreePointerBasedValuesWithFreePointerAliases) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty()) && !(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[3]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[3]),ramBitCast(env2[3])}};
rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->insert(tuple,READ_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliasesNumVals(val1,val2,numVal1,numVal2) :- 
   FreePointerBasedValuesWithFreePointerAliases(val1,val2),
   FreePointerBasedValue(val1,_,_,numVal1),
   FreePointerBasedValue(val2,_,_,numVal2). .plan 1:(2,1,3), 2:(3,1,2)
in file memory_addresses.dl [293:1-296:46])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
CREATE_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_235_FreePointerBasedValuesWithFreePointerAliases->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt))) && !(!rel_233_delta_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env2[3])}};
rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->insert(tuple,READ_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesWithFreePointerAliasesNumVals(val1,val2,numVal1,numVal2) :- 
   FreePointerBasedValuesWithFreePointerAliases(val1,val2),
   FreePointerBasedValue(val1,_,_,numVal1),
   FreePointerBasedValue(val2,_,_,numVal2). .plan 1:(2,1,3), 2:(3,1,2)
in file memory_addresses.dl [293:1-296:46])_");
if(!(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_233_delta_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
CREATE_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_233_delta_FreePointerBasedValue) {
auto range = rel_235_FreePointerBasedValuesWithFreePointerAliases->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env2[3]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env2[3]),ramBitCast(env0[3])}};
rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->insert(tuple,READ_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLength(call,addrVar,length) :- 
   CALLReturnsFixedSizeData(call,length),
   CALLReturnDataStartVar(call,addrVar).
in file core.dl [146:1-148:41])_");
if(!(rel_287_delta_CALLReturnsFixedSizeData->empty()) && !(rel_56_CALLReturnDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_246_new_StatementWritesMemoryOfConstantLength_op_ctxt,rel_246_new_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_287_delta_CALLReturnsFixedSizeData_op_ctxt,rel_287_delta_CALLReturnsFixedSizeData->createContext());
for(const auto& env0 : *rel_287_delta_CALLReturnsFixedSizeData) {
auto range = rel_56_CALLReturnDataStartVar->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_244_StatementWritesMemoryOfConstantLength->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1])}};
rel_246_new_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_246_new_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLength(stmt,addrVar,@hex_to_number(lenHex)) :- 
   VariableLengthMemoryCopyStatement(stmt,addrVar,lenVar),
   Variable_Value(lenVar,lenHex).
in file core.dl [150:1-153:35])_");
if(!(rel_75_VariableLengthMemoryCopyStatement->empty()) && !(rel_212_delta_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
CREATE_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt,rel_212_delta_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_246_new_StatementWritesMemoryOfConstantLength_op_ctxt,rel_246_new_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_75_VariableLengthMemoryCopyStatement) {
auto range = rel_212_delta_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_212_delta_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_244_StatementWritesMemoryOfConstantLength->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}},READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_246_new_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_246_new_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVar(indexVar) :- 
   Variable_SymbolicValue(indexVar,_).
in file core.dl [192:1-199:39])_");
if(!(rel_230_delta_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
CREATE_OP_CONTEXT(rel_249_new_MemoryAddressVar_op_ctxt,rel_249_new_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_230_delta_Variable_SymbolicValue) {
if( !(rel_247_MemoryAddressVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_249_new_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_249_new_MemoryAddressVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVariable_Function(indexVar,fun) :- 
   MemoryAddressVar(indexVar),
   Variable_Function(indexVar,fun).
in file core.dl [201:1-203:36])_");
if(!(rel_248_delta_MemoryAddressVar->empty()) && !(rel_118_Variable_Function->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
CREATE_OP_CONTEXT(rel_248_delta_MemoryAddressVar_op_ctxt,rel_248_delta_MemoryAddressVar->createContext());
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_252_new_MemoryAddressVariable_Function_op_ctxt,rel_252_new_MemoryAddressVariable_Function->createContext());
for(const auto& env0 : *rel_248_delta_MemoryAddressVar) {
auto range = rel_118_Variable_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_250_MemoryAddressVariable_Function->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_252_new_MemoryAddressVariable_Function->insert(tuple,READ_OP_CONTEXT(rel_252_new_MemoryAddressVariable_Function_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,numDiff) :- 
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValuesNumDiff(freePtrBasedVal1,freePtrBasedVal2,numDiff),
   Variable_SymbolicValue(var2,freePtrBasedVal2). .plan 1:(2,1,3), 2:(3,2,1)
in file core.dl [213:1-216:50])_");
if(!(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_239_delta_FreePointerBasedValuesNumDiff_op_ctxt,rel_239_delta_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_230_delta_Variable_SymbolicValue) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_239_delta_FreePointerBasedValuesNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_239_delta_FreePointerBasedValuesNumDiff_op_ctxt)))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt))) && !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast(env1[2])}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,numDiff) :- 
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValuesNumDiff(freePtrBasedVal1,freePtrBasedVal2,numDiff),
   Variable_SymbolicValue(var2,freePtrBasedVal2). .plan 1:(2,1,3), 2:(3,2,1)
in file core.dl [213:1-216:50])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_239_delta_FreePointerBasedValuesNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_239_delta_FreePointerBasedValuesNumDiff_op_ctxt,rel_239_delta_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_239_delta_FreePointerBasedValuesNumDiff) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env2[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt))) && !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env2[0]),ramBitCast(env0[2])}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,numDiff) :- 
   Variable_SymbolicValue(var1,freePtrBasedVal1),
   FreePointerBasedValuesNumDiff(freePtrBasedVal1,freePtrBasedVal2,numDiff),
   Variable_SymbolicValue(var2,freePtrBasedVal2). .plan 1:(2,1,3), 2:(3,2,1)
in file core.dl [213:1-216:50])_");
if(!(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_230_delta_Variable_SymbolicValue) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,(num1-num2)) :- 
   MemoryAddressVariable_Function(var1,fun),
   Variable_NumericValue(var1,num1),
   MemoryAddressVariable_Function(var2,fun),
   Variable_NumericValue(var2,num2). .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,3,1,2)
in file core.dl [205:1-210:25])_");
if(!(rel_250_MemoryAddressVariable_Function->empty()) && !(rel_251_delta_MemoryAddressVariable_Function->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt,rel_251_delta_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_251_delta_MemoryAddressVariable_Function) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt)))) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_251_delta_MemoryAddressVariable_Function->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt)))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast((ramBitCast<RamSigned>(env1[1]) - ramBitCast<RamSigned>(env3[1])))}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt))) && !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast((ramBitCast<RamSigned>(env1[1]) - ramBitCast<RamSigned>(env3[1])))}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,(num1-num2)) :- 
   MemoryAddressVariable_Function(var1,fun),
   Variable_NumericValue(var1,num1),
   MemoryAddressVariable_Function(var2,fun),
   Variable_NumericValue(var2,num2). .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,3,1,2)
in file core.dl [205:1-210:25])_");
if(!(rel_250_MemoryAddressVariable_Function->empty()) && !(rel_224_delta_Variable_NumericValue->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt,rel_251_delta_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_224_delta_Variable_NumericValue) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_251_delta_MemoryAddressVariable_Function->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt)))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast((ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(env3[1])))}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt))) && !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast((ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(env3[1])))}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,(num1-num2)) :- 
   MemoryAddressVariable_Function(var1,fun),
   Variable_NumericValue(var1,num1),
   MemoryAddressVariable_Function(var2,fun),
   Variable_NumericValue(var2,num2). .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,3,1,2)
in file core.dl [205:1-210:25])_");
if(!(rel_251_delta_MemoryAddressVariable_Function->empty()) && !(rel_250_MemoryAddressVariable_Function->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_251_delta_MemoryAddressVariable_Function_op_ctxt,rel_251_delta_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_251_delta_MemoryAddressVariable_Function) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>(env2[1]) - ramBitCast<RamSigned>(env3[1])))}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>(env2[1]) - ramBitCast<RamSigned>(env3[1])))}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryAddressVarsNumDiff(var1,var2,(num1-num2)) :- 
   MemoryAddressVariable_Function(var1,fun),
   Variable_NumericValue(var1,num1),
   MemoryAddressVariable_Function(var2,fun),
   Variable_NumericValue(var2,num2). .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,3,1,2)
in file core.dl [205:1-210:25])_");
if(!(rel_250_MemoryAddressVariable_Function->empty()) && !(rel_224_delta_Variable_NumericValue->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_224_delta_Variable_NumericValue) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_250_MemoryAddressVariable_Function->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_253_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>(env3[1]) - ramBitCast<RamSigned>(env0[1])))}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>(env3[1]) - ramBitCast<RamSigned>(env0[1])))}};
rel_255_new_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleStructAllocation(mload,freePtrUpdStore,structBase,(memDiff/32)) :- 
   MLOADFreePtr_To(mload,structBase),
   FreePointerBasedValue(updateVal,mload,_,memDiff),
   (memDiff%32) = 0,
   Variable_SymbolicValue(updatedFMP,updateVal),
   MSTORE(freePtrUpdStore,_,updatedFMP),
   MSTOREFreePtr(freePtrUpdStore).
in file structs.dl [45:1-51:34])_");
if(!(rel_233_delta_FreePointerBasedValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_29_MLOADFreePtr_To->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_258_new_PossibleStructAllocation_op_ctxt,rel_258_new_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt,rel_233_delta_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
auto range = rel_233_delta_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_233_delta_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_230_delta_Variable_SymbolicValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt)))) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt)) && !(rel_256_PossibleStructAllocation->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}},READ_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_258_new_PossibleStructAllocation->insert(tuple,READ_OP_CONTEXT(rel_258_new_PossibleStructAllocation_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleStructAllocation(mload,freePtrUpdStore,structBase,(memDiff/32)) :- 
   MLOADFreePtr_To(mload,structBase),
   FreePointerBasedValue(updateVal,mload,_,memDiff),
   (memDiff%32) = 0,
   Variable_SymbolicValue(updatedFMP,updateVal),
   MSTORE(freePtrUpdStore,_,updatedFMP),
   MSTOREFreePtr(freePtrUpdStore).
in file structs.dl [45:1-51:34])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_230_delta_Variable_SymbolicValue->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_29_MLOADFreePtr_To->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_258_new_PossibleStructAllocation_op_ctxt,rel_258_new_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt,rel_230_delta_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_230_delta_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_230_delta_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt)) && !(rel_256_PossibleStructAllocation->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}},READ_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_258_new_PossibleStructAllocation->insert(tuple,READ_OP_CONTEXT(rel_258_new_PossibleStructAllocation_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleStructArg(function,actual,formal) :- 
   ActualArgs(caller,actual,pos),
   PossibleStructAllocation(_,_,actual,_),
   CallGraphEdge(caller,function),
   FormalArgs(function,formal,pos).
in file structs.dl [120:1-124:37])_");
if(!(rel_257_delta_PossibleStructAllocation->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_259_PossibleStructArg_op_ctxt,rel_259_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_261_new_PossibleStructArg_op_ctxt,rel_261_new_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_257_delta_PossibleStructAllocation_op_ctxt,rel_257_delta_PossibleStructAllocation->createContext());
for(const auto& env0 : *rel_100_ActualArgs) {
if( !rel_257_delta_PossibleStructAllocation->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_257_delta_PossibleStructAllocation_op_ctxt)).empty()) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_259_PossibleStructArg->contains(Tuple<RamDomain,3>{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_259_PossibleStructArg_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_261_new_PossibleStructArg->insert(tuple,READ_OP_CONTEXT(rel_261_new_PossibleStructArg_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariableIncreasesByConst(loop,[beforeLoopVar,inLoopVar],@hex_to_number(const)) :- 
   WellFormedLoopInductionVariable(loop,phiVar,[beforeLoopVar,inLoopVar]),
   VarPlusConst(phiVar,const,inLoopVar).
in file loops.dl [48:1-50:42])_");
if(!(rel_278_delta_WellFormedLoopInductionVariable->empty()) && !(rel_31_VarPlusConst->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt,rel_31_VarPlusConst->createContext());
CREATE_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt,rel_262_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_264_new_InductionVariableIncreasesByConst_op_ctxt,rel_264_new_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt,rel_278_delta_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_278_delta_WellFormedLoopInductionVariable) {
RamDomain const ref = env0[2];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,2);
{
auto range = rel_31_VarPlusConst->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_262_InductionVariableIncreasesByConst->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env1[0])),ramBitCast(ramBitCast(env1[1]))}}
)),ramBitCast(functors::hex_to_number(symTable.decode(env2[1]).c_str()))}},READ_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env1[0])),ramBitCast(ramBitCast(env1[1]))}}
)),ramBitCast(functors::hex_to_number(symTable.decode(env2[1]).c_str()))}};
rel_264_new_InductionVariableIncreasesByConst->insert(tuple,READ_OP_CONTEXT(rel_264_new_InductionVariableIncreasesByConst_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariableLowerBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar) :- 
   LoopExitCond(condVar,loop),
   WellFormedLoopInductionVariable(loop,_,[beforeLoopVar,inLoopVar]),
   PHIStmtTwoUses(_,beforeLoopVar,inLoopVar,phiVar),
   LT(_,phiVar,boundVar,condVar).
in file loops.dl [60:1-64:36])_");
if(!(rel_278_delta_WellFormedLoopInductionVariable->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_191_LoopExitCond->empty()) && !(rel_76_LT->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_76_LT_op_ctxt,rel_76_LT->createContext());
CREATE_OP_CONTEXT(rel_191_LoopExitCond_op_ctxt,rel_191_LoopExitCond->createContext());
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_267_new_InductionVariableLowerBoundVar_op_ctxt,rel_267_new_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt,rel_278_delta_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_191_LoopExitCond) {
auto range = rel_278_delta_WellFormedLoopInductionVariable->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[2];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_76_LT->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_76_LT_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_265_InductionVariableLowerBoundVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}},READ_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}};
rel_267_new_InductionVariableLowerBoundVar->insert(tuple,READ_OP_CONTEXT(rel_267_new_InductionVariableLowerBoundVar_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar) :- 
   LoopExitCond(condVar,loop),
   WellFormedLoopInductionVariable(loop,_,[beforeLoopVar,inLoopVar]),
   PHIStmtTwoUses(_,beforeLoopVar,inLoopVar,phiVar),
   GT(_,phiVar,boundVar,condVar).
in file loops.dl [66:1-70:36])_");
if(!(rel_278_delta_WellFormedLoopInductionVariable->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_191_LoopExitCond->empty()) && !(rel_81_GT->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_81_GT_op_ctxt,rel_81_GT->createContext());
CREATE_OP_CONTEXT(rel_191_LoopExitCond_op_ctxt,rel_191_LoopExitCond->createContext());
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_270_new_InductionVariableUpperBoundVar_op_ctxt,rel_270_new_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt,rel_278_delta_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_191_LoopExitCond) {
auto range = rel_278_delta_WellFormedLoopInductionVariable->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[2];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_81_GT->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_81_GT_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_268_InductionVariableUpperBoundVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}},READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}};
rel_270_new_InductionVariableUpperBoundVar->insert(tuple,READ_OP_CONTEXT(rel_270_new_InductionVariableUpperBoundVar_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar) :- 
   LoopExitCond(condVar,loop),
   WellFormedLoopInductionVariable(loop,_,[beforeLoopVar,inLoopVar]),
   PHIStmtTwoUses(_,beforeLoopVar,inLoopVar,phiVar),
   LT(_,phiVar,boundVar,ltVar),
   ISZERO(_,ltVar,condVar).
in file loops.dl [72:1-77:29])_");
if(!(rel_278_delta_WellFormedLoopInductionVariable->empty()) && !(rel_76_LT->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_82_ISZERO->empty()) && !(rel_191_LoopExitCond->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_76_LT_op_ctxt,rel_76_LT->createContext());
CREATE_OP_CONTEXT(rel_82_ISZERO_op_ctxt,rel_82_ISZERO->createContext());
CREATE_OP_CONTEXT(rel_191_LoopExitCond_op_ctxt,rel_191_LoopExitCond->createContext());
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_270_new_InductionVariableUpperBoundVar_op_ctxt,rel_270_new_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt,rel_278_delta_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_191_LoopExitCond) {
auto range = rel_278_delta_WellFormedLoopInductionVariable->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_278_delta_WellFormedLoopInductionVariable_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[2];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_76_LT->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_76_LT_op_ctxt));
for(const auto& env4 : range) {
if( !rel_82_ISZERO->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(env0[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_82_ISZERO_op_ctxt)).empty() && !(rel_268_InductionVariableUpperBoundVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}},READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env4[2])}};
rel_270_new_InductionVariableUpperBoundVar->insert(tuple,READ_OP_CONTEXT(rel_270_new_InductionVariableUpperBoundVar_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoop(loop,memAddrFrom,memAddrTo) :- 
   InductionVariableIncreasesByConst(loop,[beforeLoopVar,inLoopVar],32),
   PHIStmtTwoUses(_,beforeLoopVar,inLoopVar,phiVar),
   ADDFix(_,phiVar,memAddrFrom,fromIndexVar),
   MLOAD(_,fromIndexVar,copiedVar),
   ADDFix(_,phiVar,memAddrTo,toIndexVar),
   MSTORE(_,toIndexVar,copiedVar).
in file loops.dl [79:1-85:36])_");
if(!(rel_9_ADDFix->empty()) && !(rel_263_delta_InductionVariableIncreasesByConst->empty()) && !(rel_10_MLOAD->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt,rel_263_delta_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt,rel_273_new_MemoryCopyLoop->createContext());
auto range = rel_263_delta_InductionVariableIncreasesByConst->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt));
for(const auto& env0 : range) {
RamDomain const ref = env0[1];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
if( !rel_40_MSTORE->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(env4[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(env4[2])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt)).empty() && !(rel_271_MemoryCopyLoop->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env3[2]),ramBitCast(env5[2])}},READ_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[2]),ramBitCast(env5[2])}};
rel_273_new_MemoryCopyLoop->insert(tuple,READ_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoop(loop,beforeLoopVarFrom,beforeLoopVarTo) :- 
   InductionVariableIncreasesByConst(loop,[beforeLoopVarFrom,inLoopVarFrom],32),
   PHIStmtTwoUses(_,beforeLoopVarFrom,inLoopVarFrom,fromIndexVar),
   MLOAD(_,fromIndexVar,copiedVar),
   InductionVariableIncreasesByConst(loop,[beforeLoopVarTo,inLoopVarTo],32),
   PHIStmtTwoUses(_,beforeLoopVarTo,inLoopVarTo,toIndexVar),
   MSTORE(_,toIndexVar,copiedVar).
in file loops.dl [87:1-93:36])_");
if(!(rel_49_PHIStmtTwoUses->empty()) && !(rel_10_MLOAD->empty()) && !(rel_262_InductionVariableIncreasesByConst->empty()) && !(rel_263_delta_InductionVariableIncreasesByConst->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt,rel_262_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt,rel_263_delta_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt,rel_273_new_MemoryCopyLoop->createContext());
auto range = rel_263_delta_InductionVariableIncreasesByConst->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt));
for(const auto& env0 : range) {
RamDomain const ref = env0[1];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_262_InductionVariableIncreasesByConst->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt));
for(const auto& env4 : range) {
RamDomain const ref = env4[1];
if (ref == 0) continue;
const RamDomain *env5 = recordTable.unpack(ref,2);
{
if( !(rel_263_delta_InductionVariableIncreasesByConst->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env5[0])),ramBitCast(ramBitCast(env5[1]))}}
)),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt))) && !(rel_271_MemoryCopyLoop->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt)))) {
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env6 : range) {
if( !rel_40_MSTORE->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env6[3]), ramBitCast(env3[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env6[3]), ramBitCast(env3[2])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env5[0])}};
rel_273_new_MemoryCopyLoop->insert(tuple,READ_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoop(loop,beforeLoopVarFrom,beforeLoopVarTo) :- 
   InductionVariableIncreasesByConst(loop,[beforeLoopVarFrom,inLoopVarFrom],32),
   PHIStmtTwoUses(_,beforeLoopVarFrom,inLoopVarFrom,fromIndexVar),
   MLOAD(_,fromIndexVar,copiedVar),
   InductionVariableIncreasesByConst(loop,[beforeLoopVarTo,inLoopVarTo],32),
   PHIStmtTwoUses(_,beforeLoopVarTo,inLoopVarTo,toIndexVar),
   MSTORE(_,toIndexVar,copiedVar).
in file loops.dl [87:1-93:36])_");
if(!(rel_49_PHIStmtTwoUses->empty()) && !(rel_10_MLOAD->empty()) && !(rel_263_delta_InductionVariableIncreasesByConst->empty()) && !(rel_262_InductionVariableIncreasesByConst->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt,rel_262_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt,rel_263_delta_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt,rel_273_new_MemoryCopyLoop->createContext());
auto range = rel_262_InductionVariableIncreasesByConst->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt));
for(const auto& env0 : range) {
RamDomain const ref = env0[1];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,2);
{
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_263_delta_InductionVariableIncreasesByConst->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_263_delta_InductionVariableIncreasesByConst_op_ctxt));
for(const auto& env4 : range) {
RamDomain const ref = env4[1];
if (ref == 0) continue;
const RamDomain *env5 = recordTable.unpack(ref,2);
{
if( !(rel_271_MemoryCopyLoop->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt)))) {
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env6 : range) {
if( !rel_40_MSTORE->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env6[3]), ramBitCast(env3[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env6[3]), ramBitCast(env3[2])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env5[0])}};
rel_273_new_MemoryCopyLoop->insert(tuple,READ_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableLowerBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(boundVar,32),
   Variable_NumericValue(beforeLoopVar,length).
in file loops.dl [95:1-100:48])_");
if(!(rel_272_delta_MemoryCopyLoop->empty()) && !(rel_265_InductionVariableLowerBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt,rel_266_delta_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_272_delta_MemoryCopyLoop_op_ctxt,rel_272_delta_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_272_delta_MemoryCopyLoop) {
auto range = rel_265_InductionVariableLowerBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( !(rel_266_delta_InductionVariableLowerBoundVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt)))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableLowerBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(boundVar,32),
   Variable_NumericValue(beforeLoopVar,length).
in file loops.dl [95:1-100:48])_");
if(!(rel_271_MemoryCopyLoop->empty()) && !(rel_266_delta_InductionVariableLowerBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt,rel_266_delta_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_266_delta_InductionVariableLowerBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_266_delta_InductionVariableLowerBoundVar_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableLowerBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(boundVar,32),
   Variable_NumericValue(beforeLoopVar,length).
in file loops.dl [95:1-100:48])_");
if(!(rel_265_InductionVariableLowerBoundVar->empty()) && !(rel_224_delta_Variable_NumericValue->empty()) && !(rel_271_MemoryCopyLoop->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_265_InductionVariableLowerBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt));
for(const auto& env1 : range) {
if( rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableLowerBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(boundVar,32),
   Variable_NumericValue(beforeLoopVar,length).
in file loops.dl [95:1-100:48])_");
if(!(rel_265_InductionVariableLowerBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty()) && !(rel_271_MemoryCopyLoop->empty()) && !(rel_224_delta_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_265_InductionVariableLowerBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt));
for(const auto& env1 : range) {
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(beforeLoopVar,0),
   Variable_NumericValue(boundVar,length).
in file loops.dl [102:1-107:43])_");
if(!(rel_272_delta_MemoryCopyLoop->empty()) && !(rel_268_InductionVariableUpperBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt,rel_269_delta_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_272_delta_MemoryCopyLoop_op_ctxt,rel_272_delta_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_272_delta_MemoryCopyLoop) {
auto range = rel_268_InductionVariableUpperBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt)) && !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_269_delta_InductionVariableUpperBoundVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt)))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(beforeLoopVar,0),
   Variable_NumericValue(boundVar,length).
in file loops.dl [102:1-107:43])_");
if(!(rel_271_MemoryCopyLoop->empty()) && !(rel_269_delta_InductionVariableUpperBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt,rel_269_delta_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_269_delta_InductionVariableUpperBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_269_delta_InductionVariableUpperBoundVar_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt)) && !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt)))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt))) && !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(beforeLoopVar,0),
   Variable_NumericValue(boundVar,length).
in file loops.dl [102:1-107:43])_");
if(!(rel_268_InductionVariableUpperBoundVar->empty()) && !(rel_224_delta_Variable_NumericValue->empty()) && !(rel_271_MemoryCopyLoop->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_268_InductionVariableUpperBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_224_delta_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt))) && !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryCopyLoopConstLength(loop,memAddrFrom,memAddrTo,length) :- 
   MemoryCopyLoop(loop,memAddrFrom,memAddrTo),
   InductionVariableUpperBoundVar(loop,[beforeLoopVar,inLoopVar],boundVar),
   Variable_NumericValue(beforeLoopVar,0),
   Variable_NumericValue(boundVar,length).
in file loops.dl [102:1-107:43])_");
if(!(rel_268_InductionVariableUpperBoundVar->empty()) && !(rel_223_Variable_NumericValue->empty()) && !(rel_271_MemoryCopyLoop->empty()) && !(rel_224_delta_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_268_InductionVariableUpperBoundVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_274_MemoryCopyLoopConstLength->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_276_new_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(WellFormedLoopInductionVariable(loop,phiVar,[beforeLoopVar,inLoopVar]) :- 
   InductionVariable(phiVar,loop),
   PHIStmtTwoUses(_,beforeLoopVar,inLoopVar,phiVar),
   Statement_Defines(beforeStmt,beforeLoopVar,_),
   Statement_Block(beforeStmt,beforeBlock),
   Dominates(beforeBlock,loop),
   Statement_Defines(inLoopStmt,inLoopVar,_),
   StatementInStructuredLoop(inLoopStmt,loop).
in file loops.dl [39:1-46:47])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_218_delta_InductionVariable->empty()) && !(rel_125_Dominates->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_131_StatementInStructuredLoop->empty()) && !(rel_49_PHIStmtTwoUses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt,rel_131_StatementInStructuredLoop->createContext());
CREATE_OP_CONTEXT(rel_218_delta_InductionVariable_op_ctxt,rel_218_delta_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_277_WellFormedLoopInductionVariable_op_ctxt,rel_277_WellFormedLoopInductionVariable->createContext());
CREATE_OP_CONTEXT(rel_279_new_WellFormedLoopInductionVariable_op_ctxt,rel_279_new_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_218_delta_InductionVariable) {
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_277_WellFormedLoopInductionVariable->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env1[1])),ramBitCast(ramBitCast(env1[2]))}}
))}},READ_OP_CONTEXT(rel_277_WellFormedLoopInductionVariable_op_ctxt)))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env3 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env4 : range) {
if( rel_131_StatementInStructuredLoop->contains(Tuple<RamDomain,2>{{ramBitCast(env4[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_131_StatementInStructuredLoop_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env1[1])),ramBitCast(ramBitCast(env1[2]))}}
))}};
rel_279_new_WellFormedLoopInductionVariable->insert(tuple,READ_OP_CONTEXT(rel_279_new_WellFormedLoopInductionVariable_op_ctxt));
break;
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryCopiedFromLoop(memWriteStmt,cat(startVar,"_gen"),memAddrTo,numDiff,writeLength) :- 
   MemoryCopyLoopConstLength(_,memAddrFrom,memAddrTo,loopLength),
   StatementWritesMemoryOfConstantLength(memWriteStmt,startVar,writeLength),
   MemoryAddressVarsNumDiff(startVar,memAddrFrom,numDiff),
   0 <= numDiff,
   numDiff < loopLength.
in file loops.dl [118:1-123:39])_");
if(!(rel_244_StatementWritesMemoryOfConstantLength->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_275_delta_MemoryCopyLoopConstLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_245_delta_StatementWritesMemoryOfConstantLength_op_ctxt,rel_245_delta_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt,rel_254_delta_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_275_delta_MemoryCopyLoopConstLength_op_ctxt,rel_275_delta_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_282_new_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_275_delta_MemoryCopyLoopConstLength) {
for(const auto& env1 : *rel_244_StatementWritesMemoryOfConstantLength) {
if( !(rel_245_delta_StatementWritesMemoryOfConstantLength->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_245_delta_StatementWritesMemoryOfConstantLength_op_ctxt)))) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[2]) != ramBitCast<RamDomain>(env0[3])) && !(rel_254_delta_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt))) && !(rel_280_StatementWritesMemoryCopiedFromLoop->contains(Tuple<RamDomain,5>{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}};
rel_282_new_StatementWritesMemoryCopiedFromLoop->insert(tuple,READ_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryCopiedFromLoop(memWriteStmt,cat(startVar,"_gen"),memAddrTo,numDiff,writeLength) :- 
   MemoryCopyLoopConstLength(_,memAddrFrom,memAddrTo,loopLength),
   StatementWritesMemoryOfConstantLength(memWriteStmt,startVar,writeLength),
   MemoryAddressVarsNumDiff(startVar,memAddrFrom,numDiff),
   0 <= numDiff,
   numDiff < loopLength.
in file loops.dl [118:1-123:39])_");
if(!(rel_245_delta_StatementWritesMemoryOfConstantLength->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_274_MemoryCopyLoopConstLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_245_delta_StatementWritesMemoryOfConstantLength_op_ctxt,rel_245_delta_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt,rel_254_delta_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_282_new_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_274_MemoryCopyLoopConstLength) {
for(const auto& env1 : *rel_245_delta_StatementWritesMemoryOfConstantLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[2]) != ramBitCast<RamDomain>(env0[3])) && !(rel_254_delta_MemoryAddressVarsNumDiff->contains(Tuple<RamDomain,3>{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt))) && !(rel_280_StatementWritesMemoryCopiedFromLoop->contains(Tuple<RamDomain,5>{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}};
rel_282_new_StatementWritesMemoryCopiedFromLoop->insert(tuple,READ_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryCopiedFromLoop(memWriteStmt,cat(startVar,"_gen"),memAddrTo,numDiff,writeLength) :- 
   MemoryCopyLoopConstLength(_,memAddrFrom,memAddrTo,loopLength),
   StatementWritesMemoryOfConstantLength(memWriteStmt,startVar,writeLength),
   MemoryAddressVarsNumDiff(startVar,memAddrFrom,numDiff),
   0 <= numDiff,
   numDiff < loopLength.
in file loops.dl [118:1-123:39])_");
if(!(rel_244_StatementWritesMemoryOfConstantLength->empty()) && !(rel_254_delta_MemoryAddressVarsNumDiff->empty()) && !(rel_274_MemoryCopyLoopConstLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt,rel_254_delta_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_282_new_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_274_MemoryCopyLoopConstLength) {
for(const auto& env1 : *rel_244_StatementWritesMemoryOfConstantLength) {
auto range = rel_254_delta_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[1]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_254_delta_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[2]) != ramBitCast<RamDomain>(env0[3])) && !(rel_280_StatementWritesMemoryCopiedFromLoop->contains(Tuple<RamDomain,5>{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(28)))),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env1[2])}};
rel_282_new_StatementWritesMemoryCopiedFromLoop->insert(tuple,READ_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(CALLReturnDataLengthVal(call,length) :- 
   CALLReturnDataLengthVar(call,lenVar),
   Variable_NumericValue(lenVar,length).
in file uses_defs_abstractions.dl [453:1-455:41])_");
if(!(rel_59_CALLReturnDataLengthVar->empty()) && !(rel_224_delta_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt,rel_59_CALLReturnDataLengthVar->createContext());
CREATE_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt,rel_224_delta_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt,rel_283_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_285_new_CALLReturnDataLengthVal_op_ctxt,rel_285_new_CALLReturnDataLengthVal->createContext());
for(const auto& env0 : *rel_59_CALLReturnDataLengthVar) {
auto range = rel_224_delta_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_224_delta_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_283_CALLReturnDataLengthVal->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_285_new_CALLReturnDataLengthVal->insert(tuple,READ_OP_CONTEXT(rel_285_new_CALLReturnDataLengthVal_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(CALLReturnsFixedSizeData(call,length) :- 
   CALLReturnDataLengthVal(call,length),
   length != 0.
in file uses_defs_abstractions.dl [469:1-471:15])_");
if(!(rel_284_delta_CALLReturnDataLengthVal->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_284_delta_CALLReturnDataLengthVal_op_ctxt,rel_284_delta_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt,rel_286_CALLReturnsFixedSizeData->createContext());
CREATE_OP_CONTEXT(rel_288_new_CALLReturnsFixedSizeData_op_ctxt,rel_288_new_CALLReturnsFixedSizeData->createContext());
for(const auto& env0 : *rel_284_delta_CALLReturnDataLengthVal) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(RamSigned(0))) && !(rel_286_CALLReturnsFixedSizeData->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_288_new_CALLReturnsFixedSizeData->insert(tuple,READ_OP_CONTEXT(rel_288_new_CALLReturnsFixedSizeData_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("ADD",arg1,arg2,as(@add_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("ADD",arg1,arg2).
in file constants.dl [33:3-33:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(6)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(6)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(6)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::add_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(6)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::add_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SUB",arg1,arg2,as(@sub_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SUB",arg1,arg2).
in file constants.dl [34:3-34:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(7)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(7)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(7)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sub_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(7)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sub_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("MUL",arg1,arg2,as(@mul_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("MUL",arg1,arg2).
in file constants.dl [35:3-35:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(8)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(8)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(8)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mul_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(8)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mul_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("DIV",arg1,arg2,as(@div_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("DIV",arg1,arg2).
in file constants.dl [36:3-36:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::div_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::div_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("MOD",arg1,arg2,as(@mod_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("MOD",arg1,arg2).
in file constants.dl [37:3-37:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(3)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(3)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::mod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("AND",arg1,arg2,as(@and_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("AND",arg1,arg2).
in file constants.dl [38:3-38:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(9)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(9)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(9)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::and_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(9)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::and_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("OR",arg1,arg2,as(@or_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("OR",arg1,arg2).
in file constants.dl [39:3-39:139])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(10)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(10)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(10)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::or_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(10)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::or_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("XOR",arg1,arg2,as(@xor_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("XOR",arg1,arg2).
in file constants.dl [40:3-40:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(11)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(11)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(11)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::xor_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(11)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::xor_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("GT",arg1,arg2,as(@gt_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("GT",arg1,arg2).
in file constants.dl [41:3-41:139])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(12)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(12)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(12)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::gt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(12)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::gt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("EQ",arg1,arg2,as(@eq_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("EQ",arg1,arg2).
in file constants.dl [42:3-42:139])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(13)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(13)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(13)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::eq_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(13)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::eq_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("LT",arg1,arg2,as(@lt_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("LT",arg1,arg2).
in file constants.dl [43:3-43:139])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(14)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(14)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(14)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::lt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(14)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::lt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("EXP",arg1,arg2,as(@exp_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("EXP",arg1,arg2).
in file constants.dl [44:3-44:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(15)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(15)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(15)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::exp_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(15)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::exp_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SMOD",arg1,arg2,as(@smod_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SMOD",arg1,arg2).
in file constants.dl [45:3-45:145])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(2)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::smod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(2)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::smod_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SDIV",arg1,arg2,as(@sdiv_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SDIV",arg1,arg2).
in file constants.dl [46:3-46:145])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(4)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(4)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(4)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sdiv_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(4)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sdiv_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SGT",arg1,arg2,as(@sgt_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SGT",arg1,arg2).
in file constants.dl [47:3-47:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(16)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(16)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(16)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sgt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(16)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sgt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SLT",arg1,arg2,as(@slt_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SLT",arg1,arg2).
in file constants.dl [48:3-48:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(17)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(17)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(17)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::slt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(17)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::slt_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SHL",arg1,arg2,as(@shl_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SHL",arg1,arg2).
in file constants.dl [49:3-49:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(18)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(18)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(18)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shl_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(18)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shl_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SHR",arg1,arg2,as(@shr_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SHR",arg1,arg2).
in file constants.dl [50:3-50:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(19)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(19)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(19)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shr_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(19)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::shr_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ConstantFoldResult2("SAR",arg1,arg2,as(@sar_256(arg1,arg2), Value)) :- 
   variableValueConstantFolding.ValidConstantFoldOperation("SAR",arg1,arg2).
in file constants.dl [51:3-51:142])_");
if(!(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
auto range = rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(RamSigned(20)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(20)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_289_variableValueConstantFolding_ConstantFoldResult2->contains(Tuple<RamDomain,4>{{ramBitCast(RamSigned(20)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sar_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}},READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(20)),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(functors::sar_256(symTable.decode(env0[1]).c_str(),symTable.decode(env0[2]).c_str())))}};
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ValidConstantFoldOperation(op,arg1,arg2) :- 
   variableValueConstantFolding.RequestConstantFold2(op,arg1,arg2),
   op != "DIV",
   op != "SDIV",
   op != "MOD",
   op != "SMOD".
in file constants.dl [16:3-19:21])_");
if(!(rel_209_delta_variableValueConstantFolding_RequestConstantFold2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_209_delta_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_209_delta_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_292_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_209_delta_variableValueConstantFolding_RequestConstantFold2) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(1))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(2))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(3))) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(4))) && !(rel_292_variableValueConstantFolding_ValidConstantFoldOperation->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(variableValueConstantFolding.ValidConstantFoldOperation(op,arg1,arg2) :- 
   variableValueConstantFolding.RequestConstantFold2(op,arg1,arg2),
   arg2 != "0x0".
in file constants.dl [16:3-19:21])_");
if(!(rel_209_delta_variableValueConstantFolding_RequestConstantFold2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_209_delta_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_209_delta_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_292_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_209_delta_variableValueConstantFolding_RequestConstantFold2) {
if( (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(RamSigned(5))) && !(rel_292_variableValueConstantFolding_ValidConstantFoldOperation->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
}
();}
if(rel_210_new_variableValueConstantFolding_RequestConstantFold2->empty() && rel_213_new_Variable_Value->empty() && rel_216_new_AuxStatementOpAndConstantArgValues->empty() && rel_219_new_InductionVariable->empty() && rel_222_new_GlobalInductionVariableStore->empty() && rel_225_new_Variable_NumericValue->empty() && rel_228_new_MSTOREFreePtr_IncByAmount->empty() && rel_231_new_Variable_SymbolicValue->empty() && rel_234_new_FreePointerBasedValue->empty() && rel_237_new_FreePointerBasedValuesWithFreePointerAliases->empty() && rel_240_new_FreePointerBasedValuesNumDiff->empty() && rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->empty() && rel_246_new_StatementWritesMemoryOfConstantLength->empty() && rel_249_new_MemoryAddressVar->empty() && rel_252_new_MemoryAddressVariable_Function->empty() && rel_255_new_MemoryAddressVarsNumDiff->empty() && rel_258_new_PossibleStructAllocation->empty() && rel_261_new_PossibleStructArg->empty() && rel_264_new_InductionVariableIncreasesByConst->empty() && rel_267_new_InductionVariableLowerBoundVar->empty() && rel_270_new_InductionVariableUpperBoundVar->empty() && rel_273_new_MemoryCopyLoop->empty() && rel_276_new_MemoryCopyLoopConstLength->empty() && rel_279_new_WellFormedLoopInductionVariable->empty() && rel_282_new_StatementWritesMemoryCopiedFromLoop->empty() && rel_285_new_CALLReturnDataLengthVal->empty() && rel_288_new_CALLReturnsFixedSizeData->empty() && rel_291_new_variableValueConstantFolding_ConstantFoldResult2->empty() && rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_208_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_208_variableValueConstantFolding_RequestConstantFold2->createContext());
CREATE_OP_CONTEXT(rel_210_new_variableValueConstantFolding_RequestConstantFold2_op_ctxt,rel_210_new_variableValueConstantFolding_RequestConstantFold2->createContext());
for(const auto& env0 : *rel_210_new_variableValueConstantFolding_RequestConstantFold2) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_208_variableValueConstantFolding_RequestConstantFold2->insert(tuple,READ_OP_CONTEXT(rel_208_variableValueConstantFolding_RequestConstantFold2_op_ctxt));
}
}
();std::swap(rel_209_delta_variableValueConstantFolding_RequestConstantFold2, rel_210_new_variableValueConstantFolding_RequestConstantFold2);
rel_210_new_variableValueConstantFolding_RequestConstantFold2->purge();
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_213_new_Variable_Value_op_ctxt,rel_213_new_Variable_Value->createContext());
for(const auto& env0 : *rel_213_new_Variable_Value) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_211_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
}
}
();std::swap(rel_212_delta_Variable_Value, rel_213_new_Variable_Value);
rel_213_new_Variable_Value->purge();
[&](){
CREATE_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt,rel_214_AuxStatementOpAndConstantArgValues->createContext());
CREATE_OP_CONTEXT(rel_216_new_AuxStatementOpAndConstantArgValues_op_ctxt,rel_216_new_AuxStatementOpAndConstantArgValues->createContext());
for(const auto& env0 : *rel_216_new_AuxStatementOpAndConstantArgValues) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_214_AuxStatementOpAndConstantArgValues->insert(tuple,READ_OP_CONTEXT(rel_214_AuxStatementOpAndConstantArgValues_op_ctxt));
}
}
();std::swap(rel_215_delta_AuxStatementOpAndConstantArgValues, rel_216_new_AuxStatementOpAndConstantArgValues);
rel_216_new_AuxStatementOpAndConstantArgValues->purge();
[&](){
CREATE_OP_CONTEXT(rel_217_InductionVariable_op_ctxt,rel_217_InductionVariable->createContext());
CREATE_OP_CONTEXT(rel_219_new_InductionVariable_op_ctxt,rel_219_new_InductionVariable->createContext());
for(const auto& env0 : *rel_219_new_InductionVariable) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_217_InductionVariable->insert(tuple,READ_OP_CONTEXT(rel_217_InductionVariable_op_ctxt));
}
}
();std::swap(rel_218_delta_InductionVariable, rel_219_new_InductionVariable);
rel_219_new_InductionVariable->purge();
[&](){
CREATE_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt,rel_220_GlobalInductionVariableStore->createContext());
CREATE_OP_CONTEXT(rel_222_new_GlobalInductionVariableStore_op_ctxt,rel_222_new_GlobalInductionVariableStore->createContext());
for(const auto& env0 : *rel_222_new_GlobalInductionVariableStore) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_220_GlobalInductionVariableStore->insert(tuple,READ_OP_CONTEXT(rel_220_GlobalInductionVariableStore_op_ctxt));
}
}
();std::swap(rel_221_delta_GlobalInductionVariableStore, rel_222_new_GlobalInductionVariableStore);
rel_222_new_GlobalInductionVariableStore->purge();
[&](){
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_225_new_Variable_NumericValue_op_ctxt,rel_225_new_Variable_NumericValue->createContext());
for(const auto& env0 : *rel_225_new_Variable_NumericValue) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_223_Variable_NumericValue->insert(tuple,READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
}
}
();std::swap(rel_224_delta_Variable_NumericValue, rel_225_new_Variable_NumericValue);
rel_225_new_Variable_NumericValue->purge();
[&](){
CREATE_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt,rel_226_MSTOREFreePtr_IncByAmount->createContext());
CREATE_OP_CONTEXT(rel_228_new_MSTOREFreePtr_IncByAmount_op_ctxt,rel_228_new_MSTOREFreePtr_IncByAmount->createContext());
for(const auto& env0 : *rel_228_new_MSTOREFreePtr_IncByAmount) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_226_MSTOREFreePtr_IncByAmount->insert(tuple,READ_OP_CONTEXT(rel_226_MSTOREFreePtr_IncByAmount_op_ctxt));
}
}
();std::swap(rel_227_delta_MSTOREFreePtr_IncByAmount, rel_228_new_MSTOREFreePtr_IncByAmount);
rel_228_new_MSTOREFreePtr_IncByAmount->purge();
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_231_new_Variable_SymbolicValue_op_ctxt,rel_231_new_Variable_SymbolicValue->createContext());
for(const auto& env0 : *rel_231_new_Variable_SymbolicValue) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_229_Variable_SymbolicValue->insert(tuple,READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
}
}
();std::swap(rel_230_delta_Variable_SymbolicValue, rel_231_new_Variable_SymbolicValue);
rel_231_new_Variable_SymbolicValue->purge();
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_234_new_FreePointerBasedValue_op_ctxt,rel_234_new_FreePointerBasedValue->createContext());
for(const auto& env0 : *rel_234_new_FreePointerBasedValue) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_232_FreePointerBasedValue->insert(tuple,READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
}
}
();std::swap(rel_233_delta_FreePointerBasedValue, rel_234_new_FreePointerBasedValue);
rel_234_new_FreePointerBasedValue->purge();
[&](){
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_237_new_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_237_new_FreePointerBasedValuesWithFreePointerAliases->createContext());
for(const auto& env0 : *rel_237_new_FreePointerBasedValuesWithFreePointerAliases) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_235_FreePointerBasedValuesWithFreePointerAliases->insert(tuple,READ_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt));
}
}
();std::swap(rel_236_delta_FreePointerBasedValuesWithFreePointerAliases, rel_237_new_FreePointerBasedValuesWithFreePointerAliases);
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->purge();
[&](){
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_240_new_FreePointerBasedValuesNumDiff_op_ctxt,rel_240_new_FreePointerBasedValuesNumDiff->createContext());
for(const auto& env0 : *rel_240_new_FreePointerBasedValuesNumDiff) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_238_FreePointerBasedValuesNumDiff->insert(tuple,READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
}
}
();std::swap(rel_239_delta_FreePointerBasedValuesNumDiff, rel_240_new_FreePointerBasedValuesNumDiff);
rel_240_new_FreePointerBasedValuesNumDiff->purge();
[&](){
CREATE_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
CREATE_OP_CONTEXT(rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt,rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->createContext());
for(const auto& env0 : *rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->insert(tuple,READ_OP_CONTEXT(rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals_op_ctxt));
}
}
();std::swap(rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals, rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals);
rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->purge();
[&](){
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_246_new_StatementWritesMemoryOfConstantLength_op_ctxt,rel_246_new_StatementWritesMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_246_new_StatementWritesMemoryOfConstantLength) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_244_StatementWritesMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt));
}
}
();std::swap(rel_245_delta_StatementWritesMemoryOfConstantLength, rel_246_new_StatementWritesMemoryOfConstantLength);
rel_246_new_StatementWritesMemoryOfConstantLength->purge();
[&](){
CREATE_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt,rel_247_MemoryAddressVar->createContext());
CREATE_OP_CONTEXT(rel_249_new_MemoryAddressVar_op_ctxt,rel_249_new_MemoryAddressVar->createContext());
for(const auto& env0 : *rel_249_new_MemoryAddressVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_247_MemoryAddressVar->insert(tuple,READ_OP_CONTEXT(rel_247_MemoryAddressVar_op_ctxt));
}
}
();std::swap(rel_248_delta_MemoryAddressVar, rel_249_new_MemoryAddressVar);
rel_249_new_MemoryAddressVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt,rel_250_MemoryAddressVariable_Function->createContext());
CREATE_OP_CONTEXT(rel_252_new_MemoryAddressVariable_Function_op_ctxt,rel_252_new_MemoryAddressVariable_Function->createContext());
for(const auto& env0 : *rel_252_new_MemoryAddressVariable_Function) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_250_MemoryAddressVariable_Function->insert(tuple,READ_OP_CONTEXT(rel_250_MemoryAddressVariable_Function_op_ctxt));
}
}
();std::swap(rel_251_delta_MemoryAddressVariable_Function, rel_252_new_MemoryAddressVariable_Function);
rel_252_new_MemoryAddressVariable_Function->purge();
[&](){
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_255_new_MemoryAddressVarsNumDiff_op_ctxt,rel_255_new_MemoryAddressVarsNumDiff->createContext());
for(const auto& env0 : *rel_255_new_MemoryAddressVarsNumDiff) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_253_MemoryAddressVarsNumDiff->insert(tuple,READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
}
}
();std::swap(rel_254_delta_MemoryAddressVarsNumDiff, rel_255_new_MemoryAddressVarsNumDiff);
rel_255_new_MemoryAddressVarsNumDiff->purge();
[&](){
CREATE_OP_CONTEXT(rel_258_new_PossibleStructAllocation_op_ctxt,rel_258_new_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
for(const auto& env0 : *rel_258_new_PossibleStructAllocation) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_256_PossibleStructAllocation->insert(tuple,READ_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt));
}
}
();std::swap(rel_257_delta_PossibleStructAllocation, rel_258_new_PossibleStructAllocation);
rel_258_new_PossibleStructAllocation->purge();
[&](){
CREATE_OP_CONTEXT(rel_259_PossibleStructArg_op_ctxt,rel_259_PossibleStructArg->createContext());
CREATE_OP_CONTEXT(rel_261_new_PossibleStructArg_op_ctxt,rel_261_new_PossibleStructArg->createContext());
for(const auto& env0 : *rel_261_new_PossibleStructArg) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_259_PossibleStructArg->insert(tuple,READ_OP_CONTEXT(rel_259_PossibleStructArg_op_ctxt));
}
}
();std::swap(rel_260_delta_PossibleStructArg, rel_261_new_PossibleStructArg);
rel_261_new_PossibleStructArg->purge();
[&](){
CREATE_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt,rel_262_InductionVariableIncreasesByConst->createContext());
CREATE_OP_CONTEXT(rel_264_new_InductionVariableIncreasesByConst_op_ctxt,rel_264_new_InductionVariableIncreasesByConst->createContext());
for(const auto& env0 : *rel_264_new_InductionVariableIncreasesByConst) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_262_InductionVariableIncreasesByConst->insert(tuple,READ_OP_CONTEXT(rel_262_InductionVariableIncreasesByConst_op_ctxt));
}
}
();std::swap(rel_263_delta_InductionVariableIncreasesByConst, rel_264_new_InductionVariableIncreasesByConst);
rel_264_new_InductionVariableIncreasesByConst->purge();
[&](){
CREATE_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt,rel_265_InductionVariableLowerBoundVar->createContext());
CREATE_OP_CONTEXT(rel_267_new_InductionVariableLowerBoundVar_op_ctxt,rel_267_new_InductionVariableLowerBoundVar->createContext());
for(const auto& env0 : *rel_267_new_InductionVariableLowerBoundVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_265_InductionVariableLowerBoundVar->insert(tuple,READ_OP_CONTEXT(rel_265_InductionVariableLowerBoundVar_op_ctxt));
}
}
();std::swap(rel_266_delta_InductionVariableLowerBoundVar, rel_267_new_InductionVariableLowerBoundVar);
rel_267_new_InductionVariableLowerBoundVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt,rel_268_InductionVariableUpperBoundVar->createContext());
CREATE_OP_CONTEXT(rel_270_new_InductionVariableUpperBoundVar_op_ctxt,rel_270_new_InductionVariableUpperBoundVar->createContext());
for(const auto& env0 : *rel_270_new_InductionVariableUpperBoundVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_268_InductionVariableUpperBoundVar->insert(tuple,READ_OP_CONTEXT(rel_268_InductionVariableUpperBoundVar_op_ctxt));
}
}
();std::swap(rel_269_delta_InductionVariableUpperBoundVar, rel_270_new_InductionVariableUpperBoundVar);
rel_270_new_InductionVariableUpperBoundVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_273_new_MemoryCopyLoop_op_ctxt,rel_273_new_MemoryCopyLoop->createContext());
for(const auto& env0 : *rel_273_new_MemoryCopyLoop) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_271_MemoryCopyLoop->insert(tuple,READ_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt));
}
}
();std::swap(rel_272_delta_MemoryCopyLoop, rel_273_new_MemoryCopyLoop);
rel_273_new_MemoryCopyLoop->purge();
[&](){
CREATE_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt,rel_274_MemoryCopyLoopConstLength->createContext());
CREATE_OP_CONTEXT(rel_276_new_MemoryCopyLoopConstLength_op_ctxt,rel_276_new_MemoryCopyLoopConstLength->createContext());
for(const auto& env0 : *rel_276_new_MemoryCopyLoopConstLength) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_274_MemoryCopyLoopConstLength->insert(tuple,READ_OP_CONTEXT(rel_274_MemoryCopyLoopConstLength_op_ctxt));
}
}
();std::swap(rel_275_delta_MemoryCopyLoopConstLength, rel_276_new_MemoryCopyLoopConstLength);
rel_276_new_MemoryCopyLoopConstLength->purge();
[&](){
CREATE_OP_CONTEXT(rel_277_WellFormedLoopInductionVariable_op_ctxt,rel_277_WellFormedLoopInductionVariable->createContext());
CREATE_OP_CONTEXT(rel_279_new_WellFormedLoopInductionVariable_op_ctxt,rel_279_new_WellFormedLoopInductionVariable->createContext());
for(const auto& env0 : *rel_279_new_WellFormedLoopInductionVariable) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_277_WellFormedLoopInductionVariable->insert(tuple,READ_OP_CONTEXT(rel_277_WellFormedLoopInductionVariable_op_ctxt));
}
}
();std::swap(rel_278_delta_WellFormedLoopInductionVariable, rel_279_new_WellFormedLoopInductionVariable);
rel_279_new_WellFormedLoopInductionVariable->purge();
[&](){
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_282_new_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_282_new_StatementWritesMemoryCopiedFromLoop->createContext());
for(const auto& env0 : *rel_282_new_StatementWritesMemoryCopiedFromLoop) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_280_StatementWritesMemoryCopiedFromLoop->insert(tuple,READ_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt));
}
}
();std::swap(rel_281_delta_StatementWritesMemoryCopiedFromLoop, rel_282_new_StatementWritesMemoryCopiedFromLoop);
rel_282_new_StatementWritesMemoryCopiedFromLoop->purge();
[&](){
CREATE_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt,rel_283_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_285_new_CALLReturnDataLengthVal_op_ctxt,rel_285_new_CALLReturnDataLengthVal->createContext());
for(const auto& env0 : *rel_285_new_CALLReturnDataLengthVal) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_283_CALLReturnDataLengthVal->insert(tuple,READ_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt));
}
}
();std::swap(rel_284_delta_CALLReturnDataLengthVal, rel_285_new_CALLReturnDataLengthVal);
rel_285_new_CALLReturnDataLengthVal->purge();
[&](){
CREATE_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt,rel_286_CALLReturnsFixedSizeData->createContext());
CREATE_OP_CONTEXT(rel_288_new_CALLReturnsFixedSizeData_op_ctxt,rel_288_new_CALLReturnsFixedSizeData->createContext());
for(const auto& env0 : *rel_288_new_CALLReturnsFixedSizeData) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_286_CALLReturnsFixedSizeData->insert(tuple,READ_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt));
}
}
();std::swap(rel_287_delta_CALLReturnsFixedSizeData, rel_288_new_CALLReturnsFixedSizeData);
rel_288_new_CALLReturnsFixedSizeData->purge();
[&](){
CREATE_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_289_variableValueConstantFolding_ConstantFoldResult2->createContext());
CREATE_OP_CONTEXT(rel_291_new_variableValueConstantFolding_ConstantFoldResult2_op_ctxt,rel_291_new_variableValueConstantFolding_ConstantFoldResult2->createContext());
for(const auto& env0 : *rel_291_new_variableValueConstantFolding_ConstantFoldResult2) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_289_variableValueConstantFolding_ConstantFoldResult2->insert(tuple,READ_OP_CONTEXT(rel_289_variableValueConstantFolding_ConstantFoldResult2_op_ctxt));
}
}
();std::swap(rel_290_delta_variableValueConstantFolding_ConstantFoldResult2, rel_291_new_variableValueConstantFolding_ConstantFoldResult2);
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->purge();
[&](){
CREATE_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_292_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
CREATE_OP_CONTEXT(rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt,rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->createContext());
for(const auto& env0 : *rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_292_variableValueConstantFolding_ValidConstantFoldOperation->insert(tuple,READ_OP_CONTEXT(rel_292_variableValueConstantFolding_ValidConstantFoldOperation_op_ctxt));
}
}
();std::swap(rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation, rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation);
rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->purge();
iter++;
}
iter = 0;
rel_209_delta_variableValueConstantFolding_RequestConstantFold2->purge();
rel_210_new_variableValueConstantFolding_RequestConstantFold2->purge();
rel_212_delta_Variable_Value->purge();
rel_213_new_Variable_Value->purge();
rel_215_delta_AuxStatementOpAndConstantArgValues->purge();
rel_216_new_AuxStatementOpAndConstantArgValues->purge();
rel_218_delta_InductionVariable->purge();
rel_219_new_InductionVariable->purge();
rel_221_delta_GlobalInductionVariableStore->purge();
rel_222_new_GlobalInductionVariableStore->purge();
rel_224_delta_Variable_NumericValue->purge();
rel_225_new_Variable_NumericValue->purge();
rel_227_delta_MSTOREFreePtr_IncByAmount->purge();
rel_228_new_MSTOREFreePtr_IncByAmount->purge();
rel_230_delta_Variable_SymbolicValue->purge();
rel_231_new_Variable_SymbolicValue->purge();
rel_233_delta_FreePointerBasedValue->purge();
rel_234_new_FreePointerBasedValue->purge();
rel_236_delta_FreePointerBasedValuesWithFreePointerAliases->purge();
rel_237_new_FreePointerBasedValuesWithFreePointerAliases->purge();
rel_239_delta_FreePointerBasedValuesNumDiff->purge();
rel_240_new_FreePointerBasedValuesNumDiff->purge();
rel_242_delta_FreePointerBasedValuesWithFreePointerAliasesNumVals->purge();
rel_243_new_FreePointerBasedValuesWithFreePointerAliasesNumVals->purge();
rel_245_delta_StatementWritesMemoryOfConstantLength->purge();
rel_246_new_StatementWritesMemoryOfConstantLength->purge();
rel_248_delta_MemoryAddressVar->purge();
rel_249_new_MemoryAddressVar->purge();
rel_251_delta_MemoryAddressVariable_Function->purge();
rel_252_new_MemoryAddressVariable_Function->purge();
rel_254_delta_MemoryAddressVarsNumDiff->purge();
rel_255_new_MemoryAddressVarsNumDiff->purge();
rel_257_delta_PossibleStructAllocation->purge();
rel_258_new_PossibleStructAllocation->purge();
rel_260_delta_PossibleStructArg->purge();
rel_261_new_PossibleStructArg->purge();
rel_263_delta_InductionVariableIncreasesByConst->purge();
rel_264_new_InductionVariableIncreasesByConst->purge();
rel_266_delta_InductionVariableLowerBoundVar->purge();
rel_267_new_InductionVariableLowerBoundVar->purge();
rel_269_delta_InductionVariableUpperBoundVar->purge();
rel_270_new_InductionVariableUpperBoundVar->purge();
rel_272_delta_MemoryCopyLoop->purge();
rel_273_new_MemoryCopyLoop->purge();
rel_275_delta_MemoryCopyLoopConstLength->purge();
rel_276_new_MemoryCopyLoopConstLength->purge();
rel_278_delta_WellFormedLoopInductionVariable->purge();
rel_279_new_WellFormedLoopInductionVariable->purge();
rel_281_delta_StatementWritesMemoryCopiedFromLoop->purge();
rel_282_new_StatementWritesMemoryCopiedFromLoop->purge();
rel_284_delta_CALLReturnDataLengthVal->purge();
rel_285_new_CALLReturnDataLengthVal->purge();
rel_287_delta_CALLReturnsFixedSizeData->purge();
rel_288_new_CALLReturnsFixedSizeData->purge();
rel_290_delta_variableValueConstantFolding_ConstantFoldResult2->purge();
rel_291_new_variableValueConstantFolding_ConstantFoldResult2->purge();
rel_293_delta_variableValueConstantFolding_ValidConstantFoldOperation->purge();
rel_294_new_variableValueConstantFolding_ValidConstantFoldOperation->purge();
if (pruneImdtRels) rel_208_variableValueConstantFolding_RequestConstantFold2->purge();
if (pruneImdtRels) rel_8_ADD->purge();
if (pruneImdtRels) rel_51_SUB->purge();
if (pruneImdtRels) rel_76_LT->purge();
if (pruneImdtRels) rel_81_GT->purge();
if (pruneImdtRels) rel_82_ISZERO->purge();
if (pruneImdtRels) rel_60_MSTORE8->purge();
if (pruneImdtRels) rel_3_MSIZE->purge();
if (pruneImdtRels) rel_12_AuxStatementOpAndArgs->purge();
if (pruneImdtRels) rel_214_AuxStatementOpAndConstantArgValues->purge();
if (pruneImdtRels) rel_131_StatementInStructuredLoop->purge();
if (pruneImdtRels) rel_191_LoopExitCond->purge();
if (pruneImdtRels) rel_217_InductionVariable->purge();
if (pruneImdtRels) rel_220_GlobalInductionVariableStore->purge();
if (pruneImdtRels) rel_190_MSTOREFreePtrOrder->purge();
if (pruneImdtRels) rel_189_MLOADFreePtrLoadsValueStoredAt->purge();
if (pruneImdtRels) rel_226_MSTOREFreePtr_IncByAmount->purge();
if (pruneImdtRels) rel_181_MLOADSFreePtrUnchanged->purge();
if (pruneImdtRels) rel_241_FreePointerBasedValuesWithFreePointerAliasesNumVals->purge();
if (pruneImdtRels) rel_247_MemoryAddressVar->purge();
if (pruneImdtRels) rel_250_MemoryAddressVariable_Function->purge();
if (pruneImdtRels) rel_259_PossibleStructArg->purge();
if (pruneImdtRels) rel_262_InductionVariableIncreasesByConst->purge();
if (pruneImdtRels) rel_265_InductionVariableLowerBoundVar->purge();
if (pruneImdtRels) rel_268_InductionVariableUpperBoundVar->purge();
if (pruneImdtRels) rel_274_MemoryCopyLoopConstLength->purge();
if (pruneImdtRels) rel_277_WellFormedLoopInductionVariable->purge();
if (pruneImdtRels) rel_59_CALLReturnDataLengthVar->purge();
if (pruneImdtRels) rel_46_UniqueMSTOREMLOADForAddrVar->purge();
if (pruneImdtRels) rel_289_variableValueConstantFolding_ConstantFoldResult2->purge();
if (pruneImdtRels) rel_292_variableValueConstantFolding_ValidConstantFoldOperation->purge();
if (pruneImdtRels) rel_195_inductionVariableFlow_Flows->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_82(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FreePointerBasedValuesEqual(val1,val2) :- 
   FreePointerBasedValuesWithFreePointerAliases(val1,val2),
   FreePointerBasedValue(val1,_,_,numVal),
   FreePointerBasedValue(val2,_,_,numVal).
in file memory_addresses.dl [325:1-328:45])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_235_FreePointerBasedValuesWithFreePointerAliases->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_235_FreePointerBasedValuesWithFreePointerAliases_op_ctxt,rel_235_FreePointerBasedValuesWithFreePointerAliases->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
for(const auto& env0 : *rel_235_FreePointerBasedValuesWithFreePointerAliases) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !rel_232_FreePointerBasedValue->lowerUpperRange_1001(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_295_FreePointerBasedValuesEqual->insert(tuple,READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesEqual(val1,val2) :- 
   FreePointerBasedValuesNumDiff(val1,val2,0).
in file memory_addresses.dl [330:1-331:48])_");
if(!(rel_238_FreePointerBasedValuesNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_295_FreePointerBasedValuesEqual->insert(tuple,READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_235_FreePointerBasedValuesWithFreePointerAliases->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_83(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FreePointerBasedValue_AliasRep(val,repVal) :- 
   FreePointerBasedValue(val,_,_,_),
   FreePointerBasedValuesEqual(val,repVal),
   ord(repVal) = max ord(otherVal) : { FreePointerBasedValuesEqual(val,otherVal),ord(otherVal) = ord(otherVal) }.
in file memory_addresses.dl [333:1-337:25])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
for(const auto& env0 : *rel_232_FreePointerBasedValue) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) == ramBitCast<RamDomain>(env2[1]))) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env2[1]));
}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[1]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_296_FreePointerBasedValue_AliasRep->insert(tuple,READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_84(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PossibleArrayAlias(possibleArray,possibleArray) :- 
   PossibleArray(possibleArray).
in file arrays.dl [749:1-750:32])_");
if(!(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt,rel_297_PossibleArrayAlias->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_297_PossibleArrayAlias->insert(tuple,READ_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayAlias(possibleArray1,possibleArray2) :- 
   PossibleArray(possibleArray1),
   Variable_SymbolicValue(possibleArray1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(possibleArray2,val2).
in file arrays.dl [752:1-759:48])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt,rel_297_PossibleArrayAlias->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0])}};
rel_297_PossibleArrayAlias->insert(tuple,READ_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt));
}
break;
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_85(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLReturnsArray(call) :- 
   CALLReturnDataLengthVal(call,0),
   AfterCALLCheckRetDataSize(call).
in file uses_defs_abstractions.dl [473:1-475:35])_");
if(!(rel_283_CALLReturnDataLengthVal->empty()) && !(rel_139_AfterCALLCheckRetDataSize->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt,rel_139_AfterCALLCheckRetDataSize->createContext());
CREATE_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt,rel_283_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_298_CALLReturnsArray_op_ctxt,rel_298_CALLReturnsArray->createContext());
auto range = rel_283_CALLReturnDataLengthVal->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt));
for(const auto& env0 : range) {
if( rel_139_AfterCALLCheckRetDataSize->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_298_CALLReturnsArray->insert(tuple,READ_OP_CONTEXT(rel_298_CALLReturnsArray_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_86(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single2(@generator_0) :- 
   @generator_0 = count : { CALLReturnsArray(+underscore_908) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_298_CALLReturnsArray_op_ctxt,rel_298_CALLReturnsArray->createContext());
CREATE_OP_CONTEXT(rel_299_agg_single2_op_ctxt,rel_299_agg_single2->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_298_CALLReturnsArray->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_299_agg_single2->insert(tuple,READ_OP_CONTEXT(rel_299_agg_single2_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_87(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarPlusSixtyThreeAndNotThirtyOne(var,result) :- 
   Variable_Value(temp2,"0x3f"),
   ADDFix(_,var,temp2,varPlus),
   AND(_,notThrirtyOne,varPlus,result),
   Variable_Value(notThrirtyOne,"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0").
in file helpers.dl [87:1-91:103])_");
if(!(rel_85_AND->empty()) && !(rel_9_ADDFix->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(30))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(30))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_85_AND->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env2 : range) {
if( rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(RamSigned(29))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env2[3])}};
rel_300_VarPlusSixtyThreeAndNotThirtyOne->insert(tuple,READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPlusSixtyThreeAndNotThirtyOne(var,result) :- 
   Variable_Value(temp2,"0x3f"),
   ADDFix(_,var,temp2,varPlus),
   AND(_,varPlus,notThrirtyOne,result),
   Variable_Value(notThrirtyOne,"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0").
in file helpers.dl [87:1-91:103])_");
if(!(rel_85_AND->empty()) && !(rel_9_ADDFix->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(30))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(30))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_85_AND->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env2 : range) {
if( rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(RamSigned(29))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env2[3])}};
rel_300_VarPlusSixtyThreeAndNotThirtyOne->insert(tuple,READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_88(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ReturnDataByteArray(array,arrayStart,call) :- 
   RETURNDATASIZEOfCALL(_,arrayLengthVar,call),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   RETURNDATACOPYAllDataOfCALL(_,arrayStart,call),
   RETURNDATASIZEOfCALL(_,arrayLengthVarAlt,call),
   VarPlusSixtyThreeAndNotThirtyOne(arrayLengthVarAlt,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [534:1-546:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_166_RETURNDATACOPYAllDataOfCALL->empty()) && !(rel_300_VarPlusSixtyThreeAndNotThirtyOne->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_301_ReturnDataByteArray_op_ctxt,rel_301_ReturnDataByteArray->createContext());
for(const auto& env0 : *rel_165_RETURNDATASIZEOfCALL) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
if( !rel_166_RETURNDATACOPYAllDataOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt)).empty()) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_300_VarPlusSixtyThreeAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel_301_ReturnDataByteArray->insert(tuple,READ_OP_CONTEXT(rel_301_ReturnDataByteArray_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_89(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(IsABIEncodedArrayVar(abiArr) :- 
   StatementUsesMemoryReadsABIEnc(stmt,_),
   StatementUsesMemory_StartVar(stmt,_,abiArr).
in file uses_defs_abstractions.dl [323:1-325:49])_");
if(!(rel_69_StatementUsesMemoryReadsABIEnc->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt,rel_69_StatementUsesMemoryReadsABIEnc->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_69_StatementUsesMemoryReadsABIEnc) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[2])}};
rel_302_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(IsABIEncodedArrayVar(abiArr) :- 
   StatementUsesMemoryReadsABIEncWSelector(stmt,_),
   StatementUsesMemory_StartVar(stmt,_,abiArr).
in file uses_defs_abstractions.dl [333:1-335:49])_");
if(!(rel_70_StatementUsesMemoryReadsABIEncWSelector->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_70_StatementUsesMemoryReadsABIEncWSelector) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[2])}};
rel_302_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(IsABIEncodedArrayVar(memStartVar) :- 
   CALLReturnsArray(call),
   RETURNDATACOPYAllDataOfCALL(_,memStartVar,call),
   Variable_SymbolicValue(memStartVar,_).
in file uses_defs_abstractions.dl [515:1-519:42])_");
if(!(rel_166_RETURNDATACOPYAllDataOfCALL->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_298_CALLReturnsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_298_CALLReturnsArray_op_ctxt,rel_298_CALLReturnsArray->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_298_CALLReturnsArray) {
auto range = rel_166_RETURNDATACOPYAllDataOfCALL->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt));
for(const auto& env1 : range) {
if( !rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_302_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(IsABIEncodedArrayVar(abiEncodedArrayVar) :- 
   ReturnDataByteArray(arrayVar,_,_),
   PHIStmtTwoUses(_,arrayVar,ninetySixVar,phiVar),
   BasicVariable_Value(ninetySixVar,"0x60"),
   VarPlusThirtyTwo(phiVar,abiEncodedArrayVar).
in file uses_defs_abstractions.dl [523:1-528:48])_");
if(!(rel_49_PHIStmtTwoUses->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_301_ReturnDataByteArray->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_301_ReturnDataByteArray_op_ctxt,rel_301_ReturnDataByteArray->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_301_ReturnDataByteArray) {
auto range = rel_49_PHIStmtTwoUses->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
for(const auto& env1 : range) {
if( rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(RamSigned(31))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[1])}};
rel_302_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt));
}
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_303_delta_IsABIEncodedArrayVar_op_ctxt,rel_303_delta_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_302_IsABIEncodedArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_303_delta_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_303_delta_IsABIEncodedArrayVar_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(IsABIEncodedArrayVar(arrVar2) :- 
   IsABIEncodedArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [801:1-809:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_303_delta_IsABIEncodedArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_303_delta_IsABIEncodedArrayVar_op_ctxt,rel_303_delta_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_304_new_IsABIEncodedArrayVar_op_ctxt,rel_304_new_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_303_delta_IsABIEncodedArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_302_IsABIEncodedArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env5[0])}};
rel_304_new_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_304_new_IsABIEncodedArrayVar_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
if(rel_304_new_IsABIEncodedArrayVar->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_304_new_IsABIEncodedArrayVar_op_ctxt,rel_304_new_IsABIEncodedArrayVar->createContext());
for(const auto& env0 : *rel_304_new_IsABIEncodedArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_302_IsABIEncodedArrayVar->insert(tuple,READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt));
}
}
();std::swap(rel_303_delta_IsABIEncodedArrayVar, rel_304_new_IsABIEncodedArrayVar);
rel_304_new_IsABIEncodedArrayVar->purge();
iter++;
}
iter = 0;
rel_303_delta_IsABIEncodedArrayVar->purge();
rel_304_new_IsABIEncodedArrayVar->purge();
if (pruneImdtRels) rel_13_BasicVariable_Value->purge();
if (pruneImdtRels) rel_301_ReturnDataByteArray->purge();
if (pruneImdtRels) rel_49_PHIStmtTwoUses->purge();
if (pruneImdtRels) rel_298_CALLReturnsArray->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_90(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ValueMasksOrKeepsByteAtIndex(val,1,(((len-@generator_0)-2)/2)) :- 
   ValueWithEvenLength(val,len),
   "ff" = substr(val,@generator_0,2),
   @generator_0 = range(2,(len-1),2).
in file casts_shifts.dl [16:1-24:5])_");
if(!(rel_32_ValueWithEvenLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt,rel_32_ValueWithEvenLength->createContext());
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
for(const auto& env0 : *rel_32_ValueWithEvenLength) {
souffle::evaluator::runRange<RamSigned>(RamSigned(2),(ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(RamSigned(1))),RamSigned(2), [&](auto&& env1) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamDomain>(RamSigned(32)) == ramBitCast<RamDomain>(symTable.encode(substr_wrapper(symTable.decode(env0[0]),(env1[0]),(RamSigned(2))))))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(1)),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(env1[0]))) - ramBitCast<RamSigned>(RamSigned(2)))) / ramBitCast<RamSigned>(RamSigned(2))))}};
rel_33_ValueMasksOrKeepsByteAtIndex->insert(tuple,READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
}
});
}
}
();}
signalHandler->setMsg(R"_(ValueMasksOrKeepsByteAtIndex(val,0,(((len-@generator_0)-2)/2)) :- 
   ValueWithEvenLength(val,len),
   "00" = substr(val,@generator_0,2),
   @generator_0 = range(2,(len-1),2).
in file casts_shifts.dl [16:1-24:5])_");
if(!(rel_32_ValueWithEvenLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt,rel_32_ValueWithEvenLength->createContext());
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
for(const auto& env0 : *rel_32_ValueWithEvenLength) {
souffle::evaluator::runRange<RamSigned>(RamSigned(2),(ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(RamSigned(1))),RamSigned(2), [&](auto&& env1) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamDomain>(RamSigned(25)) == ramBitCast<RamDomain>(symTable.encode(substr_wrapper(symTable.decode(env0[0]),(env1[0]),(RamSigned(2))))))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(0)),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(env1[0]))) - ramBitCast<RamSigned>(RamSigned(2)))) / ramBitCast<RamSigned>(RamSigned(2))))}};
rel_33_ValueMasksOrKeepsByteAtIndex->insert(tuple,READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
}
});
}
}
();}
signalHandler->setMsg(R"_(ValueMasksOrKeepsByteAtIndex(val,-1,(((len-@generator_0)-2)/2)) :- 
   ValueWithEvenLength(val,len),
   substr(val,@generator_0,2) != "00",
   substr(val,@generator_0,2) != "ff",
   @generator_0 = range(2,(len-1),2).
in file casts_shifts.dl [16:1-24:5])_");
if(!(rel_32_ValueWithEvenLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt,rel_32_ValueWithEvenLength->createContext());
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
for(const auto& env0 : *rel_32_ValueWithEvenLength) {
souffle::evaluator::runRange<RamSigned>(RamSigned(2),(ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(RamSigned(1))),RamSigned(2), [&](auto&& env1) {
if( (ramBitCast<RamDomain>(symTable.encode(substr_wrapper(symTable.decode(env0[0]),(env1[0]),(RamSigned(2))))) != ramBitCast<RamDomain>(RamSigned(25))) && (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamDomain>(symTable.encode(substr_wrapper(symTable.decode(env0[0]),(env1[0]),(RamSigned(2))))) != ramBitCast<RamDomain>(RamSigned(32)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(-1)),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[1]) - ramBitCast<RamSigned>(env1[0]))) - ramBitCast<RamSigned>(RamSigned(2)))) / ramBitCast<RamSigned>(RamSigned(2))))}};
rel_33_ValueMasksOrKeepsByteAtIndex->insert(tuple,READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
}
});
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_91(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayVarsInSameClass(arrVar1,arrVar1) :- 
   IsABIEncodedArrayVar(arrVar1).
in file arrays.dl [798:1-799:33])_");
if(!(rel_302_IsABIEncodedArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt,rel_305_ABIEncodedArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_302_IsABIEncodedArrayVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_305_ABIEncodedArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayVarsInSameClass(arrVar1,arrVar2) :- 
   IsABIEncodedArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [801:1-809:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_302_IsABIEncodedArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt,rel_305_ABIEncodedArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_302_IsABIEncodedArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0])}};
rel_305_ABIEncodedArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt));
}
break;
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_92(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayVar_ClassRep(arrVar,as(arrVarRep, ArrayVariable)) :- 
   IsABIEncodedArrayVar(arrVar),
   ABIEncodedArrayVarsInSameClass(arrVar,arrVarRep),
   ord(arrVarRep) = max ord(arrVar2) : { ABIEncodedArrayVarsInSameClass(arrVar,arrVar2),ord(arrVar2) = ord(arrVar2) }.
in file arrays.dl [811:1-815:28])_");
if(!(rel_302_IsABIEncodedArrayVar->empty()) && !(rel_305_ABIEncodedArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt,rel_305_ABIEncodedArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
for(const auto& env0 : *rel_302_IsABIEncodedArrayVar) {
auto range = rel_305_ABIEncodedArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_305_ABIEncodedArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_305_ABIEncodedArrayVarsInSameClass_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) == ramBitCast<RamDomain>(env2[1]))) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env2[1]));
}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[1]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_306_ABIEncodedArrayVar_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_305_ABIEncodedArrayVarsInSameClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_93(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayNoFunctionSelector(abiArr) :- 
   StatementUsesMemoryReadsABIEnc(stmt,_),
   StatementUsesMemory_StartVar(stmt,_,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr).
in file uses_defs_abstractions.dl [327:1-330:50])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_69_StatementUsesMemoryReadsABIEnc->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt,rel_69_StatementUsesMemoryReadsABIEnc->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt,rel_307_ABIEncodedArrayNoFunctionSelector->createContext());
for(const auto& env0 : *rel_69_StatementUsesMemoryReadsABIEnc) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[1])}};
rel_307_ABIEncodedArrayNoFunctionSelector->insert(tuple,READ_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_94(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayReadByStmt(abiArr,memConsStmt) :- 
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   StatementUsesMemory_StartVar(memConsStmt,_,abiArrVar).
in file uses_defs_abstractions.dl [203:1-205:59])_");
if(!(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt,rel_308_ABIEncodedArrayReadByStmt->createContext());
for(const auto& env0 : *rel_306_ABIEncodedArrayVar_ClassRep) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env1[0])}};
rel_308_ABIEncodedArrayReadByStmt->insert(tuple,READ_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_95(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayWFunctionSelector(abiArr) :- 
   StatementUsesMemoryReadsABIEncWSelector(stmt,_),
   StatementUsesMemory_StartVar(stmt,_,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr).
in file uses_defs_abstractions.dl [337:1-340:50])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_70_StatementUsesMemoryReadsABIEncWSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
for(const auto& env0 : *rel_70_StatementUsesMemoryReadsABIEncWSelector) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[1])}};
rel_309_ABIEncodedArrayWFunctionSelector->insert(tuple,READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_70_StatementUsesMemoryReadsABIEncWSelector->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_96(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryOfComputableLength(stmt,lenvar,@hex_to_number(val)) :- 
   StatementUsesMemory_LengthVar(stmt,_,lenvar),
   Variable_Value(lenvar,val).
in file core.dl [112:1-115:32])_");
if(!(rel_66_StatementUsesMemory_LengthVar->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_310_StatementUsesMemoryOfComputableLength->insert(tuple,READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_97(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLength(memConsStmt,startVar,length) :- 
   StatementUsesMemoryOfComputableLength(memConsStmt,_,length),
   StatementUsesMemory_StartVar(memConsStmt,_,startVar).
in file core.dl [173:1-175:58])_");
if(!(rel_310_StatementUsesMemoryOfComputableLength->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_310_StatementUsesMemoryOfComputableLength) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[2]),ramBitCast(env0[2])}};
rel_311_StatementReadsMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLength(mload,indexVar,32) :- 
   MLOAD(mload,indexVar,_).
in file core.dl [177:1-178:29])_");
if(!(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(32))}};
rel_311_StatementReadsMemoryOfConstantLength->insert(tuple,READ_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_98(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_LenVarHasManyVars(stmt,lenvar) :- 
   StatementUsesMemoryOfComputableLength(stmt,lenvar,val1),
   StatementUsesMemoryOfComputableLength(stmt,lenvar,val2),
   val1 != val2.
in file metrics.dl [166:1-169:16])_");
if(!(rel_310_StatementUsesMemoryOfComputableLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_312_Analytics_LenVarHasManyVars_op_ctxt,rel_312_Analytics_LenVarHasManyVars->createContext());
for(const auto& env0 : *rel_310_StatementUsesMemoryOfComputableLength) {
auto range = rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(env1[2]))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_312_Analytics_LenVarHasManyVars->insert(tuple,READ_OP_CONTEXT(rel_312_Analytics_LenVarHasManyVars_op_ctxt));
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tlenvar"},{"auxArity","0"},{"name","Analytics_LenVarHasManyVars"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"lenvar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_312_Analytics_LenVarHasManyVars);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_99(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single3(@generator_0) :- 
   @generator_0 = count : { StatementUsesMemoryOfComputableLength(+underscore_912,+underscore_913,+underscore_914) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_313_agg_single3_op_ctxt,rel_313_agg_single3->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_310_StatementUsesMemoryOfComputableLength->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_313_agg_single3->insert(tuple,READ_OP_CONTEXT(rel_313_agg_single3_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Verbatim_MemConsStmtsLengths(z1,z0,z) :- 
   __agg_single3(z),
   __agg_single4(z0),
   __agg_single5(z1).
in file metrics.dl [149:1-152:70])_");
if(!(rel_73_agg_single4->empty()) && !(rel_74_agg_single5->empty()) && !(rel_313_agg_single3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_73_agg_single4_op_ctxt,rel_73_agg_single4->createContext());
CREATE_OP_CONTEXT(rel_74_agg_single5_op_ctxt,rel_74_agg_single5->createContext());
CREATE_OP_CONTEXT(rel_313_agg_single3_op_ctxt,rel_313_agg_single3->createContext());
CREATE_OP_CONTEXT(rel_314_Verbatim_MemConsStmtsLengths_op_ctxt,rel_314_Verbatim_MemConsStmtsLengths->createContext());
for(const auto& env0 : *rel_313_agg_single3) {
for(const auto& env1 : *rel_73_agg_single4) {
for(const auto& env2 : *rel_74_agg_single5) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_314_Verbatim_MemConsStmtsLengths->insert(tuple,READ_OP_CONTEXT(rel_314_Verbatim_MemConsStmtsLengths_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","numOfMemConsStmts\thaveLengthInit\thaveLength"},{"auxArity","0"},{"name","Verbatim_MemConsStmtsLengths"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"numOfMemConsStmts\", \"haveLengthInit\", \"haveLength\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_314_Verbatim_MemConsStmtsLengths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_74_agg_single5->purge();
if (pruneImdtRels) rel_73_agg_single4->purge();
if (pruneImdtRels) rel_313_agg_single3->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ValueIsByteMask(val) :- 
   ValueWithEvenLength(val,_),
   !ValueMasksOrKeepsByteAtIndex(val,-1,_).
in file casts_shifts.dl [26:1-28:45])_");
if(!(rel_32_ValueWithEvenLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_32_ValueWithEvenLength_op_ctxt,rel_32_ValueWithEvenLength->createContext());
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
CREATE_OP_CONTEXT(rel_34_ValueIsByteMask_op_ctxt,rel_34_ValueIsByteMask->createContext());
for(const auto& env0 : *rel_32_ValueWithEvenLength) {
if( !(!rel_33_ValueMasksOrKeepsByteAtIndex->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(-1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(-1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_34_ValueIsByteMask->insert(tuple,READ_OP_CONTEXT(rel_34_ValueIsByteMask_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_32_ValueWithEvenLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementWritesMemoryOfLength(stmt,addrVar,320) :- 
   VariableLengthMemoryCopyStatement(stmt,addrVar,lenVar),
   !Variable_Value(lenVar,_).
in file core.dl [160:1-162:30])_");
if(!(rel_75_VariableLengthMemoryCopyStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
for(const auto& env0 : *rel_75_VariableLengthMemoryCopyStatement) {
if( !(!rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(320))}};
rel_315_StatementWritesMemoryOfLength->insert(tuple,READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfLength(stmt,addrVar,length) :- 
   StatementWritesMemoryOfConstantLength(stmt,addrVar,length).
in file core.dl [164:1-165:64])_");
if(!(rel_244_StatementWritesMemoryOfConstantLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_244_StatementWritesMemoryOfConstantLength_op_ctxt,rel_244_StatementWritesMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
for(const auto& env0 : *rel_244_StatementWritesMemoryOfConstantLength) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_315_StatementWritesMemoryOfLength->insert(tuple,READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfLength(stmt,newIndexVar,length) :- 
   StatementWritesMemoryCopiedFromLoop(stmt,newIndexVar,_,_,length).
in file core.dl [167:1-168:72])_");
if(!(rel_280_StatementWritesMemoryCopiedFromLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_280_StatementWritesMemoryCopiedFromLoop_op_ctxt,rel_280_StatementWritesMemoryCopiedFromLoop->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
for(const auto& env0 : *rel_280_StatementWritesMemoryCopiedFromLoop) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[4])}};
rel_315_StatementWritesMemoryOfLength->insert(tuple,READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_75_VariableLengthMemoryCopyStatement->purge();
if (pruneImdtRels) rel_244_StatementWritesMemoryOfConstantLength->purge();
if (pruneImdtRels) rel_280_StatementWritesMemoryCopiedFromLoop->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,valRep,(length-numDiff)) :- 
   StatementWritesMemoryOfLength(memWriteStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_SymbolicValue(indexVar,indexVal),
   FreePointerBasedValue_AliasRep(indexVal,valRep).
in file core.dl [278:1-284:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_296_FreePointerBasedValue_AliasRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_315_StatementWritesMemoryOfLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_296_FreePointerBasedValue_AliasRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,valRep,(length-numDiff)) :- 
   StatementWritesMemoryOfLength(memWriteStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_Value(indexVar,valRep).
in file core.dl [278:1-284:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_315_StatementWritesMemoryOfLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tvalRep\trelativeLength"},{"auxArity","0"},{"name","StatementWritesMemoryOfConstantLengthAtMemAlias"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memWriteStmt\", \"valRep\", \"relativeLength\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block,stmt,arg,len) :- 
   StatementWritesMemoryOfConstantLengthAtMemAlias(stmt,arg,len),
   Statement_Block(stmt,block).
in file components.dl [239:2-241:33])_");
if(!(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.From(stmt,"CONST") :- 
   StatementWritesMemoryOfLength(stmt,index,_),
   Variable_Value(index,_).
in file core.dl [256:1-256:116])_");
if(!(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_318_mstoreToMemConsStmt_From_op_ctxt,rel_318_mstoreToMemConsStmt_From->createContext());
for(const auto& env0 : *rel_315_StatementWritesMemoryOfLength) {
if( !rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(33))}};
rel_318_mstoreToMemConsStmt_From->insert(tuple,READ_OP_CONTEXT(rel_318_mstoreToMemConsStmt_From_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.From(stmt,"SYMBOLIC") :- 
   StatementWritesMemoryOfLength(stmt,index,_),
   !Variable_Value(index,_).
in file core.dl [257:1-257:120])_");
if(!(rel_315_StatementWritesMemoryOfLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_318_mstoreToMemConsStmt_From_op_ctxt,rel_318_mstoreToMemConsStmt_From->createContext());
for(const auto& env0 : *rel_315_StatementWritesMemoryOfLength) {
if( !(!rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(34))}};
rel_318_mstoreToMemConsStmt_From->insert(tuple,READ_OP_CONTEXT(rel_318_mstoreToMemConsStmt_From_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.BlockHasFromStmt(block,stmt,arg) :- 
   mstoreToMemConsStmt.From(stmt,arg),
   Statement_Block(stmt,block).
in file components.dl [136:2-138:33])_");
if(!(rel_318_mstoreToMemConsStmt_From->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_318_mstoreToMemConsStmt_From_op_ctxt,rel_318_mstoreToMemConsStmt_From->createContext());
CREATE_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt,rel_319_mstoreToMemConsStmt_BlockHasFromStmt->createContext());
for(const auto& env0 : *rel_318_mstoreToMemConsStmt_From) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_319_mstoreToMemConsStmt_BlockHasFromStmt->insert(tuple,READ_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_318_mstoreToMemConsStmt_From->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryOfNonComputableLength(stmt,kind,lenvar) :- 
   StatementUsesMemory_LengthVar(stmt,kind,lenvar),
   !Variable_Value(lenvar,_).
in file core.dl [117:1-119:30])_");
if(!(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt,rel_320_StatementUsesMemoryOfNonComputableLength->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
if( !(!rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_320_StatementUsesMemoryOfNonComputableLength->insert(tuple,READ_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.To(stmt,"CONST") :- 
   StatementUsesMemory_StartVar(stmt,_,startAddr),
   Variable_Value(startAddr,_).
in file core.dl [262:1-262:121])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_321_mstoreToMemConsStmt_To_op_ctxt,rel_321_mstoreToMemConsStmt_To->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( !rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(33))}};
rel_321_mstoreToMemConsStmt_To->insert(tuple,READ_OP_CONTEXT(rel_321_mstoreToMemConsStmt_To_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.To(stmt,"SYMBOLIC") :- 
   StatementUsesMemory_StartVar(stmt,_,startAddr),
   !Variable_Value(startAddr,_).
in file core.dl [263:1-263:125])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_321_mstoreToMemConsStmt_To_op_ctxt,rel_321_mstoreToMemConsStmt_To->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( !(!rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(34))}};
rel_321_mstoreToMemConsStmt_To->insert(tuple,READ_OP_CONTEXT(rel_321_mstoreToMemConsStmt_To_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.BlockHasToStmt(block,stmt,arg) :- 
   mstoreToMemConsStmt.To(stmt,arg),
   Statement_Block(stmt,block).
in file components.dl [144:2-146:33])_");
if(!(rel_321_mstoreToMemConsStmt_To->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_321_mstoreToMemConsStmt_To_op_ctxt,rel_321_mstoreToMemConsStmt_To->createContext());
CREATE_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt,rel_322_mstoreToMemConsStmt_BlockHasToStmt->createContext());
for(const auto& env0 : *rel_321_mstoreToMemConsStmt_To) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_322_mstoreToMemConsStmt_BlockHasToStmt->insert(tuple,READ_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_321_mstoreToMemConsStmt_To->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg) :- 
   mstoreToMemConsStmt.BlockHasFromStmt(block1,stmt1,arg),
   LocalBlockPath(block1,block3),
   mstoreToMemConsStmt.BlockHasToStmt(block3,stmt3,arg),
   block1 != block3,
   !Dominates(block3,block1).
in file components.dl [167:2-172:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_322_mstoreToMemConsStmt_BlockHasToStmt->empty()) && !(rel_319_mstoreToMemConsStmt_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt,rel_319_mstoreToMemConsStmt_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt,rel_322_mstoreToMemConsStmt_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->createContext());
for(const auto& env0 : *rel_319_mstoreToMemConsStmt_BlockHasFromStmt) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[1])) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_322_mstoreToMemConsStmt_BlockHasToStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1]),ramBitCast(env0[2])}};
rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->insert(tuple,READ_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtSameBlock(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.BlockHasFromStmt(block,stmt1,arg),
   mstoreToMemConsStmt.BlockHasToStmt(block,stmt3,arg),
   LocalStatementPathInBlock(stmt1,stmt3),
   stmt1 != stmt3.
in file components.dl [148:2-152:19])_");
if(!(rel_322_mstoreToMemConsStmt_BlockHasToStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_319_mstoreToMemConsStmt_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt,rel_319_mstoreToMemConsStmt_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt,rel_322_mstoreToMemConsStmt_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock_op_ctxt,rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->createContext());
for(const auto& env0 : *rel_319_mstoreToMemConsStmt_BlockHasFromStmt) {
auto range = rel_322_mstoreToMemConsStmt_BlockHasToStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_322_mstoreToMemConsStmt_BlockHasToStmt_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[2])}};
rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->insert(tuple,READ_OP_CONTEXT(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_322_mstoreToMemConsStmt_BlockHasToStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSIZE(stmt,to) :- 
   Statement_Opcode(stmt,"MSIZE"),
   Statement_Defines(stmt,to,0).
in file tac_instructions.dl [159:1-161:34])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(35))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(35))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_3_MSIZE->insert(tuple,READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ByteMask_ZerosMinMax(val,@generator_0,@generator_1) :- 
   ValueIsByteMask(val),
   @generator_0 = min i0 : { ValueMasksOrKeepsByteAtIndex(val,0,i0) },
   @generator_1 = max i : { ValueMasksOrKeepsByteAtIndex(val,0,i) }.
in file casts_shifts.dl [30:1-33:58])_");
if(!(rel_34_ValueIsByteMask->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
CREATE_OP_CONTEXT(rel_34_ValueIsByteMask_op_ctxt,rel_34_ValueIsByteMask->createContext());
CREATE_OP_CONTEXT(rel_35_ByteMask_ZerosMinMax_op_ctxt,rel_35_ByteMask_ZerosMinMax->createContext());
for(const auto& env0 : *rel_34_ValueIsByteMask) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
RamSigned res0 = MAX_RAM_SIGNED;
auto range = rel_33_ValueMasksOrKeepsByteAtIndex->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
res0 = std::min(res0,ramBitCast<RamSigned>(env1[2]));
}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_33_ValueMasksOrKeepsByteAtIndex->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
for(const auto& env2 : range) {
if( true) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env2[2]));
}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env2[0]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[0])}};
rel_35_ByteMask_ZerosMinMax->insert(tuple,READ_OP_CONTEXT(rel_35_ByteMask_ZerosMinMax_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.Bypassing(stmt,"CONST") :- 
   StatementUsesMemory_StartVar(stmt,_,startAddr),
   Variable_Value(startAddr,_).
in file core.dl [259:1-259:128])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_325_mstoreToMemConsStmt_Bypassing_op_ctxt,rel_325_mstoreToMemConsStmt_Bypassing->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( !rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(33))}};
rel_325_mstoreToMemConsStmt_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_325_mstoreToMemConsStmt_Bypassing_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.Bypassing(stmt,"SYMBOLIC") :- 
   StatementUsesMemory_StartVar(stmt,_,startAddr),
   !Variable_Value(startAddr,_).
in file core.dl [260:1-260:132])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_325_mstoreToMemConsStmt_Bypassing_op_ctxt,rel_325_mstoreToMemConsStmt_Bypassing->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( !(!rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(34))}};
rel_325_mstoreToMemConsStmt_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_325_mstoreToMemConsStmt_Bypassing_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.BlockHasBypassingStmt(block,stmt,arg) :- 
   mstoreToMemConsStmt.Bypassing(stmt,arg),
   Statement_Block(stmt,block).
in file components.dl [140:2-142:33])_");
if(!(rel_325_mstoreToMemConsStmt_Bypassing->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_325_mstoreToMemConsStmt_Bypassing_op_ctxt,rel_325_mstoreToMemConsStmt_Bypassing->createContext());
CREATE_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt,rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_325_mstoreToMemConsStmt_Bypassing) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_325_mstoreToMemConsStmt_Bypassing->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   LocalBlockPath(block1,block2),
   mstoreToMemConsStmt.BlockHasBypassingStmt(block2,_,arg),
   LocalBlockPath(block2,block3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2).
in file components.dl [174:2-181:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->empty()) && !(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt,rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(env0[3])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt)).empty() && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   mstoreToMemConsStmt.BlockHasBypassingStmt(block1,stmt2,arg),
   LocalStatementPathInBlock(stmt1,stmt2).
in file components.dl [183:2-186:44])_");
if(!(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt,rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4])}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   mstoreToMemConsStmt.BlockHasBypassingStmt(block3,stmt2,arg),
   LocalStatementPathInBlock(stmt2,stmt3).
in file components.dl [188:2-191:44])_");
if(!(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt,rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4])}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   !mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg).
in file components.dl [193:2-195:86])_");
if(!(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env0[4])}};
rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_323_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePath->purge();
if (pruneImdtRels) rel_327_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtSameBlock(stmt1,stmt3,arg),
   mstoreToMemConsStmt.BlockHasFromStmt(block,stmt1,arg),
   mstoreToMemConsStmt.BlockHasBypassingStmt(block,stmt2,arg),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3.
in file components.dl [154:2-161:19])_");
if(!(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->empty()) && !(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_319_mstoreToMemConsStmt_BlockHasFromStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt,rel_319_mstoreToMemConsStmt_BlockHasFromStmt->createContext());
CREATE_OP_CONTEXT(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock_op_ctxt,rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt,rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock) {
auto range = rel_319_mstoreToMemConsStmt_BlockHasFromStmt->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_319_mstoreToMemConsStmt_BlockHasFromStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_319_mstoreToMemConsStmt_BlockHasFromStmt->purge();
if (pruneImdtRels) rel_326_mstoreToMemConsStmt_BlockHasBypassingStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtSameBlock(stmt1,stmt3,arg),
   !mstoreToMemConsStmt.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3,arg).
in file components.dl [163:2-165:59])_");
if(!(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock_op_ctxt,rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock) {
if( !(rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_324_mstoreToMemConsStmt_FromStmtToStmtSameBlock->purge();
if (pruneImdtRels) rel_329_mstoreToMemConsStmt_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreToMemConsStmt.ReachableBypassingAny(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3,arg).
in file components.dl [197:2-199:68])_");
if(!(rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt,rel_331_mstoreToMemConsStmt_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_331_mstoreToMemConsStmt_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mstoreToMemConsStmt.ReachableBypassingAny(stmt1,stmt3,arg) :- 
   mstoreToMemConsStmt.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3,arg).
in file components.dl [197:2-199:68])_");
if(!(rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt,rel_331_mstoreToMemConsStmt_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_331_mstoreToMemConsStmt_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_330_mstoreToMemConsStmt_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_328_mstoreToMemConsStmt_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(InitialMemWriteToMemConsStmtWithNonComputableLength(mstore,memConsStmt) :- 
   StatementUsesMemory_LengthVar(memConsStmt,kind,lenvar),
   StatementUsesMemoryOfNonComputableLength(memConsStmt,kind,lenvar),
   mstoreToMemConsStmt.ReachableBypassingAny(mstore,memConsStmt,_).
in file core.dl [265:1-268:69])_");
if(!(rel_320_StatementUsesMemoryOfNonComputableLength->empty()) && !(rel_331_mstoreToMemConsStmt_ReachableBypassingAny->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt,rel_320_StatementUsesMemoryOfNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt,rel_331_mstoreToMemConsStmt_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
if( rel_320_StatementUsesMemoryOfNonComputableLength->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt))) {
auto range = rel_331_mstoreToMemConsStmt_ReachableBypassingAny->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_331_mstoreToMemConsStmt_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->insert(tuple,READ_OP_CONTEXT(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_331_mstoreToMemConsStmt_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_subclause((diff+length),diff,length,memConsStmt,memWriteStmt,startVar,writeStartVar) :- 
   InitialMemWriteToMemConsStmtWithNonComputableLength(memWriteStmt,memConsStmt),
   StatementWritesMemoryOfLength(memWriteStmt,writeStartVar,length),
   MemoryAddressVarsNumDiff(writeStartVar,startVar,diff).
in file  [0:0-0:0])_");
if(!(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_333_agg_subclause_op_ctxt,rel_333_agg_subclause->createContext());
for(const auto& env0 : *rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength) {
auto range = rel_315_StatementWritesMemoryOfLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,7> tuple{{ramBitCast((ramBitCast<RamSigned>(env2[2]) + ramBitCast<RamSigned>(env1[2]))),ramBitCast(env2[2]),ramBitCast(env1[2]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_333_agg_subclause->insert(tuple,READ_OP_CONTEXT(rel_333_agg_subclause_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryOfNonComputableLength_LengthApprox(memConsStmt,startVar,(32+@generator_0)) :- 
   StatementUsesMemoryOfNonComputableLength(memConsStmt,kind,_),
   StatementUsesMemory_StartVar(memConsStmt,kind,startVar),
   @generator_0 = max approxCandidate : { __agg_subclause(approxCandidate,+underscore_703,+underscore_704,memConsStmt,+underscore_705,startVar,+underscore_706) }.
in file core.dl [310:1-319:30])_");
if(!(rel_320_StatementUsesMemoryOfNonComputableLength->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt,rel_320_StatementUsesMemoryOfNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_333_agg_subclause_op_ctxt,rel_333_agg_subclause->createContext());
CREATE_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt,rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->createContext());
for(const auto& env0 : *rel_320_StatementUsesMemoryOfNonComputableLength) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_333_agg_subclause->lowerUpperRange_0001010(Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_333_agg_subclause_op_ctxt));
for(const auto& env2 : range) {
if( true) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env2[0]));
}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env2[0]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[2]),ramBitCast((ramBitCast<RamSigned>(RamSigned(32)) + ramBitCast<RamSigned>(env2[0])))}};
rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->insert(tuple,READ_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memConsStmt\tstartVar\tapprox"},{"auxArity","0"},{"name","StatementUsesMemoryOfNonComputableLength_LengthApprox"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memConsStmt\", \"startVar\", \"approx\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_333_agg_subclause->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ValueIsNotAntiByteMask(val) :- 
   ByteMask_ZerosMinMax(val,low,high),
   ValueMasksOrKeepsByteAtIndex(val,1,i),
   i >= low,
   i < high.
in file casts_shifts.dl [35:1-39:13])_");
if(!(rel_35_ByteMask_ZerosMinMax->empty()) && !(rel_33_ValueMasksOrKeepsByteAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt,rel_33_ValueMasksOrKeepsByteAtIndex->createContext());
CREATE_OP_CONTEXT(rel_35_ByteMask_ZerosMinMax_op_ctxt,rel_35_ByteMask_ZerosMinMax->createContext());
CREATE_OP_CONTEXT(rel_36_ValueIsNotAntiByteMask_op_ctxt,rel_36_ValueIsNotAntiByteMask->createContext());
for(const auto& env0 : *rel_35_ByteMask_ZerosMinMax) {
auto range = rel_33_ValueMasksOrKeepsByteAtIndex->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(1)), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(1)), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_33_ValueMasksOrKeepsByteAtIndex_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_36_ValueIsNotAntiByteMask->insert(tuple,READ_OP_CONTEXT(rel_36_ValueIsNotAntiByteMask_op_ctxt));
break;
}
}
}
}
();}
if (pruneImdtRels) rel_33_ValueMasksOrKeepsByteAtIndex->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementReadsMemoryOfConstantLength(memConsStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   StatementWritesMemoryOfLength(_,indexVar,_),
   Variable_SymbolicValue(indexVar,indexVal),
   FreePointerBasedValue_AliasRep(indexVal,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_296_FreePointerBasedValue_AliasRep->empty()) && !(rel_311_StatementReadsMemoryOfConstantLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_311_StatementReadsMemoryOfConstantLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2])) && !rel_315_StatementWritesMemoryOfLength->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt)).empty()) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_296_FreePointerBasedValue_AliasRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementReadsMemoryOfConstantLength(memConsStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   StatementWritesMemoryOfLength(_,indexVar,_),
   Variable_Value(indexVar,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_311_StatementReadsMemoryOfConstantLength->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_311_StatementReadsMemoryOfConstantLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2])) && !rel_315_StatementWritesMemoryOfLength->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt)).empty()) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementUsesMemoryOfNonComputableLength_LengthApprox(memConsStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   StatementWritesMemoryOfLength(_,indexVar,_),
   Variable_SymbolicValue(indexVar,indexVal),
   FreePointerBasedValue_AliasRep(indexVal,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_296_FreePointerBasedValue_AliasRep->empty()) && !(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt,rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2])) && !rel_315_StatementWritesMemoryOfLength->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt)).empty()) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_296_FreePointerBasedValue_AliasRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementUsesMemoryOfNonComputableLength_LengthApprox(memConsStmt,startVar,length),
   MemoryAddressVarsNumDiff(indexVar,startVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   StatementWritesMemoryOfLength(_,indexVar,_),
   Variable_Value(indexVar,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty()) && !(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt,rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2])) && !rel_315_StatementWritesMemoryOfLength->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt)).empty()) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementReadsMemoryOfConstantLength(memConsStmt,indexVar,length),
   MemoryAddressVarsNumDiff(indexVar,indexVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_SymbolicValue(indexVar,indexVal),
   FreePointerBasedValue_AliasRep(indexVal,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_311_StatementReadsMemoryOfConstantLength->empty()) && !(rel_296_FreePointerBasedValue_AliasRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_311_StatementReadsMemoryOfConstantLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_296_FreePointerBasedValue_AliasRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementReadsMemoryOfConstantLength(memConsStmt,indexVar,length),
   MemoryAddressVarsNumDiff(indexVar,indexVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_Value(indexVar,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_311_StatementReadsMemoryOfConstantLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_311_StatementReadsMemoryOfConstantLength) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementUsesMemoryOfNonComputableLength_LengthApprox(memConsStmt,indexVar,length),
   MemoryAddressVarsNumDiff(indexVar,indexVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_SymbolicValue(indexVar,indexVal),
   FreePointerBasedValue_AliasRep(indexVal,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->empty()) && !(rel_296_FreePointerBasedValue_AliasRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt,rel_296_FreePointerBasedValue_AliasRep->createContext());
CREATE_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt,rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_296_FreePointerBasedValue_AliasRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_296_FreePointerBasedValue_AliasRep_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,valRep,(length-numDiff)) :- 
   StatementUsesMemoryOfNonComputableLength_LengthApprox(memConsStmt,indexVar,length),
   MemoryAddressVarsNumDiff(indexVar,indexVar,numDiff),
   0 <= numDiff,
   numDiff < length,
   Variable_Value(indexVar,valRep).
in file core.dl [297:1-305:37])_");
if(!(rel_253_MemoryAddressVarsNumDiff->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox_op_ctxt,rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
for(const auto& env0 : *rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[2]))) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(env1[2])))}};
rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->insert(tuple,READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_296_FreePointerBasedValue_AliasRep->purge();
if (pruneImdtRels) rel_334_StatementUsesMemoryOfNonComputableLength_LengthApprox->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.BlockHasToStmt(block,stmt,arg,len) :- 
   StatementReadsMemoryOfConstantLengthAtMemAlias(stmt,arg,len),
   Statement_Block(stmt,block).
in file components.dl [243:2-245:33])_");
if(!(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
for(const auto& env0 : *rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->insert(tuple,READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg) :- 
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block1,stmt1,arg,_),
   LocalBlockPath(block1,block3),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block3,stmt3,arg,_),
   block1 != block3,
   !Dominates(block3,block1).
in file components.dl [268:2-273:31])_");
if(!(rel_133_LocalBlockPath->empty()) && !(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->createContext());
for(const auto& env0 : *rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[1])) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1]),ramBitCast(env0[2])}};
rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->insert(tuple,READ_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block1,stmt1,arg,len1),
   LocalBlockPath(block1,block2),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block2,_,arg,len2),
   LocalBlockPath(block2,block3),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block3,stmt3,arg,len3),
   block2 != block1,
   block2 != block3,
   !Dominates(block3,block2),
   min(len3,len2) >= min(len3,len1).
in file components.dl [275:2-285:39])_");
if(!(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty()) && !(rel_133_LocalBlockPath->empty()) && !(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt,rel_133_LocalBlockPath->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_133_LocalBlockPath->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[3])) && (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && rel_133_LocalBlockPath->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_133_LocalBlockPath_op_ctxt)) && !(rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt)))) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env4 : range) {
if( (ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env4[3]), ramBitCast<RamSigned>(env3[3]), })) >= ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env4[3]), ramBitCast<RamSigned>(env1[3]), })))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block1,stmt1,arg,len1),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block1,stmt2,arg,len2),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block3,stmt3,arg,len3),
   LocalStatementPathInBlock(stmt1,stmt2),
   min(len3,len2) >= min(len3,len1).
in file components.dl [287:2-293:39])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty()) && !(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env2[3]), })) >= ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env1[3]), })))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block1,stmt1,arg,len1),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block3,stmt2,arg,len2),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block3,stmt3,arg,len3),
   LocalStatementPathInBlock(stmt2,stmt3),
   min(len3,len2) >= min(len3,len1).
in file components.dl [295:2-301:39])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty()) && !(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
for(const auto& env0 : *rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env2[3]), })) >= ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env1[3]), })))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->insert(tuple,READ_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt));
break;
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_133_LocalBlockPath->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePath(stmt1,block1,stmt3,block3,arg),
   !memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathInterrupted(stmt1,block1,stmt3,block3,arg).
in file components.dl [303:2-305:86])_");
if(!(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath_op_ctxt,rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->createContext());
CREATE_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt,rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->createContext());
CREATE_OP_CONTEXT(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
for(const auto& env0 : *rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath) {
if( !(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env0[4])}};
rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_337_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePath->purge();
if (pruneImdtRels) rel_338_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block,stmt1,arg,_),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block,stmt3,arg,_),
   LocalStatementPathInBlock(stmt1,stmt3),
   stmt1 != stmt3.
in file components.dl [247:2-251:19])_");
if(!(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock_op_ctxt,rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->createContext());
for(const auto& env0 : *rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[2])}};
rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->insert(tuple,READ_OP_CONTEXT(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock(stmt1,stmt3,arg),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block,stmt1,arg,len1),
   memWriteToMemConsStmtImpr.BlockHasBypassingStmt(block,stmt2,arg,len2),
   memWriteToMemConsStmtImpr.BlockHasToStmt(block,stmt3,arg,len3),
   LocalStatementPathInBlock(stmt1,stmt2),
   LocalStatementPathInBlock(stmt2,stmt3),
   stmt1 != stmt2,
   stmt2 != stmt3,
   min(len3,len2) >= min(len3,len1).
in file components.dl [253:2-262:39])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->empty()) && !(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->empty()) && !(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt,rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->createContext());
CREATE_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt,rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->createContext());
CREATE_OP_CONTEXT(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock_op_ctxt,rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted->createContext());
for(const auto& env0 : *rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(env0[1])) && (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env2[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env2[3]), })) >= ramBitCast<RamSigned>(std::min({ramBitCast<RamSigned>(env3[3]), ramBitCast<RamSigned>(env1[3]), })))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted->insert(tuple,READ_OP_CONTEXT(rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted_op_ctxt));
break;
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_317_memWriteToMemConsStmtImpr_BlockHasBypassingStmt->purge();
if (pruneImdtRels) rel_336_memWriteToMemConsStmtImpr_BlockHasToStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtSameBlock(stmt1,stmt3,arg),
   !memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockInterrupted(stmt1,stmt3,arg).
in file components.dl [264:2-266:59])_");
if(!(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock_op_ctxt,rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->createContext());
CREATE_OP_CONTEXT(rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted_op_ctxt,rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted->createContext());
CREATE_OP_CONTEXT(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->createContext());
for(const auto& env0 : *rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock) {
if( !(rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->insert(tuple,READ_OP_CONTEXT(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_340_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlock->purge();
if (pruneImdtRels) rel_341_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockInterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.ReachableBypassingAny(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3,arg).
in file components.dl [307:2-309:68])_");
if(!(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.ReachableBypassingAny(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3,arg).
in file components.dl [307:2-309:68])_");
if(!(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
for(const auto& env0 : *rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->insert(tuple,READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtWithConstantLength(memWriteStmt,memConsStmt,writeAddr) :- 
   StatementReadsMemoryOfConstantLength(memConsStmt,_,_),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,writeAddr).
in file core.dl [332:1-334:89])_");
if(!(rel_311_StatementReadsMemoryOfConstantLength->empty()) && !(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_311_StatementReadsMemoryOfConstantLength_op_ctxt,rel_311_StatementReadsMemoryOfConstantLength->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_344_MemWriteToMemConsStmtWithConstantLength_op_ctxt,rel_344_MemWriteToMemConsStmtWithConstantLength->createContext());
for(const auto& env0 : *rel_311_StatementReadsMemoryOfConstantLength) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_344_MemWriteToMemConsStmtWithConstantLength->insert(tuple,READ_OP_CONTEXT(rel_344_MemWriteToMemConsStmtWithConstantLength_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_311_StatementReadsMemoryOfConstantLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AntiByteMask(val,low,high) :- 
   ByteMask_ZerosMinMax(val,low,high),
   !ValueIsNotAntiByteMask(val).
in file casts_shifts.dl [41:1-43:32])_");
if(!(rel_35_ByteMask_ZerosMinMax->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_35_ByteMask_ZerosMinMax_op_ctxt,rel_35_ByteMask_ZerosMinMax->createContext());
CREATE_OP_CONTEXT(rel_36_ValueIsNotAntiByteMask_op_ctxt,rel_36_ValueIsNotAntiByteMask->createContext());
CREATE_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt,rel_37_AntiByteMask->createContext());
for(const auto& env0 : *rel_35_ByteMask_ZerosMinMax) {
if( !(rel_36_ValueIsNotAntiByteMask->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_36_ValueIsNotAntiByteMask_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_37_AntiByteMask->insert(tuple,READ_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_36_ValueIsNotAntiByteMask->purge();
if (pruneImdtRels) rel_35_ByteMask_ZerosMinMax->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtWithNonComputableLength(memWriteStmt,memConsStmt) :- 
   StatementUsesMemoryOfNonComputableLength(memConsStmt,_,_),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,_).
in file core.dl [336:1-338:81])_");
if(!(rel_320_StatementUsesMemoryOfNonComputableLength->empty()) && !(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt,rel_320_StatementUsesMemoryOfNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_345_MemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_345_MemWriteToMemConsStmtWithNonComputableLength->createContext());
for(const auto& env0 : *rel_320_StatementUsesMemoryOfNonComputableLength) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_345_MemWriteToMemConsStmtWithNonComputableLength->insert(tuple,READ_OP_CONTEXT(rel_345_MemWriteToMemConsStmtWithNonComputableLength_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtWithNonComputableLength(memWriteStmt,memConsStmt) :- 
   StatementUsesMemoryOfNonComputableLength(memConsStmt,_,_),
   StatementUsesMemory_StartVar(memConsStmt,_,startVar),
   InitialMemWriteToMemConsStmtWithNonComputableLength(memWriteStmt,memConsStmt),
   StatementWritesMemoryOfLength(memWriteStmt,writeStartVar,_),
   !MemoryAddressVarsNumDiff(writeStartVar,startVar,_).
in file core.dl [340:1-345:57])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->empty()) && !(rel_320_StatementUsesMemoryOfNonComputableLength->empty()) && !(rel_315_StatementWritesMemoryOfLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt,rel_315_StatementWritesMemoryOfLength->createContext());
CREATE_OP_CONTEXT(rel_320_StatementUsesMemoryOfNonComputableLength_op_ctxt,rel_320_StatementUsesMemoryOfNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_345_MemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_345_MemWriteToMemConsStmtWithNonComputableLength->createContext());
for(const auto& env0 : *rel_320_StatementUsesMemoryOfNonComputableLength) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_315_StatementWritesMemoryOfLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_315_StatementWritesMemoryOfLength_op_ctxt));
for(const auto& env3 : range) {
if( !(!rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_345_MemWriteToMemConsStmtWithNonComputableLength->insert(tuple,READ_OP_CONTEXT(rel_345_MemWriteToMemConsStmtWithNonComputableLength_op_ctxt));
break;
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_320_StatementUsesMemoryOfNonComputableLength->purge();
if (pruneImdtRels) rel_315_StatementWritesMemoryOfLength->purge();
if (pruneImdtRels) rel_332_InitialMemWriteToMemConsStmtWithNonComputableLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmt(mstore,memConsStmt) :- 
   MemWriteToMemConsStmtWithNonComputableLength(mstore,memConsStmt).
in file core.dl [250:1-252:67])_");
if(!(rel_345_MemWriteToMemConsStmtWithNonComputableLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_345_MemWriteToMemConsStmtWithNonComputableLength_op_ctxt,rel_345_MemWriteToMemConsStmtWithNonComputableLength->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
for(const auto& env0 : *rel_345_MemWriteToMemConsStmtWithNonComputableLength) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_346_MemWriteToMemConsStmt->insert(tuple,READ_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmt(mstore,memConsStmt) :- 
   MemWriteToMemConsStmtWithConstantLength(mstore,memConsStmt,_).
in file core.dl [250:1-252:67])_");
if(!(rel_344_MemWriteToMemConsStmtWithConstantLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_344_MemWriteToMemConsStmtWithConstantLength_op_ctxt,rel_344_MemWriteToMemConsStmtWithConstantLength->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
for(const auto& env0 : *rel_344_MemWriteToMemConsStmtWithConstantLength) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_346_MemWriteToMemConsStmt->insert(tuple,READ_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_345_MemWriteToMemConsStmtWithNonComputableLength->purge();
if (pruneImdtRels) rel_344_MemWriteToMemConsStmtWithConstantLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmt(memWriteStmt,memConsStmt),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,writeAddr),
   StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,writeAddr,writeLen),
   StatementUsesMemory_StartVar(memConsStmt,_,readStartVar),
   Variable_Value(writeStartVar,writeAddr),
   MemoryAddressVarsNumDiff(writeStartVar,readStartVar,relIndex).
in file core.dl [371:1-377:67])_");
if(!(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_346_MemWriteToMemConsStmt->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
for(const auto& env0 : *rel_346_MemWriteToMemConsStmt) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[2]),ramBitCast(env2[2])}};
rel_347_MemWriteToMemConsStmtInfoInit->insert(tuple,READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmt(memWriteStmt,memConsStmt),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,writeAddr),
   StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,writeAddr,writeLen),
   StatementUsesMemory_StartVar(memConsStmt,_,readStartVar),
   Variable_SymbolicValue(writeStartVar,writeAddr),
   MemoryAddressVarsNumDiff(writeStartVar,readStartVar,relIndex).
in file core.dl [371:1-377:67])_");
if(!(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_346_MemWriteToMemConsStmt->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
for(const auto& env0 : *rel_346_MemWriteToMemConsStmt) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[2]),ramBitCast(env2[2])}};
rel_347_MemWriteToMemConsStmtInfoInit->insert(tuple,READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmt(memWriteStmt,memConsStmt),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,writeAddr),
   StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,writeAddr,writeLen),
   MLOAD(memConsStmt,readStartVar,_),
   Variable_Value(writeStartVar,writeAddr),
   MemoryAddressVarsNumDiff(writeStartVar,readStartVar,relIndex).
in file core.dl [371:1-377:67])_");
if(!(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_10_MLOAD->empty()) && !(rel_346_MemWriteToMemConsStmt->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
for(const auto& env0 : *rel_346_MemWriteToMemConsStmt) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[2]),ramBitCast(env2[2])}};
rel_347_MemWriteToMemConsStmtInfoInit->insert(tuple,READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmt(memWriteStmt,memConsStmt),
   memWriteToMemConsStmtImpr.ReachableBypassingAny(memWriteStmt,memConsStmt,writeAddr),
   StatementWritesMemoryOfConstantLengthAtMemAlias(memWriteStmt,writeAddr,writeLen),
   MLOAD(memConsStmt,readStartVar,_),
   Variable_SymbolicValue(writeStartVar,writeAddr),
   MemoryAddressVarsNumDiff(writeStartVar,readStartVar,relIndex).
in file core.dl [371:1-377:67])_");
if(!(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->empty()) && !(rel_10_MLOAD->empty()) && !(rel_346_MemWriteToMemConsStmt->empty()) && !(rel_253_MemoryAddressVarsNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt,rel_253_MemoryAddressVarsNumDiff->createContext());
CREATE_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_346_MemWriteToMemConsStmt_op_ctxt,rel_346_MemWriteToMemConsStmt->createContext());
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
for(const auto& env0 : *rel_346_MemWriteToMemConsStmt) {
auto range = rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_253_MemoryAddressVarsNumDiff->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env4[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_253_MemoryAddressVarsNumDiff_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[2]),ramBitCast(env2[2])}};
rel_347_MemWriteToMemConsStmtInfoInit->insert(tuple,READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInfoInit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_347_MemWriteToMemConsStmtInfoInit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_253_MemoryAddressVarsNumDiff->purge();
if (pruneImdtRels) rel_346_MemWriteToMemConsStmt->purge();
if (pruneImdtRels) rel_316_StatementWritesMemoryOfConstantLengthAtMemAlias->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInvalid(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen),
   @generator_0 <= @generator_1,
   @generator_0 = min (otherRelIndex-relIndex) : { MemWriteToMemConsStmtInfoInit(otherMemWriteStmt1,memConsStmt,+underscore_521,otherRelIndex,+underscore_522),otherMemWriteStmt1 != memWriteStmt,(otherRelIndex-relIndex) = (otherRelIndex-relIndex),(otherRelIndex-relIndex) > 0,(otherRelIndex-relIndex) < writeLen },
   @generator_1 = max otherLength : { MemWriteToMemConsStmtInfoInit(otherMemWriteStmt2,memConsStmt,writeAddr,+underscore_523,otherLength),otherMemWriteStmt2 != memWriteStmt,otherLength < writeLen }.
in file core.dl [382:1-395:25])_");
if(!(rel_347_MemWriteToMemConsStmtInfoInit->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
CREATE_OP_CONTEXT(rel_348_MemWriteToMemConsStmtInvalid_op_ctxt,rel_348_MemWriteToMemConsStmtInvalid->createContext());
for(const auto& env0 : *rel_347_MemWriteToMemConsStmtInfoInit) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
RamSigned res0 = MAX_RAM_SIGNED;
auto range = rel_347_MemWriteToMemConsStmtInfoInit->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3])))) && (ramBitCast<RamDomain>(env1[0]) != ramBitCast<RamDomain>(env0[0])) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) > ramBitCast<RamSigned>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) < ramBitCast<RamSigned>(env0[4]))) {
shouldRunNested = true;
res0 = std::min(res0,ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))));
}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_347_MemWriteToMemConsStmtInfoInit->lowerUpperRange_01102(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[4]) != ramBitCast<RamDomain>(env0[4])) && (ramBitCast<RamDomain>(env2[0]) != ramBitCast<RamDomain>(env0[0]))) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env2[4]));
}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env2[0]) == ramBitCast<RamDomain>(env2[0])) && (ramBitCast<RamSigned>(env1[0]) <= ramBitCast<RamSigned>(env2[0]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_348_MemWriteToMemConsStmtInvalid->insert(tuple,READ_OP_CONTEXT(rel_348_MemWriteToMemConsStmtInvalid_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInvalid"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_348_MemWriteToMemConsStmtInvalid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen) :- 
   MemWriteToMemConsStmtInfoInit(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen),
   !MemWriteToMemConsStmtInvalid(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen).
in file core.dl [398:1-400:91])_");
if(!(rel_347_MemWriteToMemConsStmtInfoInit->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_347_MemWriteToMemConsStmtInfoInit_op_ctxt,rel_347_MemWriteToMemConsStmtInfoInit->createContext());
CREATE_OP_CONTEXT(rel_348_MemWriteToMemConsStmtInvalid_op_ctxt,rel_348_MemWriteToMemConsStmtInvalid->createContext());
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
for(const auto& env0 : *rel_347_MemWriteToMemConsStmtInfoInit) {
if( !(rel_348_MemWriteToMemConsStmtInvalid->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_348_MemWriteToMemConsStmtInvalid_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_349_MemWriteToMemConsStmtInfo->insert(tuple,READ_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\trelIndex\tlength"},{"auxArity","0"},{"name","MemWriteToMemConsStmtInfo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"relIndex\", \"length\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_349_MemWriteToMemConsStmtInfo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_347_MemWriteToMemConsStmtInfoInit->purge();
if (pruneImdtRels) rel_348_MemWriteToMemConsStmtInvalid->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtConflLowerLimit(memWriteStmt,memConsStmt,writeAddr,@generator_0) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,writeLen),
   @generator_0 = max otherLength : { MemWriteToMemConsStmtInfo(otherMemWriteStmt,memConsStmt,writeAddr,+underscore_513,otherLength),otherMemWriteStmt != memWriteStmt,otherLength < writeLen }.
in file core.dl [432:1-438:5])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt,rel_350_MemWriteToMemConsStmtConflLowerLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
RamSigned res0 = MIN_RAM_SIGNED;
auto range = rel_349_MemWriteToMemConsStmtInfo->lowerUpperRange_01102(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[0]) != ramBitCast<RamDomain>(env0[0])) && (ramBitCast<RamDomain>(env1[4]) != ramBitCast<RamDomain>(env0[4]))) {
shouldRunNested = true;
res0 = std::max(res0,ramBitCast<RamSigned>(env1[4]));
}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[0])}};
rel_350_MemWriteToMemConsStmtConflLowerLimit->insert(tuple,READ_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtLowerLimit(memWriteStmt,memConsStmt,writeAddr,0) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,_),
   !MemWriteToMemConsStmtConflLowerLimit(memWriteStmt,memConsStmt,writeAddr,_).
in file core.dl [440:1-442:82])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt,rel_350_MemWriteToMemConsStmtConflLowerLimit->createContext());
CREATE_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt,rel_351_MemWriteToMemConsStmtLowerLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
if( !(!rel_350_MemWriteToMemConsStmtConflLowerLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(RamSigned(0))}};
rel_351_MemWriteToMemConsStmtLowerLimit->insert(tuple,READ_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtLowerLimit(memWriteStmt,memConsStmt,writeAddr,lowLimit) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,_),
   MemWriteToMemConsStmtConflLowerLimit(memWriteStmt,memConsStmt,writeAddr,lowLimit).
in file core.dl [444:1-446:88])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty()) && !(rel_350_MemWriteToMemConsStmtConflLowerLimit->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt,rel_350_MemWriteToMemConsStmtConflLowerLimit->createContext());
CREATE_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt,rel_351_MemWriteToMemConsStmtLowerLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
auto range = rel_350_MemWriteToMemConsStmtConflLowerLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_350_MemWriteToMemConsStmtConflLowerLimit_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[3])}};
rel_351_MemWriteToMemConsStmtLowerLimit->insert(tuple,READ_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\tlowLimitByte"},{"auxArity","0"},{"name","MemWriteToMemConsStmtLowerLimit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"lowLimitByte\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_351_MemWriteToMemConsStmtLowerLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_350_MemWriteToMemConsStmtConflLowerLimit->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtConflUpperLimit(memWriteStmt,memConsStmt,writeAddr,readLen) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,writeLen),
   StatementReadsMemoryOfConstantLengthAtMemAlias(memConsStmt,writeAddr,readLen),
   readLen < writeLen.
in file core.dl [419:1-422:22])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty()) && !(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt,rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->createContext());
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt,rel_352_MemWriteToMemConsStmtConflUpperLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
auto range = rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->lowerUpperRange_112(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[4]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_352_MemWriteToMemConsStmtConflUpperLimit->insert(tuple,READ_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtConflUpperLimit(memWriteStmt,memConsStmt,writeAddr,@generator_0) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,relIndex,writeLen),
   @generator_0 = min (otherRelIndex-relIndex) : { MemWriteToMemConsStmtInfo(otherMemWriteStmt,memConsStmt,+underscore_515,otherRelIndex,+underscore_516),otherMemWriteStmt != memWriteStmt,(otherRelIndex-relIndex) = (otherRelIndex-relIndex),(otherRelIndex-relIndex) > 0,(otherRelIndex-relIndex) < writeLen }.
in file core.dl [407:1-414:5])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt,rel_352_MemWriteToMemConsStmtConflUpperLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
RamSigned res0 = MAX_RAM_SIGNED;
auto range = rel_349_MemWriteToMemConsStmtInfo->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) == ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3])))) && (ramBitCast<RamDomain>(env1[0]) != ramBitCast<RamDomain>(env0[0])) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) > ramBitCast<RamSigned>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))) < ramBitCast<RamSigned>(env0[4]))) {
shouldRunNested = true;
res0 = std::min(res0,ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) - ramBitCast<RamSigned>(env0[3]))));
}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[0])}};
rel_352_MemWriteToMemConsStmtConflUpperLimit->insert(tuple,READ_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_335_StatementReadsMemoryOfConstantLengthAtMemAlias->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtUpperLimit(memWriteStmt,memConsStmt,writeAddr,writeLen) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,writeLen),
   !MemWriteToMemConsStmtConflUpperLimit(memWriteStmt,memConsStmt,writeAddr,_).
in file core.dl [424:1-426:82])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt,rel_352_MemWriteToMemConsStmtConflUpperLimit->createContext());
CREATE_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt,rel_353_MemWriteToMemConsStmtUpperLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
if( !(!rel_352_MemWriteToMemConsStmtConflUpperLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[4])}};
rel_353_MemWriteToMemConsStmtUpperLimit->insert(tuple,READ_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MemWriteToMemConsStmtUpperLimit(memWriteStmt,memConsStmt,writeAddr,upByte) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,_,_),
   MemWriteToMemConsStmtConflUpperLimit(memWriteStmt,memConsStmt,writeAddr,upByte).
in file core.dl [428:1-430:86])_");
if(!(rel_349_MemWriteToMemConsStmtInfo->empty()) && !(rel_352_MemWriteToMemConsStmtConflUpperLimit->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt,rel_352_MemWriteToMemConsStmtConflUpperLimit->createContext());
CREATE_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt,rel_353_MemWriteToMemConsStmtUpperLimit->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
auto range = rel_352_MemWriteToMemConsStmtConflUpperLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_352_MemWriteToMemConsStmtConflUpperLimit_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[3])}};
rel_353_MemWriteToMemConsStmtUpperLimit->insert(tuple,READ_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\tmemAddr\tupLimitByte"},{"auxArity","0"},{"name","MemWriteToMemConsStmtUpperLimit"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"memAddr\", \"upLimitByte\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_353_MemWriteToMemConsStmtUpperLimit);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_352_MemWriteToMemConsStmtConflUpperLimit->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtPartOfPrev(memWriteStmt,memConsStmt,relativeIndex) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,relativeIndex,_),
   MemWriteToMemConsStmtLowerLimit(memWriteStmt,memConsStmt,writeAddr,lowB1),
   MemWriteToMemConsStmtUpperLimit(memWriteStmt,memConsStmt,writeAddr,highB1),
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,otherWriteAddr,otherRelativeIndex,_),
   MemWriteToMemConsStmtLowerLimit(memWriteStmt,memConsStmt,otherWriteAddr,lowB2),
   MemWriteToMemConsStmtUpperLimit(memWriteStmt,memConsStmt,otherWriteAddr,highB2),
   otherRelativeIndex < relativeIndex,
   ((otherRelativeIndex+lowB2)+highB2) = ((relativeIndex+lowB1)+highB1).
in file core.dl [450:1-458:72])_");
if(!(rel_351_MemWriteToMemConsStmtLowerLimit->empty()) && !(rel_349_MemWriteToMemConsStmtInfo->empty()) && !(rel_353_MemWriteToMemConsStmtUpperLimit->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt,rel_351_MemWriteToMemConsStmtLowerLimit->createContext());
CREATE_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt,rel_353_MemWriteToMemConsStmtUpperLimit->createContext());
CREATE_OP_CONTEXT(rel_354_MemWriteToMemConsStmtPartOfPrev_op_ctxt,rel_354_MemWriteToMemConsStmtPartOfPrev->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
auto range = rel_351_MemWriteToMemConsStmtLowerLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_353_MemWriteToMemConsStmtUpperLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_349_MemWriteToMemConsStmtInfo->lowerUpperRange_11020(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env3[3]) != ramBitCast<RamDomain>(env0[3]))) {
auto range = rel_351_MemWriteToMemConsStmtLowerLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_353_MemWriteToMemConsStmtUpperLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt));
for(const auto& env5 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env3[3]) + ramBitCast<RamSigned>(env4[3]))) + ramBitCast<RamSigned>(env5[3]))) == ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[3]) + ramBitCast<RamSigned>(env1[3]))) + ramBitCast<RamSigned>(env2[3]))))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[3])}};
rel_354_MemWriteToMemConsStmtPartOfPrev->insert(tuple,READ_OP_CONTEXT(rel_354_MemWriteToMemConsStmtPartOfPrev_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\trelativeIndex"},{"auxArity","0"},{"name","MemWriteToMemConsStmtPartOfPrev"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"relativeIndex\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_354_MemWriteToMemConsStmtPartOfPrev);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarPlusThirtyTwo(var,varPlus) :- 
   ADDFix(_,var,thirtyTwo,varPlus),
   BasicVariable_Value(thirtyTwo,"0x20").
in file helpers.dl [63:1-65:42])_");
if(!(rel_9_ADDFix->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
if( rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(36))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[3])}};
rel_38_VarPlusThirtyTwo->insert(tuple,READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemWriteToMemConsStmtResolved(memWriteStmt,memConsStmt,relativeIndex,lowB,highB) :- 
   MemWriteToMemConsStmtInfo(memWriteStmt,memConsStmt,writeAddr,relativeIndex,_),
   MemWriteToMemConsStmtLowerLimit(memWriteStmt,memConsStmt,writeAddr,lowB),
   MemWriteToMemConsStmtUpperLimit(memWriteStmt,memConsStmt,writeAddr,highB),
   !MemWriteToMemConsStmtPartOfPrev(memWriteStmt,memConsStmt,relativeIndex),
   lowB < highB.
in file core.dl [465:1-470:16])_");
if(!(rel_351_MemWriteToMemConsStmtLowerLimit->empty()) && !(rel_353_MemWriteToMemConsStmtUpperLimit->empty()) && !(rel_349_MemWriteToMemConsStmtInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_349_MemWriteToMemConsStmtInfo_op_ctxt,rel_349_MemWriteToMemConsStmtInfo->createContext());
CREATE_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt,rel_351_MemWriteToMemConsStmtLowerLimit->createContext());
CREATE_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt,rel_353_MemWriteToMemConsStmtUpperLimit->createContext());
CREATE_OP_CONTEXT(rel_354_MemWriteToMemConsStmtPartOfPrev_op_ctxt,rel_354_MemWriteToMemConsStmtPartOfPrev->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
for(const auto& env0 : *rel_349_MemWriteToMemConsStmtInfo) {
if( !(rel_354_MemWriteToMemConsStmtPartOfPrev->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_354_MemWriteToMemConsStmtPartOfPrev_op_ctxt)))) {
auto range = rel_351_MemWriteToMemConsStmtLowerLimit->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_351_MemWriteToMemConsStmtLowerLimit_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_353_MemWriteToMemConsStmtUpperLimit->lowerUpperRange_1112(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env1[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_353_MemWriteToMemConsStmtUpperLimit_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env1[3]) != ramBitCast<RamDomain>(env2[3]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[3]),ramBitCast(env1[3]),ramBitCast(env2[3])}};
rel_355_MemWriteToMemConsStmtResolved->insert(tuple,READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memWriteStmt\tmemConsStmt\trelativeIndex\tlowB\thighB"},{"auxArity","0"},{"name","MemWriteToMemConsStmtResolved"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"memWriteStmt\", \"memConsStmt\", \"relativeIndex\", \"lowB\", \"highB\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_355_MemWriteToMemConsStmtResolved);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_353_MemWriteToMemConsStmtUpperLimit->purge();
if (pruneImdtRels) rel_351_MemWriteToMemConsStmtLowerLimit->purge();
if (pruneImdtRels) rel_349_MemWriteToMemConsStmtInfo->purge();
if (pruneImdtRels) rel_354_MemWriteToMemConsStmtPartOfPrev->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayWriteTo(memWriteStmt,abiArr,memConsStmt,relativeIndex) :- 
   ABIEncodedArrayNoFunctionSelector(abiArr),
   ABIEncodedArrayReadByStmt(abiArr,memConsStmt),
   MemWriteToMemConsStmtResolved(memWriteStmt,memConsStmt,relativeIndex,_,_).
in file uses_defs_abstractions.dl [295:1-298:81])_");
if(!(rel_308_ABIEncodedArrayReadByStmt->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_307_ABIEncodedArrayNoFunctionSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt,rel_307_ABIEncodedArrayNoFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt,rel_308_ABIEncodedArrayReadByStmt->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
for(const auto& env0 : *rel_307_ABIEncodedArrayNoFunctionSelector) {
auto range = rel_308_ABIEncodedArrayReadByStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[2])}};
rel_356_ABIEncodedArrayWriteTo->insert(tuple,READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayWriteTo(memWriteStmt,abiArr,memConsStmt,(relativeIndex-4)) :- 
   ABIEncodedArrayWFunctionSelector(abiArr),
   ABIEncodedArrayReadByStmt(abiArr,memConsStmt),
   MemWriteToMemConsStmtResolved(memWriteStmt,memConsStmt,relativeIndex,_,_).
in file uses_defs_abstractions.dl [300:1-303:81])_");
if(!(rel_308_ABIEncodedArrayReadByStmt->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt,rel_308_ABIEncodedArrayReadByStmt->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
for(const auto& env0 : *rel_309_ABIEncodedArrayWFunctionSelector) {
auto range = rel_308_ABIEncodedArrayReadByStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast((ramBitCast<RamSigned>(env2[2]) - ramBitCast<RamSigned>(RamSigned(4))))}};
rel_356_ABIEncodedArrayWriteTo->insert(tuple,READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREToMemConsStmtWritesShiftedVar(mstore,memConsStmt,relativeIndex,realStoredVar) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,0,highLimit),
   MSTORE(mstore,_,storedVar),
   Statement_Defines(shiftStmt,storedVar,0),
   LShiftBytes(shiftStmt,realStoredVar, _tmp_2),
    _tmp_2 = (32-highLimit).
in file core.dl [485:1-489:57])_");
if(!(rel_40_MSTORE->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_204_LShiftBytes->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt,rel_204_LShiftBytes->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_357_MSTOREToMemConsStmtWritesShiftedVar_op_ctxt,rel_357_MSTOREToMemConsStmtWritesShiftedVar->createContext());
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_00010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_204_LShiftBytes->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(RamSigned(32)) - ramBitCast<RamSigned>(env0[4])))}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(RamSigned(32)) - ramBitCast<RamSigned>(env0[4])))}},READ_OP_CONTEXT(rel_204_LShiftBytes_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env3[1])}};
rel_357_MSTOREToMemConsStmtWritesShiftedVar->insert(tuple,READ_OP_CONTEXT(rel_357_MSTOREToMemConsStmtWritesShiftedVar_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmemConsStmt\trelativeIndex\tvar"},{"auxArity","0"},{"name","MSTOREToMemConsStmtWritesShiftedVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"memConsStmt\", \"relativeIndex\", \"var\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_357_MSTOREToMemConsStmtWritesShiftedVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_204_LShiftBytes->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,realStoredVar) :- 
   MSTOREToMemConsStmtWritesShiftedVar(mstore,memConsStmt,relativeIndex,realStoredVar).
in file core.dl [491:1-492:90])_");
if(!(rel_357_MSTOREToMemConsStmtWritesShiftedVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_357_MSTOREToMemConsStmtWritesShiftedVar_op_ctxt,rel_357_MSTOREToMemConsStmtWritesShiftedVar->createContext());
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
for(const auto& env0 : *rel_357_MSTOREToMemConsStmtWritesShiftedVar) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_358_MSTOREToMemConsStmt_WrittenVar->insert(tuple,READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,storedVar) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,_,_),
   PartialMSTORE(mstore,_,storedVar,_).
in file core.dl [494:1-496:42])_");
if(!(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_207_PartialMSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
for(const auto& env0 : *rel_355_MemWriteToMemConsStmtResolved) {
auto range = rel_207_PartialMSTORE->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_358_MSTOREToMemConsStmt_WrittenVar->insert(tuple,READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,storedVar) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,_,_),
   MSTORE(mstore,_,storedVar),
   !PartialMSTORE(mstore,_,_,_),
   !MSTOREToMemConsStmtWritesShiftedVar(mstore,memConsStmt,relativeIndex,_).
in file core.dl [498:1-502:79])_");
if(!(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt,rel_207_PartialMSTORE->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_357_MSTOREToMemConsStmtWritesShiftedVar_op_ctxt,rel_357_MSTOREToMemConsStmtWritesShiftedVar->createContext());
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
for(const auto& env0 : *rel_355_MemWriteToMemConsStmtResolved) {
if( !(!rel_357_MSTOREToMemConsStmtWritesShiftedVar->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_357_MSTOREToMemConsStmtWritesShiftedVar_op_ctxt)).empty()) && !(!rel_207_PartialMSTORE->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_207_PartialMSTORE_op_ctxt)).empty())) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_358_MSTOREToMemConsStmt_WrittenVar->insert(tuple,READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore\tmemConsStmt\trelativeIndex\tvar"},{"auxArity","0"},{"name","MSTOREToMemConsStmt_WrittenVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"mstore\", \"memConsStmt\", \"relativeIndex\", \"var\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Statement\", \"s:Statement\", \"i:number\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_358_MSTOREToMemConsStmt_WrittenVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_207_PartialMSTORE->purge();
if (pruneImdtRels) rel_357_MSTOREToMemConsStmtWritesShiftedVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryWriteAtRelativeIndex(memConsStmt,kind,memWriteStmt,relativeIndex) :- 
   StatementUsesMemoryReadsRawData(memConsStmt,kind),
   StatementUsesMemoryOfComputableLength(memConsStmt,_,_),
   MemWriteToMemConsStmtResolved(memWriteStmt,memConsStmt,relativeIndex,_,_).
in file uses_defs_abstractions.dl [93:1-96:81])_");
if(!(rel_310_StatementUsesMemoryOfComputableLength->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_71_StatementUsesMemoryReadsRawData->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt,rel_71_StatementUsesMemoryReadsRawData->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt,rel_359_StatementUsesMemoryWriteAtRelativeIndex->createContext());
for(const auto& env0 : *rel_71_StatementUsesMemoryReadsRawData) {
if( !rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt)).empty()) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[0]),ramBitCast(env1[2])}};
rel_359_StatementUsesMemoryWriteAtRelativeIndex->insert(tuple,READ_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryWritesAtRelativeIndexOrdered(stmt,kind,index1,index2) :- 
   StatementUsesMemoryWriteAtRelativeIndex(stmt,kind,_,index1),
   StatementUsesMemoryWriteAtRelativeIndex(stmt,kind,_,index2),
   index1 < index2.
in file uses_defs_abstractions.dl [99:1-102:19])_");
if(!(rel_359_StatementUsesMemoryWriteAtRelativeIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt,rel_359_StatementUsesMemoryWriteAtRelativeIndex->createContext());
CREATE_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt,rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->createContext());
for(const auto& env0 : *rel_359_StatementUsesMemoryWriteAtRelativeIndex) {
auto range = rel_359_StatementUsesMemoryWriteAtRelativeIndex->lowerUpperRange_1102(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[3]) != ramBitCast<RamDomain>(env1[3]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[3]),ramBitCast(env1[3])}};
rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->insert(tuple,READ_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryWritesAtRelativeIndexNotNext(stmt,kind,index1,index2) :- 
   StatementUsesMemoryWritesAtRelativeIndexOrdered(stmt,kind,index1,index2),
   StatementUsesMemoryWritesAtRelativeIndexOrdered(stmt,kind,index1,indexMid),
   StatementUsesMemoryWritesAtRelativeIndexOrdered(stmt,kind,indexMid,index2).
in file uses_defs_abstractions.dl [104:1-107:81])_");
if(!(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt,rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->createContext());
CREATE_OP_CONTEXT(rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext_op_ctxt,rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext->createContext());
for(const auto& env0 : *rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered) {
auto range = rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt));
for(const auto& env1 : range) {
if( rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[3]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext->insert(tuple,READ_OP_CONTEXT(rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryWritesAtRelativeIndexNext(stmt,kind,index1,index2) :- 
   StatementUsesMemoryWritesAtRelativeIndexOrdered(stmt,kind,index1,index2),
   !StatementUsesMemoryWritesAtRelativeIndexNotNext(stmt,kind,index1,index2).
in file uses_defs_abstractions.dl [109:1-111:80])_");
if(!(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered_op_ctxt,rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->createContext());
CREATE_OP_CONTEXT(rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext_op_ctxt,rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext->createContext());
CREATE_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt,rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->createContext());
for(const auto& env0 : *rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered) {
if( !(rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->insert(tuple,READ_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_360_StatementUsesMemoryWritesAtRelativeIndexOrdered->purge();
if (pruneImdtRels) rel_361_StatementUsesMemoryWritesAtRelativeIndexNotNext->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryWriteAtRelativeIndex_Order(stmt,kind,store,index,0) :- 
   StatementUsesMemoryWriteAtRelativeIndex(stmt,kind,store,index),
   !StatementUsesMemoryWritesAtRelativeIndexNext(stmt,kind,_,index).
in file uses_defs_abstractions.dl [113:1-115:71])_");
if(!(rel_359_StatementUsesMemoryWriteAtRelativeIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt,rel_359_StatementUsesMemoryWriteAtRelativeIndex->createContext());
CREATE_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt,rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->createContext());
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
for(const auto& env0 : *rel_359_StatementUsesMemoryWriteAtRelativeIndex) {
if( !(!rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt)).empty())) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}};
rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->insert(tuple,READ_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt));
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
for(const auto& env0 : *rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order->insert(tuple,READ_OP_CONTEXT(rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(StatementUsesMemoryWriteAtRelativeIndex_Order(stmt,kind,store,index,(i+1)) :- 
   StatementUsesMemoryWriteAtRelativeIndex_Order(stmt,kind,_,prevIndex,i),
   StatementUsesMemoryWritesAtRelativeIndexNext(stmt,kind,prevIndex,index),
   StatementUsesMemoryWriteAtRelativeIndex(stmt,kind,store,index).
in file uses_defs_abstractions.dl [117:1-120:69])_");
if(!(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->empty()) && !(rel_359_StatementUsesMemoryWriteAtRelativeIndex->empty()) && !(rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt,rel_359_StatementUsesMemoryWriteAtRelativeIndex->createContext());
CREATE_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt,rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->createContext());
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
for(const auto& env0 : *rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order) {
auto range = rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_362_StatementUsesMemoryWritesAtRelativeIndexNext_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_359_StatementUsesMemoryWriteAtRelativeIndex->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env1[3]),ramBitCast((ramBitCast<RamSigned>(env0[4]) + ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env1[3]),ramBitCast((ramBitCast<RamSigned>(env0[4]) + ramBitCast<RamSigned>(RamSigned(1))))}};
rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->insert(tuple,READ_OP_CONTEXT(rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt));
}
}
}
}
}
();}
if(rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
for(const auto& env0 : *rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->insert(tuple,READ_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt));
}
}
();std::swap(rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order, rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order);
rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->purge();
iter++;
}
iter = 0;
rel_364_delta_StatementUsesMemoryWriteAtRelativeIndex_Order->purge();
rel_365_new_StatementUsesMemoryWriteAtRelativeIndex_Order->purge();
if (pruneImdtRels) rel_362_StatementUsesMemoryWritesAtRelativeIndexNext->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgumentNew(memConsStmt,kind,i,$VariableArgument(actual)) :- 
   StatementUsesMemoryWriteAtRelativeIndex_Order(memConsStmt,kind,mstore,relativeIndex,i),
   MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,actual).
in file uses_defs_abstractions.dl [126:1-129:78])_");
if(!(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->empty()) && !(rel_358_MSTOREToMemConsStmt_WrittenVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt,rel_366_StatementUsesMemoryMemoryArgumentNew->createContext());
for(const auto& env0 : *rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order) {
auto range = rel_358_MSTOREToMemConsStmt_WrittenVar->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(RamSigned(4))),ramBitCast(ramBitCast(env1[3]))}}
))}};
rel_366_StatementUsesMemoryMemoryArgumentNew->insert(tuple,READ_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgumentNew(memConsStmt,kind,0,$ReturndataArgument(call, retDataIndex, retDataLen)) :- 
   StatementUsesMemory_LengthVar(memConsStmt,kind,memReadLen),
   RETURNDATASIZEOfCALL(_,memReadLen,call),
   MemWriteToMemConsStmtResolved(retDataCopy,memConsStmt,0,_,_),
   RETURNDATACOPYOfCALL(retDataCopy,_,retDataIndex,retDataLen,call),
   RETURNDATASIZEOfCALL(_,retDataLen,call).
in file uses_defs_abstractions.dl [540:1-547:45])_");
if(!(rel_164_RETURNDATACOPYOfCALL->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt,rel_164_RETURNDATACOPYOfCALL->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt,rel_366_StatementUsesMemoryMemoryArgumentNew->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_164_RETURNDATACOPYOfCALL->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt));
for(const auto& env3 : range) {
if( !rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(RamSigned(3))),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(env1[2])),ramBitCast(ramBitCast(env3[2])),ramBitCast(ramBitCast(env3[3]))}}
)))}}
))}};
rel_366_StatementUsesMemoryMemoryArgumentNew->insert(tuple,READ_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgumentNew(memConsStmt,kind,0,$CalldataArgument(callDataIndex, callDataLen)) :- 
   StatementUsesMemory_LengthVar(memConsStmt,kind,memReadLen),
   CALLDATASIZE(_,memReadLen),
   MemWriteToMemConsStmtResolved(callDataCopy,memConsStmt,0,_,_),
   CALLDATACOPY(callDataCopy,_,callDataIndex,callDataLen),
   CALLDATASIZE(_,callDataLen).
in file uses_defs_abstractions.dl [549:1-555:32])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_6_CALLDATASIZE->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt,rel_6_CALLDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt,rel_366_StatementUsesMemoryMemoryArgumentNew->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
if( !rel_6_CALLDATASIZE->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt)).empty()) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env2 : range) {
if( !rel_6_CALLDATASIZE->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(RamSigned(0))),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[2])),ramBitCast(ramBitCast(env2[3]))}}
)))}}
))}};
rel_366_StatementUsesMemoryMemoryArgumentNew->insert(tuple,READ_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLPRIVATE(stmt,f) :- 
   Statement_Opcode(stmt,"CALLPRIVATE"),
   Statement_Uses(stmt,f,0).
in file tac_instructions.dl [371:1-373:31])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_39_CALLPRIVATE_op_ctxt,rel_39_CALLPRIVATE->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(21))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(21))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_39_CALLPRIVATE->insert(tuple,READ_OP_CONTEXT(rel_39_CALLPRIVATE_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CDArg($CalldataArgument(from, to)) :- 
   StatementUsesMemoryMemoryArgumentNew(_,_,_,$CalldataArgument(from, to)).
in file uses_defs_abstractions.dl [583:1-586:24])_");
if(!(rel_366_StatementUsesMemoryMemoryArgumentNew->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_366_StatementUsesMemoryMemoryArgumentNew_op_ctxt,rel_366_StatementUsesMemoryMemoryArgumentNew->createContext());
CREATE_OP_CONTEXT(rel_367_CDArg_op_ctxt,rel_367_CDArg->createContext());
for(const auto& env0 : *rel_366_StatementUsesMemoryMemoryArgumentNew) {
RamDomain const ref = env0[3];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,2);
{
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(RamSigned(0)))) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
Tuple<RamDomain,1> tuple{{ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(RamSigned(0))),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)))}}
))}};
rel_367_CDArg->insert(tuple,READ_OP_CONTEXT(rel_367_CDArg_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","CDArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"+:MemoryArgumentNew\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_367_CDArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_366_StatementUsesMemoryMemoryArgumentNew->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgument(memConsStmt,kind,i,["VAR",actual,nil]) :- 
   StatementUsesMemoryWriteAtRelativeIndex_Order(memConsStmt,kind,mstore,relativeIndex,i),
   MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,actual).
in file uses_defs_abstractions.dl [126:1-129:78])_");
if(!(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->empty()) && !(rel_358_MSTOREToMemConsStmt_WrittenVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt,rel_368_StatementUsesMemoryMemoryArgument->createContext());
for(const auto& env0 : *rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order) {
auto range = rel_358_MSTOREToMemConsStmt_WrittenVar->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(RamSigned(37))),ramBitCast(ramBitCast(env1[3])),ramBitCast(ramBitCast(RamSigned(0)))}}
))}};
rel_368_StatementUsesMemoryMemoryArgument->insert(tuple,READ_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgument(memConsStmt,kind,0,["RETURNDATA",call,[retDataIndex,retDataLen]]) :- 
   StatementUsesMemory_LengthVar(memConsStmt,kind,memReadLen),
   RETURNDATASIZEOfCALL(_,memReadLen,call),
   MemWriteToMemConsStmtResolved(retDataCopy,memConsStmt,0,_,_),
   RETURNDATACOPYOfCALL(retDataCopy,_,retDataIndex,retDataLen,call),
   RETURNDATASIZEOfCALL(_,retDataLen,call).
in file uses_defs_abstractions.dl [540:1-547:45])_");
if(!(rel_164_RETURNDATACOPYOfCALL->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt,rel_164_RETURNDATACOPYOfCALL->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt,rel_368_StatementUsesMemoryMemoryArgument->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_164_RETURNDATACOPYOfCALL->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_164_RETURNDATACOPYOfCALL_op_ctxt));
for(const auto& env3 : range) {
if( !rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(RamSigned(38))),ramBitCast(ramBitCast(env1[2])),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env3[2])),ramBitCast(ramBitCast(env3[3]))}}
)))}}
))}};
rel_368_StatementUsesMemoryMemoryArgument->insert(tuple,READ_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryMemoryArgument(memConsStmt,kind,0,["CALLDATA","None",[callDataIndex,callDataLen]]) :- 
   StatementUsesMemory_LengthVar(memConsStmt,kind,memReadLen),
   CALLDATASIZE(_,memReadLen),
   MemWriteToMemConsStmtResolved(callDataCopy,memConsStmt,0,_,_),
   CALLDATACOPY(callDataCopy,_,callDataIndex,callDataLen),
   CALLDATASIZE(_,callDataLen).
in file uses_defs_abstractions.dl [549:1-555:32])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty()) && !(rel_6_CALLDATASIZE->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt,rel_6_CALLDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt,rel_368_StatementUsesMemoryMemoryArgument->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
if( !rel_6_CALLDATASIZE->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt)).empty()) {
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_01100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env2 : range) {
if( !rel_6_CALLDATASIZE->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(RamSigned(39))),ramBitCast(ramBitCast(RamSigned(40))),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[2])),ramBitCast(ramBitCast(env2[3]))}}
)))}}
))}};
rel_368_StatementUsesMemoryMemoryArgument->insert(tuple,READ_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt));
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_6_CALLDATASIZE->purge();
if (pruneImdtRels) rel_164_RETURNDATACOPYOfCALL->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemoryStatement_ActualArgNew(memConsStmt,[cat("'",cat(type,"'")),cat("'",cat(info,"'")),nil],index) :- 
   StatementUsesMemoryMemoryArgument(memConsStmt,_,index,[type,info,nil]).
in file uses_defs_abstractions.dl [132:1-133:79])_");
if(!(rel_368_StatementUsesMemoryMemoryArgument->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt,rel_368_StatementUsesMemoryMemoryArgument->createContext());
CREATE_OP_CONTEXT(rel_369_MemoryStatement_ActualArgNew_op_ctxt,rel_369_MemoryStatement_ActualArgNew->createContext());
for(const auto& env0 : *rel_368_StatementUsesMemoryMemoryArgument) {
RamDomain const ref = env0[3];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,3);
{
if( (ramBitCast<RamDomain>(env1[2]) == ramBitCast<RamDomain>(RamSigned(0)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env1[0]) + symTable.decode(RamSigned(41))))))),ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(41))))))),ramBitCast(ramBitCast(RamSigned(0)))}}
)),ramBitCast(env0[2])}};
rel_369_MemoryStatement_ActualArgNew->insert(tuple,READ_OP_CONTEXT(rel_369_MemoryStatement_ActualArgNew_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryStatement_ActualArgNew(memConsStmt,[cat("'",cat(type,"'")),cat("'",cat(info,"'")),[cat("'",cat(indexv,"'")),cat("'",cat(length,"'"))]],index) :- 
   StatementUsesMemoryMemoryArgument(memConsStmt,_,index,[type,info,[indexv,length]]).
in file uses_defs_abstractions.dl [135:1-136:92])_");
if(!(rel_368_StatementUsesMemoryMemoryArgument->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_368_StatementUsesMemoryMemoryArgument_op_ctxt,rel_368_StatementUsesMemoryMemoryArgument->createContext());
CREATE_OP_CONTEXT(rel_369_MemoryStatement_ActualArgNew_op_ctxt,rel_369_MemoryStatement_ActualArgNew->createContext());
for(const auto& env0 : *rel_368_StatementUsesMemoryMemoryArgument) {
RamDomain const ref = env0[3];
if (ref == 0) continue;
const RamDomain *env1 = recordTable.unpack(ref,3);
{
RamDomain const ref = env1[2];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,3>{{ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env1[0]) + symTable.decode(RamSigned(41))))))),ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(41))))))),ramBitCast(ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env2[0]) + symTable.decode(RamSigned(41))))))),ramBitCast(ramBitCast(symTable.encode(symTable.decode(RamSigned(41)) + symTable.decode(symTable.encode(symTable.decode(env2[1]) + symTable.decode(RamSigned(41)))))))}}
)))}}
)),ramBitCast(env0[2])}};
rel_369_MemoryStatement_ActualArgNew->insert(tuple,READ_OP_CONTEXT(rel_369_MemoryStatement_ActualArgNew_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tactual\tindex"},{"auxArity","0"},{"name","MemoryStatement_ActualArgNew"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"actual\", \"index\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"r:MemoryArgument\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_369_MemoryStatement_ActualArgNew);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_368_StatementUsesMemoryMemoryArgument->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenValue(mstore,memConsStmt,relativeIndex,storedVar,storedVal) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,0,highLimit),
   MSTORE(mstore,_,storedVar),
   Variable_Value(storedVar,storedVal),
   highLimit = 32.
in file core.dl [507:1-511:61])_");
if(!(rel_40_MSTORE->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_00011(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(32))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2]),ramBitCast(env2[1])}};
rel_370_MSTOREToMemConsStmt_WrittenValue->insert(tuple,READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenValue(mstore,memConsStmt,relativeIndex,storedVar,storedVal) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,0,highLimit),
   MSTORE(mstore,_,storedVar),
   Variable_Value(storedVar,storedVal),
   ((strlen(storedVal)-2)/2) <= highLimit.
in file core.dl [507:1-511:61])_");
if(!(rel_40_MSTORE->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_00010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamSigned>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(static_cast<RamSigned>(symTable.decode(env2[1]).size())) - ramBitCast<RamSigned>(RamSigned(2)))) / ramBitCast<RamSigned>(RamSigned(2)))) <= ramBitCast<RamSigned>(env0[4]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2]),ramBitCast(env2[1])}};
rel_370_MSTOREToMemConsStmt_WrittenValue->insert(tuple,READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(MSTOREToMemConsStmt_WrittenValue(mstore,memConsStmt,relativeIndex,storedVar,substr(storedVal,0,(2+(2*highLimit)))) :- 
   MemWriteToMemConsStmtResolved(mstore,memConsStmt,relativeIndex,0,highLimit),
   MSTORE(mstore,_,storedVar),
   Variable_Value(storedVar,storedVal),
   ((strlen(storedVal)-2)/2) > highLimit.
in file core.dl [513:1-518:57])_");
if(!(rel_40_MSTORE->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_355_MemWriteToMemConsStmtResolved->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt,rel_355_MemWriteToMemConsStmtResolved->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
auto range = rel_355_MemWriteToMemConsStmtResolved->lowerUpperRange_00010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_355_MemWriteToMemConsStmtResolved_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamSigned>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(static_cast<RamSigned>(symTable.decode(env2[1]).size())) - ramBitCast<RamSigned>(RamSigned(2)))) / ramBitCast<RamSigned>(RamSigned(2)))) > ramBitCast<RamSigned>(env0[4]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[2]),ramBitCast(symTable.encode(substr_wrapper(symTable.decode(env2[1]),(RamSigned(0)),((ramBitCast<RamSigned>(RamSigned(2)) + ramBitCast<RamSigned>((ramBitCast<RamSigned>(RamSigned(2)) * ramBitCast<RamSigned>(env0[4]))))))))}};
rel_370_MSTOREToMemConsStmt_WrittenValue->insert(tuple,READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_355_MemWriteToMemConsStmtResolved->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADReadsReturnOfCALL(mload,call,diff) :- 
   CALLReturnsFixedSizeData(call,retLen),
   CALLReturnDataStartVar(call,startVar),
   Variable_SymbolicValue(startVar,startVal),
   FreePointerBasedValuesNumDiff(loadVal,startVal,diff),
   Variable_SymbolicValue(indexVar,loadVal),
   MLOAD(mload,indexVar,_),
   retLen > diff,
   diff >= 0,
   memWriteToMemConsStmtImpr.ReachableBypassingAny(call,mload,_).
in file uses_defs_abstractions.dl [561:1-570:67])_");
if(!(rel_10_MLOAD->empty()) && !(rel_286_CALLReturnsFixedSizeData->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->empty()) && !(rel_56_CALLReturnDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt,rel_286_CALLReturnsFixedSizeData->createContext());
CREATE_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt,rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->createContext());
CREATE_OP_CONTEXT(rel_371_MLOADReadsReturnOfCALL_op_ctxt,rel_371_MLOADReadsReturnOfCALL->createContext());
for(const auto& env0 : *rel_286_CALLReturnsFixedSizeData) {
auto range = rel_56_CALLReturnDataStartVar->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_012(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env3[2]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env5 : range) {
if( !rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(env3[2])}};
rel_371_MLOADReadsReturnOfCALL->insert(tuple,READ_OP_CONTEXT(rel_371_MLOADReadsReturnOfCALL_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_56_CALLReturnDataStartVar->purge();
if (pruneImdtRels) rel_343_memWriteToMemConsStmtImpr_ReachableBypassingAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single18(@generator_0) :- 
   @generator_0 = count : { MLOADReadsReturnOfCALL(+underscore_904,+underscore_905,+underscore_906) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_371_MLOADReadsReturnOfCALL_op_ctxt,rel_371_MLOADReadsReturnOfCALL->createContext());
CREATE_OP_CONTEXT(rel_372_agg_single18_op_ctxt,rel_372_agg_single18->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_371_MLOADReadsReturnOfCALL->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_372_agg_single18->insert(tuple,READ_OP_CONTEXT(rel_372_agg_single18_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtSameBlockUninterrupted(stmt1,stmt3,arg).
in file components.dl [311:2-318:6])_");
if(!(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted_op_ctxt,rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict_op_ctxt,rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->createContext());
for(const auto& env0 : *rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->insert(tuple,READ_OP_CONTEXT(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict(stmt1,stmt3,arg) :- 
   memWriteToMemConsStmtImpr.FromStmtToStmtDiffBlockHavePathUninterrupted(stmt1,stmt3,arg),
   Statement_Block(stmt1,block1),
   Statement_Block(stmt3,block3),
   Dominates(block1,block3).
in file components.dl [311:2-318:6])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted_op_ctxt,rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->createContext());
CREATE_OP_CONTEXT(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict_op_ctxt,rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->createContext());
for(const auto& env0 : *rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->insert(tuple,READ_OP_CONTEXT(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict_op_ctxt));
break;
}
}
}
}
}
();}
if (pruneImdtRels) rel_342_memWriteToMemConsStmtImpr_FromStmtToStmtSameBlockUninterrupted->purge();
if (pruneImdtRels) rel_339_memWriteToMemConsStmtImpr_FromStmtToStmtDiffBlockHavePathUninterrupted->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CallDataLoadReadsLength(cdl,cdl2,plusFourVar,lenVar,argHex) :- 
   CALLDATALOAD(cdl,argIdVar,toVar),
   Variable_Value(argIdVar,argHex),
   ADDFix(_,toVar,fourVar,plusFourVar),
   Variable_NumericValue(fourVar,4),
   CALLDATALOAD(cdl2,plusFourVar,lenVar).
in file arrays.dl [60:1-66:43])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_92_CALLDATALOAD->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
for(const auto& env0 : *rel_92_CALLDATALOAD) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
auto range = rel_92_CALLDATALOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast(env2[3]),ramBitCast(env3[2]),ramBitCast(env1[1])}};
rel_374_CallDataLoadReadsLength->insert(tuple,READ_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArgArrayLenWrittenTo(lenVar,arrayVar) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,_),
   MSTORE(_,arrayVar,lenVar).
in file arrays.dl [107:1-109:31])_");
if(!(rel_374_CallDataLoadReadsLength->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_375_ArgArrayLenWrittenTo->insert(tuple,READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(InitialStoreToPossibleStruct(mstore,structBaseVar,storedVar,(memOffset/32)) :- 
   PossibleStructAllocation(mload,freePtrUpdStore,structBaseVar,wordWidth),
   FreePointerBasedValue(storeIndexVal,mload,_,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(memIndex,storeIndexVal),
   MSTORE(mstore,memIndex,storedVar),
   Statement_Block(mload,<inlined_block1_0>),
   Statement_Block(mstore,<inlined_block2_0>),
   Dominates(<inlined_block1_0>,<inlined_block2_0>),
   Statement_Block(mstore,<inlined_block1_4>),
   Statement_Block(freePtrUpdStore,<inlined_block2_4>),
   Dominates(<inlined_block1_4>,<inlined_block2_4>).
in file structs.dl [53:1-61:47])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_256_PossibleStructAllocation->empty()) && !(rel_40_MSTORE->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_125_Dominates->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[3]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env5 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env5[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env7 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env6[1]),ramBitCast(env7[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env3[0]),ramBitCast(env0[2]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_376_InitialStoreToPossibleStruct->insert(tuple,READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
break;
}
}
}
break;
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InitialStoreToPossibleStruct(mstore,structBaseVar,storedVar,(memOffset/32)) :- 
   PossibleStructAllocation(mload,freePtrUpdStore,structBaseVar,wordWidth),
   FreePointerBasedValue(storeIndexVal,mload,_,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(memIndex,storeIndexVal),
   MSTORE(mstore,memIndex,storedVar),
   Statement_Block(mload,<inlined_block1_0>),
   Statement_Block(mstore,<inlined_block2_0>),
   Dominates(<inlined_block1_0>,<inlined_block2_0>),
   Statement_Block(mstore,_),
   Statement_Block(freePtrUpdStore,_),
   LocalStatementPathInBlock(mstore,freePtrUpdStore).
in file structs.dl [53:1-61:47])_");
if(!(rel_125_Dominates->empty()) && !(rel_256_PossibleStructAllocation->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[3]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env3[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env5 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env5[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env3[0]),ramBitCast(env0[2]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_376_InitialStoreToPossibleStruct->insert(tuple,READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InitialStoreToPossibleStruct(mstore,structBaseVar,storedVar,(memOffset/32)) :- 
   PossibleStructAllocation(mload,freePtrUpdStore,structBaseVar,wordWidth),
   FreePointerBasedValue(storeIndexVal,mload,_,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(memIndex,storeIndexVal),
   MSTORE(mstore,memIndex,storedVar),
   Statement_Block(mload,_),
   Statement_Block(mstore,_),
   LocalStatementPathInBlock(mload,mstore),
   Statement_Block(mstore,<inlined_block1_6>),
   Statement_Block(freePtrUpdStore,<inlined_block2_6>),
   Dominates(<inlined_block1_6>,<inlined_block2_6>).
in file structs.dl [53:1-61:47])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_256_PossibleStructAllocation->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[3]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env5 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env4[1]),ramBitCast(env5[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env3[0]),ramBitCast(env0[2]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_376_InitialStoreToPossibleStruct->insert(tuple,READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InitialStoreToPossibleStruct(mstore,structBaseVar,storedVar,(memOffset/32)) :- 
   PossibleStructAllocation(mload,freePtrUpdStore,structBaseVar,wordWidth),
   FreePointerBasedValue(storeIndexVal,mload,_,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(memIndex,storeIndexVal),
   MSTORE(mstore,memIndex,storedVar),
   Statement_Block(mload,_),
   Statement_Block(mstore,_),
   LocalStatementPathInBlock(mload,mstore),
   Statement_Block(mstore,_),
   Statement_Block(freePtrUpdStore,_),
   LocalStatementPathInBlock(mstore,freePtrUpdStore).
in file structs.dl [53:1-61:47])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_256_PossibleStructAllocation->empty()) && !(rel_40_MSTORE->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_232_FreePointerBasedValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty() && !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env1[3]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[3]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty() && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env3[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env3[0]),ramBitCast(env0[2]),ramBitCast(env3[2]),ramBitCast((ramBitCast<RamSigned>(env1[3]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_376_InitialStoreToPossibleStruct->insert(tuple,READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTORE(stmt,index,var) :- 
   Statement_Opcode(stmt,"MSTORE"),
   Statement_Uses(stmt,index,0),
   Statement_Uses(stmt,var,1).
in file tac_instructions.dl [145:1-148:32])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(42))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(42))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_40_MSTORE->insert(tuple,READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiffNoMemReuse(val1,val2,numDiff) :- 
   FreePointerBasedValuesNumDiff(val1,val2,numDiff),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2).
in file memory_addresses.dl [312:1-316:52])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
for(const auto& env0 : *rel_238_FreePointerBasedValuesNumDiff) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env2 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_377_FreePointerBasedValuesNumDiffNoMemReuse->insert(tuple,READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FreePointerBasedValuesNumDiffNoMemReuse(val1,val2,numDiff) :- 
   FreePointerBasedValuesNumDiff(val1,val2,numDiff),
   FreePointerBasedValue(val1,mload,_,_),
   FreePointerBasedValue(val2,mload,_,_).
in file memory_addresses.dl [319:1-322:44])_");
if(!(rel_232_FreePointerBasedValue->empty()) && !(rel_238_FreePointerBasedValuesNumDiff->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
for(const auto& env0 : *rel_238_FreePointerBasedValuesNumDiff) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env1 : range) {
if( !rel_232_FreePointerBasedValue->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_377_FreePointerBasedValuesNumDiffNoMemReuse->insert(tuple,READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(IsCallDataArrayVar(plusFourVar,argHex) :- 
   CALLDATALOAD(_,argIdVar,toVar),
   Variable_Value(argIdVar,argHex),
   ADDFix(_,toVar,fourVar,plusFourVar),
   Variable_NumericValue(fourVar,4),
   CALLDATALOAD(_,plusFourVar,_).
in file arrays.dl [60:1-66:43])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_9_ADDFix->empty()) && !(rel_92_CALLDATALOAD->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
for(const auto& env0 : *rel_92_CALLDATALOAD) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
if( !rel_92_CALLDATALOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt)).empty() && rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[3]),ramBitCast(env1[1])}};
rel_378_IsCallDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarPlusThrirtyOneAndNotThirtyOne(var,result) :- 
   Variable_Value(notThrirtyOne,"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"),
   Variable_Value(temp2,"0x1f"),
   ADDFix(_,var,temp2,varPlus),
   AND(_,notThrirtyOne,varPlus,result).
in file helpers.dl [81:1-85:84])_");
if(!(rel_9_ADDFix->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(29))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(29))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(43))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(43))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_85_AND->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env3[3])}};
rel_379_VarPlusThrirtyOneAndNotThirtyOne->insert(tuple,READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPlusThrirtyOneAndNotThirtyOne(var,result) :- 
   Variable_Value(notThrirtyOne,"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"),
   Variable_Value(temp2,"0x1f"),
   ADDFix(_,var,temp2,varPlus),
   AND(_,varPlus,notThrirtyOne,result).
in file helpers.dl [81:1-85:84])_");
if(!(rel_9_ADDFix->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(29))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(29))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(43))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(43))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_85_AND->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env3[3])}};
rel_379_VarPlusThrirtyOneAndNotThirtyOne->insert(tuple,READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_85_AND->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarDivByConstant(var,constVal,result) :- 
   DIV(_,var,constVar,result),
   Variable_Value(constVar,constVal).
in file helpers.dl [106:1-108:38])_");
if(!(rel_95_DIV->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_95_DIV_op_ctxt,rel_95_DIV->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt,rel_380_VarDivByConstant->createContext());
for(const auto& env0 : *rel_95_DIV) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[3])}};
rel_380_VarDivByConstant->insert(tuple,READ_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarDivByConstant(var,"0x1",var) :- 
   Statement_Defines(_,var,_).
in file helpers.dl [110:1-111:32])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt,rel_380_VarDivByConstant->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(24)),ramBitCast(env0[1])}};
rel_380_VarDivByConstant->insert(tuple,READ_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_95_DIV->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarTimesConstant(var,constVal,result) :- 
   MUL(_,var,constVar,result),
   Variable_Value(constVar,constVal).
in file helpers.dl [99:1-101:38])_");
if(!(rel_83_MUL->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_83_MUL_op_ctxt,rel_83_MUL->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
for(const auto& env0 : *rel_83_MUL) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[3])}};
rel_381_VarTimesConstant->insert(tuple,READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarTimesConstant(var,constVal,result) :- 
   MUL(_,constVar,var,result),
   Variable_Value(constVar,constVal).
in file helpers.dl [99:1-101:38])_");
if(!(rel_83_MUL->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_83_MUL_op_ctxt,rel_83_MUL->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
for(const auto& env0 : *rel_83_MUL) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(env0[3])}};
rel_381_VarTimesConstant->insert(tuple,READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarTimesConstant(var,"0x1",var) :- 
   Statement_Defines(_,var,_).
in file helpers.dl [103:1-104:32])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(24)),ramBitCast(env0[1])}};
rel_381_VarTimesConstant->insert(tuple,READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_83_MUL->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarPlusThrirtyOneDivMulSixtyFour(var,result) :- 
   ADDFix(_,var,temp,varPlus),
   Variable_Value(temp,"0x1f"),
   VarDivByConstant(varPlus,"0x20",varDiv),
   VarTimesConstant(varDiv,"0x20",result).
in file helpers.dl [93:1-97:44])_");
if(!(rel_211_Variable_Value->empty()) && !(rel_380_VarDivByConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_381_VarTimesConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt,rel_380_VarDivByConstant->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
if( rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(43))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) {
auto range = rel_380_VarDivByConstant->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(RamSigned(36)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(RamSigned(36)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_380_VarDivByConstant_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(RamSigned(36)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(RamSigned(36)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env2[2])}};
rel_382_VarPlusThrirtyOneDivMulSixtyFour->insert(tuple,READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_380_VarDivByConstant->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CallDataCopyArgInfo(callDataCopy,arrayVar,argHex) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,argHex),
   CALLDATACOPY(callDataCopy,arrayDataStart,_,lenVar),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [89:1-95:46])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_374_CallDataLoadReadsLength->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt,rel_383_CallDataCopyArgInfo->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env2 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env2[1]),ramBitCast(env0[4])}};
rel_383_CallDataCopyArgInfo->insert(tuple,READ_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(CallDataCopyArgInfo(callDataCopy,arrayVar,argHex) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,argHex),
   VarTimesConstant(lenVar,_,lenBytes),
   CALLDATACOPY(callDataCopy,arrayDataStart,_,lenBytes),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [98:1-105:46])_");
if(!(rel_381_VarTimesConstant->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_94_CALLDATACOPY->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_374_CallDataLoadReadsLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt,rel_383_CallDataCopyArgInfo->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env3 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[0]),ramBitCast(env3[1]),ramBitCast(env0[4])}};
rel_383_CallDataCopyArgInfo->insert(tuple,READ_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single0(@generator_0) :- 
   @generator_0 = count : { CALLReturnsFixedSizeData(+underscore_889,+underscore_890) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_286_CALLReturnsFixedSizeData_op_ctxt,rel_286_CALLReturnsFixedSizeData->createContext());
CREATE_OP_CONTEXT(rel_384_agg_single0_op_ctxt,rel_384_agg_single0->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_286_CALLReturnsFixedSizeData->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_384_agg_single0->insert(tuple,READ_OP_CONTEXT(rel_384_agg_single0_op_ctxt));
}
}
();if (pruneImdtRels) rel_286_CALLReturnsFixedSizeData->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLReturnsNoData(call) :- 
   CALLReturnDataLengthVal(call,0),
   !AfterCALLCheckRetDataSize(call).
in file uses_defs_abstractions.dl [465:1-467:36])_");
if(!(rel_283_CALLReturnDataLengthVal->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt,rel_139_AfterCALLCheckRetDataSize->createContext());
CREATE_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt,rel_283_CALLReturnDataLengthVal->createContext());
CREATE_OP_CONTEXT(rel_385_CALLReturnsNoData_op_ctxt,rel_385_CALLReturnsNoData->createContext());
auto range = rel_283_CALLReturnDataLengthVal->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_283_CALLReturnDataLengthVal_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_139_AfterCALLCheckRetDataSize->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_139_AfterCALLCheckRetDataSize_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_385_CALLReturnsNoData->insert(tuple,READ_OP_CONTEXT(rel_385_CALLReturnsNoData_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_283_CALLReturnDataLengthVal->purge();
if (pruneImdtRels) rel_139_AfterCALLCheckRetDataSize->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single1(@generator_0) :- 
   @generator_0 = count : { CALLReturnsNoData(+underscore_891) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_385_CALLReturnsNoData_op_ctxt,rel_385_CALLReturnsNoData->createContext());
CREATE_OP_CONTEXT(rel_386_agg_single1_op_ctxt,rel_386_agg_single1->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_385_CALLReturnsNoData->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_386_agg_single1->insert(tuple,READ_OP_CONTEXT(rel_386_agg_single1_op_ctxt));
}
}
();if (pruneImdtRels) rel_385_CALLReturnsNoData->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREFreePtr(mstore) :- 
   MSTORE(mstore,addrVar,_),
   BasicVariable_Value(addrVar,"0x40").
in file memory_addresses.dl [21:1-23:40])_");
if(!(rel_40_MSTORE->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(RamSigned(22))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_41_MSTOREFreePtr->insert(tuple,READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AllCALLsClassified(((z0+z1)+z2)) :- 
   ((z0+z1)+z2) = z,
   __agg_single(z),
   __agg_single0(z0),
   __agg_single1(z1),
   __agg_single2(z2).
in file uses_defs_abstractions.dl [480:1-485:19])_");
if(!(rel_384_agg_single0->empty()) && !(rel_386_agg_single1->empty()) && !(rel_58_agg_single->empty()) && !(rel_299_agg_single2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_58_agg_single_op_ctxt,rel_58_agg_single->createContext());
CREATE_OP_CONTEXT(rel_299_agg_single2_op_ctxt,rel_299_agg_single2->createContext());
CREATE_OP_CONTEXT(rel_384_agg_single0_op_ctxt,rel_384_agg_single0->createContext());
CREATE_OP_CONTEXT(rel_386_agg_single1_op_ctxt,rel_386_agg_single1->createContext());
CREATE_OP_CONTEXT(rel_387_AllCALLsClassified_op_ctxt,rel_387_AllCALLsClassified->createContext());
for(const auto& env0 : *rel_58_agg_single) {
for(const auto& env1 : *rel_384_agg_single0) {
for(const auto& env2 : *rel_386_agg_single1) {
for(const auto& env3 : *rel_299_agg_single2) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[0]) + ramBitCast<RamSigned>(env2[0]))) + ramBitCast<RamSigned>(env3[0]))) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env1[0]) + ramBitCast<RamSigned>(env2[0]))) + ramBitCast<RamSigned>(env3[0])))}};
rel_387_AllCALLsClassified->insert(tuple,READ_OP_CONTEXT(rel_387_AllCALLsClassified_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","all"},{"auxArity","0"},{"name","AllCALLsClassified"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"all\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_387_AllCALLsClassified);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_299_agg_single2->purge();
if (pruneImdtRels) rel_386_agg_single1->purge();
if (pruneImdtRels) rel_384_agg_single0->purge();
if (pruneImdtRels) rel_58_agg_single->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATACOPY_AllCalldata(callDataCopy) :- 
   CALLDATACOPY(callDataCopy,_,startVar,lenVar),
   Variable_NumericValue(startVar,0),
   Statement_Defines(datasize,lenVar,0),
   Statement_Opcode(datasize,"CALLDATASIZE").
in file uses_defs_abstractions.dl [207:1-211:46])_");
if(!(rel_223_Variable_NumericValue->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_94_CALLDATACOPY->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_388_CALLDATACOPY_AllCalldata_op_ctxt,rel_388_CALLDATACOPY_AllCalldata->createContext());
for(const auto& env0 : *rel_94_CALLDATACOPY) {
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(44))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_388_CALLDATACOPY_AllCalldata->insert(tuple,READ_OP_CONTEXT(rel_388_CALLDATACOPY_AllCalldata_op_ctxt));
break;
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATALOADOfConstant(cdl,constHex,constNum) :- 
   CALLDATALOAD(cdl,index,_),
   Variable_Value(index,constHex),
   Variable_NumericValue(index,constNum).
in file helpers.dl [115:1-118:42])_");
if(!(rel_211_Variable_Value->empty()) && !(rel_223_Variable_NumericValue->empty()) && !(rel_92_CALLDATALOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_389_CALLDATALOADOfConstant_op_ctxt,rel_389_CALLDATALOADOfConstant->createContext());
for(const auto& env0 : *rel_92_CALLDATALOAD) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_389_CALLDATALOADOfConstant->insert(tuple,READ_OP_CONTEXT(rel_389_CALLDATALOADOfConstant_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PublicFunctionArg(pubFun,arg,((constNum-4)/32)) :- 
   CALLDATALOADOfConstant(cdl,_,constNum),
   CALLDATALOAD(cdl,_,arg),
   Statement_Function(cdl,pubFun),
   !CallDataLoadReadsLength(cdl,_,_,_,_),
   ((constNum-4)%32) = 0.
in file uses_defs_abstractions.dl [30:1-35:27])_");
if(!(rel_92_CALLDATALOAD->empty()) && !(rel_116_Statement_Function->empty()) && !(rel_389_CALLDATALOADOfConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_389_CALLDATALOADOfConstant_op_ctxt,rel_389_CALLDATALOADOfConstant->createContext());
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
for(const auto& env0 : *rel_389_CALLDATALOADOfConstant) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(4)))) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && !(!rel_374_CallDataLoadReadsLength->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt)).empty())) {
auto range = rel_92_CALLDATALOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_116_Statement_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[1]),ramBitCast(env1[2]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(4)))) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_390_PublicFunctionArg->insert(tuple,READ_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PublicFunctionArg(pubFun,arg,constNum) :- 
   CALLDATALOADOfConstant(cdl,_,constNum),
   CALLDATALOAD(cdl,_,arg),
   Statement_Function(cdl,pubFun),
   !CallDataLoadReadsLength(cdl,_,_,_,_),
   ((constNum-4)%32) != 0.
in file uses_defs_abstractions.dl [37:1-42:28])_");
if(!(rel_92_CALLDATALOAD->empty()) && !(rel_116_Statement_Function->empty()) && !(rel_389_CALLDATALOADOfConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_389_CALLDATALOADOfConstant_op_ctxt,rel_389_CALLDATALOADOfConstant->createContext());
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
for(const auto& env0 : *rel_389_CALLDATALOADOfConstant) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(4)))) % ramBitCast<RamSigned>(RamSigned(32)))) != ramBitCast<RamDomain>(RamSigned(0))) && !(!rel_374_CallDataLoadReadsLength->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt)).empty())) {
auto range = rel_92_CALLDATALOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_116_Statement_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[1]),ramBitCast(env1[2]),ramBitCast(env0[2])}};
rel_390_PublicFunctionArg->insert(tuple,READ_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PublicFunctionArg(pubFun,arrayArg,((@hex_to_number(constHex)-4)/32)) :- 
   IsCallDataArrayVar(arrayArg,constHex),
   Variable_Function(arrayArg,pubFun),
   ((@hex_to_number(constHex)-4)%32) = 0.
in file uses_defs_abstractions.dl [44:1-47:43])_");
if(!(rel_378_IsCallDataArrayVar->empty()) && !(rel_118_Variable_Function->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
for(const auto& env0 : *rel_378_IsCallDataArrayVar) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env0[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(4)))) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_118_Variable_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast((ramBitCast<RamSigned>((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env0[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(4)))) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_390_PublicFunctionArg->insert(tuple,READ_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(PublicFunctionArg(pubFun,arrayArg,@hex_to_number(constHex)) :- 
   IsCallDataArrayVar(arrayArg,constHex),
   Variable_Function(arrayArg,pubFun),
   ((@hex_to_number(constHex)-4)%32) != 0.
in file uses_defs_abstractions.dl [49:1-52:44])_");
if(!(rel_378_IsCallDataArrayVar->empty()) && !(rel_118_Variable_Function->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_118_Variable_Function_op_ctxt,rel_118_Variable_Function->createContext());
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
for(const auto& env0 : *rel_378_IsCallDataArrayVar) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env0[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(4)))) % ramBitCast<RamSigned>(RamSigned(32)))) != ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_118_Variable_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_118_Variable_Function_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(functors::hex_to_number(symTable.decode(env0[1]).c_str()))}};
rel_390_PublicFunctionArg->insert(tuple,READ_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","pubFun\targ\tindex"},{"auxArity","0"},{"name","PublicFunctionArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"pubFun\", \"arg\", \"index\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_390_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_118_Variable_Function->purge();
if (pruneImdtRels) rel_389_CALLDATALOADOfConstant->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_PublicFunctionArg(arg) :- 
   PublicFunctionArg(_,arg,_).
in file metrics.dl [63:1-64:32])_");
if(!(rel_390_PublicFunctionArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
CREATE_OP_CONTEXT(rel_391_Analytics_PublicFunctionArg_op_ctxt,rel_391_Analytics_PublicFunctionArg->createContext());
for(const auto& env0 : *rel_390_PublicFunctionArg) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_391_Analytics_PublicFunctionArg->insert(tuple,READ_OP_CONTEXT(rel_391_Analytics_PublicFunctionArg_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","Analytics_PublicFunctionArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_391_Analytics_PublicFunctionArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_PublicFunctionArrayArg(arrayArg) :- 
   PublicFunctionArg(_,arrayArg,_),
   IsCallDataArrayVar(arrayArg,_).
in file metrics.dl [66:1-68:35])_");
if(!(rel_390_PublicFunctionArg->empty()) && !(rel_378_IsCallDataArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_390_PublicFunctionArg_op_ctxt,rel_390_PublicFunctionArg->createContext());
CREATE_OP_CONTEXT(rel_392_Analytics_PublicFunctionArrayArg_op_ctxt,rel_392_Analytics_PublicFunctionArrayArg->createContext());
for(const auto& env0 : *rel_390_PublicFunctionArg) {
if( !rel_378_IsCallDataArrayVar->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_392_Analytics_PublicFunctionArrayArg->insert(tuple,READ_OP_CONTEXT(rel_392_Analytics_PublicFunctionArrayArg_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arg"},{"auxArity","0"},{"name","Analytics_PublicFunctionArrayArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"arg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_392_Analytics_PublicFunctionArrayArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_390_PublicFunctionArg->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATALOADOfStaticAddr(stmt) :- 
   CALLDATALOAD(stmt,index,_),
   Variable_Value(index,_).
in file metrics.dl [235:1-237:28])_");
if(!(rel_92_CALLDATALOAD->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_393_CALLDATALOADOfStaticAddr_op_ctxt,rel_393_CALLDATALOADOfStaticAddr->createContext());
for(const auto& env0 : *rel_92_CALLDATALOAD) {
if( !rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_393_CALLDATALOADOfStaticAddr->insert(tuple,READ_OP_CONTEXT(rel_393_CALLDATALOADOfStaticAddr_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single15(@generator_0) :- 
   @generator_0 = count : { CALLDATALOADOfStaticAddr(+underscore_899) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_393_CALLDATALOADOfStaticAddr_op_ctxt,rel_393_CALLDATALOADOfStaticAddr->createContext());
CREATE_OP_CONTEXT(rel_394_agg_single15_op_ctxt,rel_394_agg_single15->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_393_CALLDATALOADOfStaticAddr->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_394_agg_single15->insert(tuple,READ_OP_CONTEXT(rel_394_agg_single15_op_ctxt));
}
}
();if (pruneImdtRels) rel_393_CALLDATALOADOfStaticAddr->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLToPrecompiledFunction(call,num) :- 
   CALL(call,_,target,_,_,_,_,_,_),
   Variable_NumericValue(target,num),
   num > 0,
   num < 9.
in file misc.dl [108:1-112:11])_");
if(!(rel_53_CALL->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_395_CALLToPrecompiledFunction_op_ctxt,rel_395_CALLToPrecompiledFunction->createContext());
for(const auto& env0 : *rel_53_CALL) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_12(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast(RamSigned(9))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(RamSigned(9))) && (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(RamSigned(0)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_395_CALLToPrecompiledFunction->insert(tuple,READ_OP_CONTEXT(rel_395_CALLToPrecompiledFunction_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_53_CALL->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StoreFreeMemPtrToMemZero(mstore) :- 
   MLOADFreePtr_To(_,to),
   MSTORE(mstore,index,to),
   Variable_Value(index,"0x0").
in file misc.dl [168:1-171:32])_");
if(!(rel_40_MSTORE->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_29_MLOADFreePtr_To->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_396_StoreFreeMemPtrToMemZero_op_ctxt,rel_396_StoreFreeMemPtrToMemZero->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
if( rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[0])}};
rel_396_StoreFreeMemPtrToMemZero->insert(tuple,READ_OP_CONTEXT(rel_396_StoreFreeMemPtrToMemZero_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.To(stmt) :- 
   MSTOREFreePtr(stmt).
in file memory_addresses.dl [61:1-62:58])_");
if(!(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_42_mstoreFreePtrOrder_To_op_ctxt,rel_42_mstoreFreePtrOrder_To->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_42_mstoreFreePtrOrder_To->insert(tuple,READ_OP_CONTEXT(rel_42_mstoreFreePtrOrder_To_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mstoreFreePtrOrder.To(stmt) :- 
   MLOADFreePtr(stmt).
in file memory_addresses.dl [61:1-62:58])_");
if(!(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_42_mstoreFreePtrOrder_To_op_ctxt,rel_42_mstoreFreePtrOrder_To->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_42_mstoreFreePtrOrder_To->insert(tuple,READ_OP_CONTEXT(rel_42_mstoreFreePtrOrder_To_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(EcrecoverCompilerBug(call) :- 
   StoreFreeMemPtrToMemZero(mstore),
   LocalStatementPathInBlock(mstore,call),
   CALLToPrecompiledFunction(call,1).
in file misc.dl [173:1-176:38])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_395_CALLToPrecompiledFunction->empty()) && !(rel_396_StoreFreeMemPtrToMemZero->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_395_CALLToPrecompiledFunction_op_ctxt,rel_395_CALLToPrecompiledFunction->createContext());
CREATE_OP_CONTEXT(rel_396_StoreFreeMemPtrToMemZero_op_ctxt,rel_396_StoreFreeMemPtrToMemZero->createContext());
CREATE_OP_CONTEXT(rel_397_EcrecoverCompilerBug_op_ctxt,rel_397_EcrecoverCompilerBug->createContext());
for(const auto& env0 : *rel_396_StoreFreeMemPtrToMemZero) {
auto range = rel_147_LocalStatementPathInBlock->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt));
for(const auto& env1 : range) {
if( rel_395_CALLToPrecompiledFunction->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_395_CALLToPrecompiledFunction_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_397_EcrecoverCompilerBug->insert(tuple,READ_OP_CONTEXT(rel_397_EcrecoverCompilerBug_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","insn"},{"auxArity","0"},{"name","EcrecoverCompilerBug"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"insn\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_397_EcrecoverCompilerBug);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_395_CALLToPrecompiledFunction->purge();
if (pruneImdtRels) rel_396_StoreFreeMemPtrToMemZero->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(BinArith("EQ").
in file tac_instructions.dl [55:207-55:223])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(13))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("ADD").
in file tac_instructions.dl [56:210-56:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(6))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("OR").
in file tac_instructions.dl [57:207-57:223])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(10))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SUB").
in file tac_instructions.dl [58:210-58:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(7))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("AND").
in file tac_instructions.dl [59:210-59:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(9))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("DIV").
in file tac_instructions.dl [60:210-60:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(1))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("MUL").
in file tac_instructions.dl [61:210-61:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(8))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SDIV").
in file tac_instructions.dl [62:213-62:231])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(4))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("MOD").
in file tac_instructions.dl [63:210-63:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(3))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SMOD").
in file tac_instructions.dl [64:213-64:231])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(2))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("EXP").
in file tac_instructions.dl [65:210-65:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(15))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SIGNEXTEND").
in file tac_instructions.dl [66:231-66:255])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(45))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("LT").
in file tac_instructions.dl [67:207-67:223])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(14))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("GT").
in file tac_instructions.dl [68:207-68:223])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(12))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SLT").
in file tac_instructions.dl [69:210-69:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(17))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SGT").
in file tac_instructions.dl [70:210-70:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(16))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("XOR").
in file tac_instructions.dl [71:210-71:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(11))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("BYTE").
in file tac_instructions.dl [72:213-72:231])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(46))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SHL").
in file tac_instructions.dl [73:210-73:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(18))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SHR").
in file tac_instructions.dl [74:210-74:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(19))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();signalHandler->setMsg(R"_(BinArith("SAR").
in file tac_instructions.dl [75:210-75:227])_");
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(20))}};
rel_398_BinArith->insert(tuple,READ_OP_CONTEXT(rel_398_BinArith_op_ctxt));
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(TernArith("ADDMOD").
in file tac_instructions.dl [47:1-47:21])_");
[&](){
CREATE_OP_CONTEXT(rel_399_TernArith_op_ctxt,rel_399_TernArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(47))}};
rel_399_TernArith->insert(tuple,READ_OP_CONTEXT(rel_399_TernArith_op_ctxt));
}
();signalHandler->setMsg(R"_(TernArith("MULMOD").
in file tac_instructions.dl [48:1-48:21])_");
[&](){
CREATE_OP_CONTEXT(rel_399_TernArith_op_ctxt,rel_399_TernArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(48))}};
rel_399_TernArith->insert(tuple,READ_OP_CONTEXT(rel_399_TernArith_op_ctxt));
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(UnaryArith("ISZERO").
in file tac_instructions.dl [86:175-86:197])_");
[&](){
CREATE_OP_CONTEXT(rel_400_UnaryArith_op_ctxt,rel_400_UnaryArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(49))}};
rel_400_UnaryArith->insert(tuple,READ_OP_CONTEXT(rel_400_UnaryArith_op_ctxt));
}
();signalHandler->setMsg(R"_(UnaryArith("NOT").
in file tac_instructions.dl [87:166-87:185])_");
[&](){
CREATE_OP_CONTEXT(rel_400_UnaryArith_op_ctxt,rel_400_UnaryArith->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(50))}};
rel_400_UnaryArith->insert(tuple,READ_OP_CONTEXT(rel_400_UnaryArith_op_ctxt));
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(FlowOp(op) :- 
   BinArith(op).
in file tac_instructions.dl [295:1-295:28])_");
if(!(rel_398_BinArith->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_398_BinArith_op_ctxt,rel_398_BinArith->createContext());
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
for(const auto& env0 : *rel_398_BinArith) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_401_FlowOp->insert(tuple,READ_OP_CONTEXT(rel_401_FlowOp_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowOp(op) :- 
   UnaryArith(op).
in file tac_instructions.dl [296:1-296:30])_");
if(!(rel_400_UnaryArith->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_400_UnaryArith_op_ctxt,rel_400_UnaryArith->createContext());
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
for(const auto& env0 : *rel_400_UnaryArith) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_401_FlowOp->insert(tuple,READ_OP_CONTEXT(rel_401_FlowOp_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowOp(op) :- 
   TernArith(op).
in file tac_instructions.dl [297:1-297:29])_");
if(!(rel_399_TernArith->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_399_TernArith_op_ctxt,rel_399_TernArith->createContext());
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
for(const auto& env0 : *rel_399_TernArith) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_401_FlowOp->insert(tuple,READ_OP_CONTEXT(rel_401_FlowOp_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowOp("PHI").
in file tac_instructions.dl [298:1-298:15])_");
[&](){
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(23))}};
rel_401_FlowOp->insert(tuple,READ_OP_CONTEXT(rel_401_FlowOp_op_ctxt));
}
();if (pruneImdtRels) rel_400_UnaryArith->purge();
if (pruneImdtRels) rel_398_BinArith->purge();
if (pruneImdtRels) rel_399_TernArith->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(standardflowanalysis.Flows(x,x) :- 
   isVariable(x).
in file flows.dl [15:4-15:37])_");
if(!(rel_112_isVariable->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_112_isVariable) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_402_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt,rel_403_delta_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_402_standardflowanalysis_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_403_delta_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_405_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_405_standardflowanalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_406_delta_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_406_delta_standardflowanalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_405_standardflowanalysis_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_406_delta_standardflowanalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_406_delta_standardflowanalysis_FunctionFlowSummary_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(standardflowanalysis.Flows(x,y) :- 
   standardflowanalysis.Flows(_,x),
   Statement_Uses(stmt,x,_),
   Statement_Defines(stmt,y,_),
   Statement_Opcode(stmt,op),
   FlowOp(op),
   Statement_Block(stmt,block),
   IsBlock(block).
in file flows.dl [23:4-30:30])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_401_FlowOp->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_140_IsBlock->empty()) && !(rel_403_delta_standardflowanalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt,rel_403_delta_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_403_delta_standardflowanalysis_Flows) {
auto range = rel_7_Statement_Uses->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_402_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt)))) {
auto range = rel_2_Statement_Opcode->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env3 : range) {
if( rel_401_FlowOp->contains(Tuple<RamDomain,1>{{ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_401_FlowOp_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env4 : range) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_404_new_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt));
break;
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(standardflowanalysis.Flows(actual,actualReturn) :- 
   standardflowanalysis.FunctionFlowSummary(fn,formal,m),
   FunctionCallReturn(block,fn,_),
   FormalArgs(fn,formal,n),
   ActualArgs(block,actual,n),
   ActualReturnArgs(block,actualReturn,m),
   IsBlock(block).
in file flows.dl [33:4-39:31])_");
if(!(rel_193_FunctionCallReturn->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_140_IsBlock->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_406_delta_standardflowanalysis_FunctionFlowSummary->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_406_delta_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_406_delta_standardflowanalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_406_delta_standardflowanalysis_FunctionFlowSummary) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
auto range = rel_111_FormalArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_100_ActualArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_402_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env4[1])}};
rel_404_new_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(standardflowanalysis.Flows(variable,actualReturn) :- 
   standardflowanalysis.FunctionFlowSummary(fn,variable,m),
   FunctionCallReturn(block,fn,_),
   !FormalArgs(fn,variable,_),
   ActualReturnArgs(block,actualReturn,m),
   IsBlock(block).
in file flows.dl [42:4-47:31])_");
if(!(rel_193_FunctionCallReturn->empty()) && !(rel_140_IsBlock->empty()) && !(rel_406_delta_standardflowanalysis_FunctionFlowSummary->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_406_delta_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_406_delta_standardflowanalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_406_delta_standardflowanalysis_FunctionFlowSummary) {
if( !(!rel_111_FormalArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt)).empty())) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_402_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_404_new_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(standardflowanalysis.Flows(x,z) :- 
   standardflowanalysis.Flows(x,y),
   standardflowanalysis.Flows(y,z).
in file flows.dl [50:4-50:44])_");
if(!(rel_403_delta_standardflowanalysis_Flows->empty()) && !(rel_402_standardflowanalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt,rel_403_delta_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_403_delta_standardflowanalysis_Flows) {
auto range = rel_402_standardflowanalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_402_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt))) && !(rel_403_delta_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_404_new_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(standardflowanalysis.Flows(x,z) :- 
   standardflowanalysis.Flows(x,y),
   standardflowanalysis.Flows(y,z).
in file flows.dl [50:4-50:44])_");
if(!(rel_402_standardflowanalysis_Flows->empty()) && !(rel_403_delta_standardflowanalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt,rel_403_delta_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_402_standardflowanalysis_Flows) {
auto range = rel_403_delta_standardflowanalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_402_standardflowanalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_404_new_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(standardflowanalysis.FunctionFlowSummary(fn,from,n) :- 
   standardflowanalysis.Flows(from,to),
   FormalReturnArgs(fn,to,n).
in file flows.dl [57:4-59:35])_");
if(!(rel_403_delta_standardflowanalysis_Flows->empty()) && !(rel_119_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_403_delta_standardflowanalysis_Flows_op_ctxt,rel_403_delta_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_405_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_405_standardflowanalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_407_new_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_407_new_standardflowanalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_403_delta_standardflowanalysis_Flows) {
auto range = rel_119_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_405_standardflowanalysis_FunctionFlowSummary->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_405_standardflowanalysis_FunctionFlowSummary_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_407_new_standardflowanalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_407_new_standardflowanalysis_FunctionFlowSummary_op_ctxt));
}
}
}
}
();}
if(rel_404_new_standardflowanalysis_Flows->empty() && rel_407_new_standardflowanalysis_FunctionFlowSummary->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_404_new_standardflowanalysis_Flows_op_ctxt,rel_404_new_standardflowanalysis_Flows->createContext());
for(const auto& env0 : *rel_404_new_standardflowanalysis_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_402_standardflowanalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt));
}
}
();std::swap(rel_403_delta_standardflowanalysis_Flows, rel_404_new_standardflowanalysis_Flows);
rel_404_new_standardflowanalysis_Flows->purge();
[&](){
CREATE_OP_CONTEXT(rel_405_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_405_standardflowanalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_407_new_standardflowanalysis_FunctionFlowSummary_op_ctxt,rel_407_new_standardflowanalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_407_new_standardflowanalysis_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_405_standardflowanalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_405_standardflowanalysis_FunctionFlowSummary_op_ctxt));
}
}
();std::swap(rel_406_delta_standardflowanalysis_FunctionFlowSummary, rel_407_new_standardflowanalysis_FunctionFlowSummary);
rel_407_new_standardflowanalysis_FunctionFlowSummary->purge();
iter++;
}
iter = 0;
rel_403_delta_standardflowanalysis_Flows->purge();
rel_404_new_standardflowanalysis_Flows->purge();
rel_406_delta_standardflowanalysis_FunctionFlowSummary->purge();
rel_407_new_standardflowanalysis_FunctionFlowSummary->purge();
if (pruneImdtRels) rel_405_standardflowanalysis_FunctionFlowSummary->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(standardflowanalysis.InterFunctionActualArgFlow(actual,inFunctionVar) :- 
   ActualArgs(caller,actual,n),
   IsBlock(caller),
   CallGraphEdge(caller,fn),
   FormalArgs(fn,formal,n),
   standardflowanalysis.Flows(formal,inFunctionVar).
in file flows.dl [63:5-68:36])_");
if(!(rel_140_IsBlock->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_402_standardflowanalysis_Flows->empty()) && !(rel_100_ActualArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_408_standardflowanalysis_InterFunctionActualArgFlow_op_ctxt,rel_408_standardflowanalysis_InterFunctionActualArgFlow->createContext());
for(const auto& env0 : *rel_100_ActualArgs) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_402_standardflowanalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env3[1])}};
rel_408_standardflowanalysis_InterFunctionActualArgFlow->insert(tuple,READ_OP_CONTEXT(rel_408_standardflowanalysis_InterFunctionActualArgFlow_op_ctxt));
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(standardflowanalysis.GlobalFlows(x,y) :- 
   standardflowanalysis.Flows(x,y).
in file flows.dl [74:4-74:37])_");
if(!(rel_402_standardflowanalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_402_standardflowanalysis_Flows_op_ctxt,rel_402_standardflowanalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
for(const auto& env0 : *rel_402_standardflowanalysis_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_409_standardflowanalysis_GlobalFlows->insert(tuple,READ_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_410_delta_standardflowanalysis_GlobalFlows_op_ctxt,rel_410_delta_standardflowanalysis_GlobalFlows->createContext());
for(const auto& env0 : *rel_409_standardflowanalysis_GlobalFlows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_410_delta_standardflowanalysis_GlobalFlows->insert(tuple,READ_OP_CONTEXT(rel_410_delta_standardflowanalysis_GlobalFlows_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(standardflowanalysis.GlobalFlows(from,to) :- 
   standardflowanalysis.InterFunctionActualArgFlow(actual,to),
   standardflowanalysis.GlobalFlows(from,actual).
in file flows.dl [77:4-79:33])_");
if(!(rel_408_standardflowanalysis_InterFunctionActualArgFlow->empty()) && !(rel_410_delta_standardflowanalysis_GlobalFlows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_408_standardflowanalysis_InterFunctionActualArgFlow_op_ctxt,rel_408_standardflowanalysis_InterFunctionActualArgFlow->createContext());
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_410_delta_standardflowanalysis_GlobalFlows_op_ctxt,rel_410_delta_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_411_new_standardflowanalysis_GlobalFlows_op_ctxt,rel_411_new_standardflowanalysis_GlobalFlows->createContext());
for(const auto& env0 : *rel_408_standardflowanalysis_InterFunctionActualArgFlow) {
auto range = rel_410_delta_standardflowanalysis_GlobalFlows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_410_delta_standardflowanalysis_GlobalFlows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_409_standardflowanalysis_GlobalFlows->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1])}};
rel_411_new_standardflowanalysis_GlobalFlows->insert(tuple,READ_OP_CONTEXT(rel_411_new_standardflowanalysis_GlobalFlows_op_ctxt));
}
}
}
}
();}
if(rel_411_new_standardflowanalysis_GlobalFlows->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_411_new_standardflowanalysis_GlobalFlows_op_ctxt,rel_411_new_standardflowanalysis_GlobalFlows->createContext());
for(const auto& env0 : *rel_411_new_standardflowanalysis_GlobalFlows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_409_standardflowanalysis_GlobalFlows->insert(tuple,READ_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt));
}
}
();std::swap(rel_410_delta_standardflowanalysis_GlobalFlows, rel_411_new_standardflowanalysis_GlobalFlows);
rel_411_new_standardflowanalysis_GlobalFlows->purge();
iter++;
}
iter = 0;
rel_410_delta_standardflowanalysis_GlobalFlows->purge();
rel_411_new_standardflowanalysis_GlobalFlows->purge();
if (pruneImdtRels) rel_402_standardflowanalysis_Flows->purge();
if (pruneImdtRels) rel_408_standardflowanalysis_InterFunctionActualArgFlow->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructAllocation(freePtrUpdStore,structBaseVar,wordWidth) :- 
   PossibleStructAllocation(_,freePtrUpdStore,structBaseVar,wordWidth),
   wordWidth >= @generator_0,
   standardflowanalysis.GlobalFlows(structBaseVar,argOrRet),
   ActualArgs(_,argOrRet,_),
   @generator_0 = count : { InitialStoreToPossibleStruct(+underscore_789,structBaseVar,+underscore_790,+underscore_791) }.
in file structs.dl [67:1-71:67])_");
if(!(rel_409_standardflowanalysis_GlobalFlows->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_256_PossibleStructAllocation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_412_StructAllocation_op_ctxt,rel_412_StructAllocation->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_376_InitialStoreToPossibleStruct->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamSigned>(env0[3]) >= ramBitCast<RamSigned>(env1[0]))) {
auto range = rel_409_standardflowanalysis_GlobalFlows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt));
for(const auto& env2 : range) {
if( !rel_100_ActualArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_412_StructAllocation->insert(tuple,READ_OP_CONTEXT(rel_412_StructAllocation_op_ctxt));
break;
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructAllocation(freePtrUpdStore,structBaseVar,wordWidth) :- 
   PossibleStructAllocation(_,freePtrUpdStore,structBaseVar,wordWidth),
   wordWidth >= @generator_0,
   standardflowanalysis.GlobalFlows(structBaseVar,argOrRet),
   ActualReturnArgs(_,argOrRet,_),
   @generator_0 = count : { InitialStoreToPossibleStruct(+underscore_795,structBaseVar,+underscore_796,+underscore_797) }.
in file structs.dl [67:1-71:67])_");
if(!(rel_409_standardflowanalysis_GlobalFlows->empty()) && !(rel_192_ActualReturnArgs->empty()) && !(rel_256_PossibleStructAllocation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_256_PossibleStructAllocation_op_ctxt,rel_256_PossibleStructAllocation->createContext());
CREATE_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt,rel_376_InitialStoreToPossibleStruct->createContext());
CREATE_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt,rel_409_standardflowanalysis_GlobalFlows->createContext());
CREATE_OP_CONTEXT(rel_412_StructAllocation_op_ctxt,rel_412_StructAllocation->createContext());
for(const auto& env0 : *rel_256_PossibleStructAllocation) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_376_InitialStoreToPossibleStruct->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_376_InitialStoreToPossibleStruct_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamSigned>(env0[3]) >= ramBitCast<RamSigned>(env1[0]))) {
auto range = rel_409_standardflowanalysis_GlobalFlows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_409_standardflowanalysis_GlobalFlows_op_ctxt));
for(const auto& env2 : range) {
if( !rel_192_ActualReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_412_StructAllocation->insert(tuple,READ_OP_CONTEXT(rel_412_StructAllocation_op_ctxt));
break;
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_256_PossibleStructAllocation->purge();
if (pruneImdtRels) rel_376_InitialStoreToPossibleStruct->purge();
if (pruneImdtRels) rel_409_standardflowanalysis_GlobalFlows->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Struct_WordWidth(structBase,wordWidth) :- 
   StructAllocation(_,structBase,wordWidth).
in file structs.dl [73:1-74:46])_");
if(!(rel_412_StructAllocation->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_412_StructAllocation_op_ctxt,rel_412_StructAllocation->createContext());
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
for(const auto& env0 : *rel_412_StructAllocation) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_413_Struct_WordWidth->insert(tuple,READ_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt,rel_414_delta_Struct_WordWidth->createContext());
for(const auto& env0 : *rel_413_Struct_WordWidth) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_414_delta_Struct_WordWidth->insert(tuple,READ_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_417_delta_StructArg_op_ctxt,rel_417_delta_StructArg->createContext());
for(const auto& env0 : *rel_416_StructArg) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_417_delta_StructArg->insert(tuple,READ_OP_CONTEXT(rel_417_delta_StructArg_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(Struct_WordWidth(formal,wordWidth) :- 
   StructArg(_,_,_,actual,formal),
   Struct_WordWidth(actual,wordWidth).
in file structs.dl [135:1-137:39])_");
if(!(rel_417_delta_StructArg->empty()) && !(rel_413_Struct_WordWidth->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt,rel_414_delta_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_415_new_Struct_WordWidth_op_ctxt,rel_415_new_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_417_delta_StructArg_op_ctxt,rel_417_delta_StructArg->createContext());
for(const auto& env0 : *rel_417_delta_StructArg) {
auto range = rel_413_Struct_WordWidth->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_413_Struct_WordWidth->contains(Tuple<RamDomain,2>{{ramBitCast(env0[4]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt))) && !(rel_414_delta_Struct_WordWidth->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[4]),ramBitCast(env1[1])}};
rel_415_new_Struct_WordWidth->insert(tuple,READ_OP_CONTEXT(rel_415_new_Struct_WordWidth_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Struct_WordWidth(formal,wordWidth) :- 
   StructArg(_,_,_,actual,formal),
   Struct_WordWidth(actual,wordWidth).
in file structs.dl [135:1-137:39])_");
if(!(rel_416_StructArg->empty()) && !(rel_414_delta_Struct_WordWidth->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt,rel_414_delta_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_415_new_Struct_WordWidth_op_ctxt,rel_415_new_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
for(const auto& env0 : *rel_416_StructArg) {
auto range = rel_414_delta_Struct_WordWidth->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_413_Struct_WordWidth->contains(Tuple<RamDomain,2>{{ramBitCast(env0[4]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[4]),ramBitCast(env1[1])}};
rel_415_new_Struct_WordWidth->insert(tuple,READ_OP_CONTEXT(rel_415_new_Struct_WordWidth_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(StructArg(caller,function,pos,actual,formal) :- 
   ActualArgs(caller,actual,pos),
   Struct_WordWidth(actual,_),
   CallGraphEdge(caller,function),
   FormalArgs(function,formal,pos).
in file structs.dl [129:1-133:37])_");
if(!(rel_414_delta_Struct_WordWidth->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt,rel_414_delta_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_418_new_StructArg_op_ctxt,rel_418_new_StructArg->createContext());
for(const auto& env0 : *rel_100_ActualArgs) {
if( !rel_414_delta_Struct_WordWidth->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_414_delta_Struct_WordWidth_op_ctxt)).empty()) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_416_StructArg->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_416_StructArg_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_418_new_StructArg->insert(tuple,READ_OP_CONTEXT(rel_418_new_StructArg_op_ctxt));
}
}
}
}
}
}
();}
if(rel_415_new_Struct_WordWidth->empty() && rel_418_new_StructArg->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_415_new_Struct_WordWidth_op_ctxt,rel_415_new_Struct_WordWidth->createContext());
for(const auto& env0 : *rel_415_new_Struct_WordWidth) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_413_Struct_WordWidth->insert(tuple,READ_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt));
}
}
();std::swap(rel_414_delta_Struct_WordWidth, rel_415_new_Struct_WordWidth);
rel_415_new_Struct_WordWidth->purge();
[&](){
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_418_new_StructArg_op_ctxt,rel_418_new_StructArg->createContext());
for(const auto& env0 : *rel_418_new_StructArg) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_416_StructArg->insert(tuple,READ_OP_CONTEXT(rel_416_StructArg_op_ctxt));
}
}
();std::swap(rel_417_delta_StructArg, rel_418_new_StructArg);
rel_418_new_StructArg->purge();
iter++;
}
iter = 0;
rel_414_delta_Struct_WordWidth->purge();
rel_415_new_Struct_WordWidth->purge();
rel_417_delta_StructArg->purge();
rel_418_new_StructArg->purge();
if (pruneImdtRels) rel_412_StructAllocation->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single7(@generator_0) :- 
   @generator_0 = count : { MSTOREFreePtr(+underscore_924) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_43_agg_single7_op_ctxt,rel_43_agg_single7->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_41_MSTOREFreePtr->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_43_agg_single7->insert(tuple,READ_OP_CONTEXT(rel_43_agg_single7_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructIndex(structBaseVar,indexVar,(memOffset/32)) :- 
   Struct_WordWidth(structBaseVar,wordWidth),
   !Statement_Defines(_,structBaseVar,_),
   Variable_SymbolicValue(structBaseVar,structBaseVal),
   FreePointerBasedValuesNumDiffNoMemReuse(indexValue,structBaseVal,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(indexVar,indexValue).
in file structs.dl [88:1-95:48])_");
if(!(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_413_Struct_WordWidth->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_419_StructIndex_op_ctxt,rel_419_StructIndex->createContext());
for(const auto& env0 : *rel_413_Struct_WordWidth) {
if( !(!rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt)).empty())) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env2[2]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env2[2]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[1]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0]),ramBitCast((ramBitCast<RamSigned>(env2[2]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_419_StructIndex->insert(tuple,READ_OP_CONTEXT(rel_419_StructIndex_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructIndex(structBaseVar,indexVar,(memOffset/32)) :- 
   Struct_WordWidth(structBaseVar,wordWidth),
   Statement_Defines(mload,structBaseVar,_),
   Variable_SymbolicValue(structBaseVar,structBaseVal),
   FreePointerBasedValuesNumDiffNoMemReuse(indexValue,structBaseVal,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(indexVar,indexValue),
   Statement_Defines(indexDefStmt,indexVar,_),
   Statement_Block(mload,<inlined_block1_2>),
   Statement_Block(indexDefStmt,<inlined_block2_2>),
   Dominates(<inlined_block1_2>,<inlined_block2_2>).
in file structs.dl [76:1-85:43])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_125_Dominates->empty()) && !(rel_413_Struct_WordWidth->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_419_StructIndex_op_ctxt,rel_419_StructIndex->createContext());
for(const auto& env0 : *rel_413_Struct_WordWidth) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[2]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env3[2]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[1]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env7 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env6[1]),ramBitCast(env7[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env4[0]),ramBitCast((ramBitCast<RamSigned>(env3[2]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_419_StructIndex->insert(tuple,READ_OP_CONTEXT(rel_419_StructIndex_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructIndex(structBaseVar,indexVar,(memOffset/32)) :- 
   Struct_WordWidth(structBaseVar,wordWidth),
   Statement_Defines(mload,structBaseVar,_),
   Variable_SymbolicValue(structBaseVar,structBaseVal),
   FreePointerBasedValuesNumDiffNoMemReuse(indexValue,structBaseVal,memOffset),
   (memOffset%32) = 0,
   (memOffset/32) < wordWidth,
   Variable_SymbolicValue(indexVar,indexValue),
   Statement_Defines(indexDefStmt,indexVar,_),
   Statement_Block(mload,_),
   Statement_Block(indexDefStmt,_),
   LocalStatementPathInBlock(mload,indexDefStmt).
in file structs.dl [76:1-85:43])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_413_Struct_WordWidth->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_413_Struct_WordWidth_op_ctxt,rel_413_Struct_WordWidth->createContext());
CREATE_OP_CONTEXT(rel_419_StructIndex_op_ctxt,rel_419_StructIndex->createContext());
for(const auto& env0 : *rel_413_Struct_WordWidth) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(env3[2]) % ramBitCast<RamSigned>(RamSigned(32)))) == ramBitCast<RamDomain>(RamSigned(0))) && (ramBitCast<RamSigned>((ramBitCast<RamSigned>(env3[2]) / ramBitCast<RamSigned>(RamSigned(32)))) < ramBitCast<RamSigned>(env0[1]))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
if( rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt)) && !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env4[0]),ramBitCast((ramBitCast<RamSigned>(env3[2]) / ramBitCast<RamSigned>(RamSigned(32))))}};
rel_419_StructIndex->insert(tuple,READ_OP_CONTEXT(rel_419_StructIndex_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_413_Struct_WordWidth->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructLoad(mload,structBase,wordOffset,loadedVar) :- 
   StructIndex(structBase,indexVar,wordOffset),
   MLOAD(mload,indexVar,loadedVar).
in file structs.dl [97:1-99:37])_");
if(!(rel_419_StructIndex->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_419_StructIndex_op_ctxt,rel_419_StructIndex->createContext());
CREATE_OP_CONTEXT(rel_420_StructLoad_op_ctxt,rel_420_StructLoad->createContext());
for(const auto& env0 : *rel_419_StructIndex) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_420_StructLoad->insert(tuple,READ_OP_CONTEXT(rel_420_StructLoad_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(_StructLoad(stmt) :- 
   StructLoad(stmt,_,_,_).
in file metrics.dl [198:1-198:47])_");
if(!(rel_420_StructLoad->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_420_StructLoad_op_ctxt,rel_420_StructLoad->createContext());
CREATE_OP_CONTEXT(rel_421_StructLoad_op_ctxt,rel_421_StructLoad->createContext());
for(const auto& env0 : *rel_420_StructLoad) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_421_StructLoad->insert(tuple,READ_OP_CONTEXT(rel_421_StructLoad_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single22(@generator_0) :- 
   @generator_0 = count : { _StructLoad(+underscore_911) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_421_StructLoad_op_ctxt,rel_421_StructLoad->createContext());
CREATE_OP_CONTEXT(rel_422_agg_single22_op_ctxt,rel_422_agg_single22->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_421_StructLoad->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_422_agg_single22->insert(tuple,READ_OP_CONTEXT(rel_422_agg_single22_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StructStore(mstore,structBase,wordOffset,storedVar) :- 
   StructIndex(structBase,indexVar,wordOffset),
   MSTORE(mstore,indexVar,storedVar).
in file structs.dl [101:1-103:39])_");
if(!(rel_419_StructIndex->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_419_StructIndex_op_ctxt,rel_419_StructIndex->createContext());
CREATE_OP_CONTEXT(rel_423_StructStore_op_ctxt,rel_423_StructStore->createContext());
for(const auto& env0 : *rel_419_StructIndex) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_423_StructStore->insert(tuple,READ_OP_CONTEXT(rel_423_StructStore_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_419_StructIndex->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(IsRegularArrayVar(arrayVar) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,_),
   CALLDATACOPY(_,arrayDataStart,_,lenVar),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [89:1-95:46])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_374_CallDataLoadReadsLength->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env2 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[1])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(arrayVar) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,_),
   VarTimesConstant(lenVar,_,lenBytes),
   CALLDATACOPY(_,arrayDataStart,_,lenBytes),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [98:1-105:46])_");
if(!(rel_381_VarTimesConstant->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_94_CALLDATACOPY->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_374_CallDataLoadReadsLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env3 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[1])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   PossibleArrayAlias(array,arrayAlias),
   VarPlusThirtyTwo(arrayAlias,arrayStart),
   StatementUsesMemory_StartVar(stmt,_,arrayStart),
   StatementUsesMemoryReadsRawData(stmt,_),
   !StatementUsesMemoryOfComputableLength(stmt,_,_).
in file arrays.dl [414:1-420:54])_");
if(!(rel_297_PossibleArrayAlias->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_71_StatementUsesMemoryReadsRawData->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt,rel_71_StatementUsesMemoryReadsRawData->createContext());
CREATE_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt,rel_297_PossibleArrayAlias->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_297_PossibleArrayAlias->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_297_PossibleArrayAlias_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env3 : range) {
if( !rel_71_StatementUsesMemoryReadsRawData->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt)).empty() && !(!rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarTimesConstant(arrayLengthVar,_,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [432:1-441:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   VarTimesConstant(arrayLengthVar,_,arraySizeBytes),
   ADDFix(_,arraySizeBytes,arrayStart,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [446:1-455:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [463:1-473:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength1),
   VarPlusThrirtyOneAndNotThirtyOne(arraySizeBytesPlusLength1,arraySizeBytesPlusLength2),
   ADDFix(_,arraySizeBytesPlusLength2,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [475:1-486:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_40_MSTORE->empty()) && !(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [488:1-497:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   VarPlusThirtyTwo(arrayPlusSizeBytes,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [499:1-508:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   RETURNDATASIZEOfCALL(_,arrayLengthVar,call),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   RETURNDATACOPYAllDataOfCALL(_,arrayStart,call),
   RETURNDATASIZEOfCALL(_,arrayLengthVarAlt,call),
   VarPlusSixtyThreeAndNotThirtyOne(arrayLengthVarAlt,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [534:1-546:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_166_RETURNDATACOPYAllDataOfCALL->empty()) && !(rel_300_VarPlusSixtyThreeAndNotThirtyOne->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_165_RETURNDATASIZEOfCALL) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
if( !rel_166_RETURNDATACOPYAllDataOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt)).empty()) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_300_VarPlusSixtyThreeAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   Variable_Value(arrayLengthVar,constantLengthVal),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Variable_Value(arraySizeBytes,sizeBytesVal),
   constantLengthVal != "0x0",
   @sub_256(sizeBytesVal,"0x20") != "0x0",
   @div_256(@sub_256(sizeBytesVal,"0x20"),constantLengthVal) != "0x0",
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [511:1-525:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
if( (ramBitCast<RamDomain>(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))) != ramBitCast<RamDomain>(RamSigned(5))) && (ramBitCast<RamDomain>(symTable.encode(functors::div_256(symTable.decode(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))).c_str(),symTable.decode(env2[1]).c_str()))) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
break;
}
}
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRawDataArrayVar(array) :- 
   StatementUsesMemoryReadsRawData(stmt,_),
   StatementUsesMemory_StartVar(stmt,_,array),
   MLOADFreePtr_To(_,array).
in file arrays.dl [426:1-429:29])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_29_MLOADFreePtr_To->empty()) && !(rel_71_StatementUsesMemoryReadsRawData->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt,rel_71_StatementUsesMemoryReadsRawData->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
for(const auto& env0 : *rel_71_StatementUsesMemoryReadsRawData) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
if( !rel_29_MLOADFreePtr_To->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[2])}};
rel_427_IsRawDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(plusFourVar,elemSize) :- 
   IsCallDataArrayVar(plusFourVar,argHex),
   CallDataLoadReadsLength(_,_,plusFourVar,lenVar,argHex),
   VarTimesConstant(lenVar,elemSize,_).
in file arrays.dl [68:1-71:41])_");
if(!(rel_374_CallDataLoadReadsLength->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_378_IsCallDataArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_378_IsCallDataArrayVar) {
auto range = rel_374_CallDataLoadReadsLength->lowerUpperRange_00101(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1])}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(arrayVar,"0x1") :- 
   CallDataLoadReadsLength(_,_,_,lenVar,_),
   CALLDATACOPY(_,arrayDataStart,_,lenVar),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [89:1-95:46])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_374_CallDataLoadReadsLength->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env2 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(arrayVar,elemSize) :- 
   CallDataLoadReadsLength(_,_,_,lenVar,_),
   VarTimesConstant(lenVar,elemSize,lenBytes),
   CALLDATACOPY(_,arrayDataStart,_,lenBytes),
   ArgArrayLenWrittenTo(lenVar,arrayVar),
   VarPlusThirtyTwo(arrayVar,arrayDataStart).
in file arrays.dl [98:1-105:46])_");
if(!(rel_381_VarTimesConstant->empty()) && !(rel_375_ArgArrayLenWrittenTo->empty()) && !(rel_94_CALLDATACOPY->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_374_CallDataLoadReadsLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt,rel_375_ArgArrayLenWrittenTo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_375_ArgArrayLenWrittenTo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_375_ArgArrayLenWrittenTo_op_ctxt));
for(const auto& env3 : range) {
if( rel_38_VarPlusThirtyTwo->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,elementSize) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarTimesConstant(arrayLengthVar,elementSize,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [432:1-441:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1])}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,elementSize) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   VarTimesConstant(arrayLengthVar,elementSize,arraySizeBytes),
   ADDFix(_,arraySizeBytes,arrayStart,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [446:1-455:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1])}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,"0x1") :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [463:1-473:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,"0x1") :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength1),
   VarPlusThrirtyOneAndNotThirtyOne(arraySizeBytesPlusLength1,arraySizeBytesPlusLength2),
   ADDFix(_,arraySizeBytesPlusLength2,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [475:1-486:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_40_MSTORE->empty()) && !(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,"0x1") :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [488:1-497:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,"0x1") :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   VarPlusThirtyTwo(arrayPlusSizeBytes,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [499:1-508:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,"0x1") :- 
   RETURNDATASIZEOfCALL(_,arrayLengthVar,call),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   RETURNDATACOPYAllDataOfCALL(_,arrayStart,call),
   RETURNDATASIZEOfCALL(_,arrayLengthVarAlt,call),
   VarPlusSixtyThreeAndNotThirtyOne(arrayLengthVarAlt,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [534:1-546:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_166_RETURNDATACOPYAllDataOfCALL->empty()) && !(rel_300_VarPlusSixtyThreeAndNotThirtyOne->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_165_RETURNDATASIZEOfCALL) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
if( !rel_166_RETURNDATACOPYAllDataOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt)).empty()) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_300_VarPlusSixtyThreeAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(RamSigned(24))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,@div_256(@sub_256(sizeBytesVal,"0x20"),constantLengthVal)) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   Variable_Value(arrayLengthVar,constantLengthVal),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Variable_Value(arraySizeBytes,sizeBytesVal),
   constantLengthVal != "0x0",
   @sub_256(sizeBytesVal,"0x20") != "0x0",
   @div_256(@sub_256(sizeBytesVal,"0x20"),constantLengthVal) != "0x0",
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [511:1-525:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
if( (ramBitCast<RamDomain>(symTable.encode(functors::div_256(symTable.decode(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))).c_str(),symTable.decode(env2[1]).c_str()))) != ramBitCast<RamDomain>(RamSigned(5))) && (ramBitCast<RamDomain>(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(symTable.encode(functors::div_256(symTable.decode(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))).c_str(),symTable.decode(env2[1]).c_str())))}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayDataStartVar(array,dataStartVar) :- 
   CallDataLoadReadsLength(cdl,_,array,_,_),
   CALLDATALOAD(cdl,_,to),
   ADDFix(_,to,x24,dataStartVar),
   Variable_NumericValue(x24,36).
in file arrays.dl [83:1-87:34])_");
if(!(rel_92_CALLDATALOAD->empty()) && !(rel_9_ADDFix->empty()) && !(rel_374_CallDataLoadReadsLength->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
auto range = rel_92_CALLDATALOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(RamSigned(36))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(env2[3])}};
rel_436_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   MLOAD(_,array,_),
   VarPlusThirtyTwo(array,_).
in file arrays.dl [348:1-350:30])_");
if(!(rel_10_MLOAD->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
if( !rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   MSTORE(_,array,_),
   VarPlusThirtyTwo(array,_).
in file arrays.dl [352:1-354:30])_");
if(!(rel_40_MSTORE->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( !rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   Statement_Opcode(callDataCopy,"CALLDATACOPY"),
   Statement_Uses(callDataCopy,arrayDataStart,0),
   Variable_SymbolicValue(arrayDataStart,val1),
   FreePointerBasedValuesNumDiff(val1,val2,32),
   Variable_SymbolicValue(array,val2).
in file arrays.dl [356:1-361:39])_");
if(!(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(51))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(51))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env4[0])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   MSTORE(_,array,_),
   Variable_SymbolicValue(array,val1),
   FreePointerBasedValuesNumDiff(val2,val1,32),
   Variable_SymbolicValue(_,val2).
in file arrays.dl [363:1-367:35])_");
if(!(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_40_MSTORE->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env2 : range) {
if( !rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   VarPlusThirtyTwo(array,arrayDataStart),
   RETURNDATACOPY(_,arrayDataStart,_,_).
in file arrays.dl [369:1-371:43])_");
if(!(rel_38_VarPlusThirtyTwo->empty()) && !(rel_90_RETURNDATACOPY->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt,rel_90_RETURNDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_38_VarPlusThirtyTwo) {
if( !rel_90_RETURNDATACOPY->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_424_IsRegularArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_425_delta_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_428_delta_IsRawDataArrayVar_op_ctxt,rel_428_delta_IsRawDataArrayVar->createContext());
for(const auto& env0 : *rel_427_IsRawDataArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_428_delta_IsRawDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_428_delta_IsRawDataArrayVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_431_delta_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt,rel_433_ArrayVarLengthVar->createContext());
CREATE_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt,rel_434_delta_ArrayVarLengthVar->createContext());
for(const auto& env0 : *rel_433_ArrayVarLengthVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_434_delta_ArrayVarLengthVar->insert(tuple,READ_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt,rel_437_delta_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_436_ArrayDataStartVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_437_delta_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_439_PossibleArrayLoose) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_440_delta_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt,rel_442_ArrayActualArg->createContext());
CREATE_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt,rel_443_delta_ArrayActualArg->createContext());
for(const auto& env0 : *rel_442_ArrayActualArg) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_443_delta_ArrayActualArg->insert(tuple,READ_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt,rel_445_ArrayFormalRet->createContext());
CREATE_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt,rel_446_delta_ArrayFormalRet->createContext());
for(const auto& env0 : *rel_445_ArrayFormalRet) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_446_delta_ArrayFormalRet->insert(tuple,READ_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt,rel_449_delta_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_448_RegularArrayVarsInSameClass) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_449_delta_RegularArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt,rel_451_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt,rel_452_delta_StructContainsArray->createContext());
for(const auto& env0 : *rel_451_StructContainsArray) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_452_delta_StructContainsArray->insert(tuple,READ_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_455_delta_ABIEncodedArrayIncludesArray_op_ctxt,rel_455_delta_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_454_ABIEncodedArrayIncludesArray) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_455_delta_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_455_delta_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex->insert(tuple,READ_OP_CONTEXT(rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(IsRegularArrayVar(array) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLength),
   ArrayVarLengthVar(_,arrayLength).
in file arrays.dl [408:1-412:44])_");
if(!(rel_40_MSTORE->empty()) && !(rel_434_delta_ArrayVarLengthVar->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt,rel_434_delta_ArrayVarLengthVar->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
if( !rel_434_delta_ArrayVarLengthVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(formal) :- 
   ArrayActualArg(_,function,pos,"Regular"),
   FormalArgs(function,formal,pos).
in file arrays.dl [626:1-628:37])_");
if(!(rel_443_delta_ArrayActualArg->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt,rel_443_delta_ArrayActualArg->createContext());
auto range = rel_443_delta_ArrayActualArg->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(actual) :- 
   ArrayFormalRet(fun,index,"Regular"),
   CallGraphEdge(caller,fun),
   ActualReturnArgs(caller,actual,index).
in file arrays.dl [630:1-633:43])_");
if(!(rel_110_CallGraphEdge->empty()) && !(rel_192_ActualReturnArgs->empty()) && !(rel_446_delta_ArrayFormalRet->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt,rel_446_delta_ArrayFormalRet->createContext());
auto range = rel_446_delta_ArrayFormalRet->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[1])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(arrVar2) :- 
   IsRegularArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,arrVal),
   Variable_SymbolicValue(arrVar2,arrVal).
in file arrays.dl [764:1-768:43])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env2[0])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(arrVar2) :- 
   IsRegularArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [775:1-783:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env5[0])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(loadedVar) :- 
   StructContainsArray(formal,wordOffset,_),
   StructArg(_,_,_,_,formal),
   StructLoad(_,formal,wordOffset,loadedVar).
in file structs.dl [143:1-147:48])_");
if(!(rel_416_StructArg->empty()) && !(rel_420_StructLoad->empty()) && !(rel_452_delta_StructContainsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_420_StructLoad_op_ctxt,rel_420_StructLoad->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt,rel_452_delta_StructContainsArray->createContext());
for(const auto& env0 : *rel_452_delta_StructContainsArray) {
if( !rel_416_StructArg->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_416_StructArg_op_ctxt)).empty()) {
auto range = rel_420_StructLoad->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_420_StructLoad_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[3])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRegularArrayVar(innerArrayVar) :- 
   ABIEncodedArrayIncludesArray(_,_,innerArrayVar,_).
in file uses_defs_abstractions.dl [225:1-226:56])_");
if(!(rel_455_delta_ABIEncodedArrayIncludesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_455_delta_ABIEncodedArrayIncludesArray_op_ctxt,rel_455_delta_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_455_delta_ABIEncodedArrayIncludesArray) {
if( !(rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[2])}};
rel_426_new_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(IsRawDataArrayVar(arrVar2) :- 
   IsRawDataArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [788:1-796:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_428_delta_IsRawDataArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_428_delta_IsRawDataArrayVar_op_ctxt,rel_428_delta_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_429_new_IsRawDataArrayVar_op_ctxt,rel_429_new_IsRawDataArrayVar->createContext());
for(const auto& env0 : *rel_428_delta_IsRawDataArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_427_IsRawDataArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env5[0])}};
rel_429_new_IsRawDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_429_new_IsRawDataArrayVar_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IsRawDataArrayVar(toRawArray) :- 
   MemoryCopyLoop(_,fromArrayData,toRawArray),
   ArrayDataStartVar(_,fromArrayData),
   IsABIEncodedArrayVar(toRawArray).
in file loops.dl [109:1-112:36])_");
if(!(rel_302_IsABIEncodedArrayVar->empty()) && !(rel_437_delta_ArrayDataStartVar->empty()) && !(rel_271_MemoryCopyLoop->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt,rel_302_IsABIEncodedArrayVar->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_429_new_IsRawDataArrayVar_op_ctxt,rel_429_new_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt,rel_437_delta_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
if( !rel_437_delta_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt)).empty() && rel_302_IsABIEncodedArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_302_IsABIEncodedArrayVar_op_ctxt)) && !(rel_427_IsRawDataArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[2])}};
rel_429_new_IsRawDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_429_new_IsRawDataArrayVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(array,elementSize) :- 
   IsCallDataArrayVar(array,_),
   ArrayDataStartVar(array,dataStartVar),
   ADDFix(_,dataStartVar,indexTimesCons,cdlIndex),
   VarTimesConstant(_,elementSize,indexTimesCons),
   CALLDATALOAD(_,cdlIndex,_).
in file arrays.dl [75:1-80:32])_");
if(!(rel_437_delta_ArrayDataStartVar->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_92_CALLDATALOAD->empty()) && !(rel_378_IsCallDataArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_378_IsCallDataArrayVar_op_ctxt,rel_378_IsCallDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt,rel_437_delta_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_378_IsCallDataArrayVar) {
auto range = rel_437_delta_ArrayDataStartVar->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_437_delta_ArrayDataStartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
if( !rel_92_CALLDATALOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt)).empty()) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(formal,elementSize) :- 
   ArrayActualArg(caller,function,pos,"Regular"),
   ActualArgs(caller,actual,pos),
   Array_ElementLength(actual,elementSize),
   FormalArgs(function,formal,pos).
in file arrays.dl [635:1-639:37])_");
if(!(rel_100_ActualArgs->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_443_delta_ArrayActualArg->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt,rel_443_delta_ArrayActualArg->createContext());
auto range = rel_443_delta_ArrayActualArg->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_443_delta_ArrayActualArg_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_100_ActualArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_430_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_431_delta_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt)))) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env2[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(formal,elementSize) :- 
   ArrayActualArg(caller,function,pos,"Regular"),
   ActualArgs(caller,actual,pos),
   Array_ElementLength(actual,elementSize),
   FormalArgs(function,formal,pos).
in file arrays.dl [635:1-639:37])_");
if(!(rel_100_ActualArgs->empty()) && !(rel_431_delta_Array_ElementLength->empty()) && !(rel_442_ArrayActualArg->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt,rel_442_ArrayActualArg->createContext());
auto range = rel_442_ArrayActualArg->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_100_ActualArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_431_delta_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env2[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(actual,elementSize) :- 
   ArrayFormalRet(fun,index,"Regular"),
   FormalReturnArgs(fun,formalRet,index),
   Array_ElementLength(formalRet,elementSize),
   ActualReturnArgs(_,actual,index).
in file arrays.dl [641:1-645:38])_");
if(!(rel_119_FormalReturnArgs->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_446_delta_ArrayFormalRet->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt,rel_446_delta_ArrayFormalRet->createContext());
auto range = rel_446_delta_ArrayFormalRet->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_446_delta_ArrayFormalRet_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_119_FormalReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_430_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_431_delta_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt)))) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env2[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(actual,elementSize) :- 
   ArrayFormalRet(fun,index,"Regular"),
   FormalReturnArgs(fun,formalRet,index),
   Array_ElementLength(formalRet,elementSize),
   ActualReturnArgs(_,actual,index).
in file arrays.dl [641:1-645:38])_");
if(!(rel_119_FormalReturnArgs->empty()) && !(rel_431_delta_Array_ElementLength->empty()) && !(rel_445_ArrayFormalRet->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt,rel_445_ArrayFormalRet->createContext());
auto range = rel_445_ArrayFormalRet->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(52))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_119_FormalReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_431_delta_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env2[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(arrayAlias,elementSize) :- 
   Array_ElementLength(array,elementSize),
   RegularArrayVarsInSameClass(array,arrayAlias).
in file arrays.dl [770:1-772:50])_");
if(!(rel_431_delta_Array_ElementLength->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt,rel_449_delta_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_431_delta_Array_ElementLength) {
auto range = rel_448_RegularArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_449_delta_RegularArrayVarsInSameClass->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt))) && !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(arrayAlias,elementSize) :- 
   Array_ElementLength(array,elementSize),
   RegularArrayVarsInSameClass(array,arrayAlias).
in file arrays.dl [770:1-772:50])_");
if(!(rel_430_Array_ElementLength->empty()) && !(rel_449_delta_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt,rel_449_delta_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
auto range = rel_449_delta_RegularArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_449_delta_RegularArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1])}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(Array_ElementLength(loadedVar,@number_to_hex(elementSize)) :- 
   StructContainsArray(formal,wordOffset,elementSize),
   StructArg(_,_,_,_,formal),
   StructLoad(_,formal,wordOffset,loadedVar).
in file structs.dl [143:1-147:48])_");
if(!(rel_416_StructArg->empty()) && !(rel_420_StructLoad->empty()) && !(rel_452_delta_StructContainsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_420_StructLoad_op_ctxt,rel_420_StructLoad->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt,rel_452_delta_StructContainsArray->createContext());
for(const auto& env0 : *rel_452_delta_StructContainsArray) {
if( !rel_416_StructArg->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_416_StructArg_op_ctxt)).empty()) {
auto range = rel_420_StructLoad->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_420_StructLoad_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_430_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env1[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)env0[2]))))}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[3]),ramBitCast(symTable.encode(functors::number_to_hex(((RamSigned)env0[2]))))}};
rel_432_new_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayVarLengthVar(array,arrayLength) :- 
   IsRegularArrayVar(array),
   MLOAD(_,array,arrayLength).
in file arrays.dl [136:1-138:32])_");
if(!(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt,rel_433_ArrayVarLengthVar->createContext());
CREATE_OP_CONTEXT(rel_435_new_ArrayVarLengthVar_op_ctxt,rel_435_new_ArrayVarLengthVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_433_ArrayVarLengthVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_435_new_ArrayVarLengthVar->insert(tuple,READ_OP_CONTEXT(rel_435_new_ArrayVarLengthVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayDataStartVar(array,arrayStart) :- 
   IsRegularArrayVar(array),
   VarPlusThirtyTwo(array,arrayStart).
in file arrays.dl [112:1-114:39])_");
if(!(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt,rel_438_new_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_436_ArrayDataStartVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_438_new_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayDataStartVar(array,arrayStart) :- 
   IsRegularArrayVar(array),
   Variable_SymbolicValue(array,arrayVal),
   FreePointerBasedValuesNumDiffNoMemReuse(dataStartVal,arrayVal,32),
   Variable_SymbolicValue(arrayStart,dataStartVal),
   Statement_Defines(stmt2,arrayStart,_),
   Statement_Block(stmt2,block2),
   Statement_Defines(stmt1,array,_),
   Statement_Block(stmt1,block1),
   Dominates(block1,block2).
in file arrays.dl [117:1-127:73])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_125_Dominates->empty()) && !(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt,rel_438_new_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_436_ArrayDataStartVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt)))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env7 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env7[1]),ramBitCast(env5[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0])}};
rel_438_new_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayDataStartVar(array,arrayStart) :- 
   IsRegularArrayVar(array),
   Variable_SymbolicValue(array,arrayVal),
   FreePointerBasedValuesNumDiffNoMemReuse(dataStartVal,arrayVal,32),
   Variable_SymbolicValue(arrayStart,dataStartVal),
   Statement_Defines(stmt2,arrayStart,_),
   Statement_Block(stmt2,_),
   Statement_Defines(stmt1,array,_),
   Statement_Block(stmt1,_),
   LocalStatementPathInBlock(stmt1,stmt2).
in file arrays.dl [117:1-127:73])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt,rel_438_new_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast(RamSigned(32))}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_436_ArrayDataStartVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt)))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env4 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty() && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env5[0]),ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0])}};
rel_438_new_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayDataStartVar(array,array) :- 
   IsRawDataArrayVar(array).
in file arrays.dl [133:1-134:28])_");
if(!(rel_428_delta_IsRawDataArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_428_delta_IsRawDataArrayVar_op_ctxt,rel_428_delta_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt,rel_438_new_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_428_delta_IsRawDataArrayVar) {
if( !(rel_436_ArrayDataStartVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_438_new_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArrayLoose(array) :- 
   MSTORE(_,array,var),
   ArrayVarLengthVar(_,var).
in file arrays.dl [373:1-375:29])_");
if(!(rel_40_MSTORE->empty()) && !(rel_434_delta_ArrayVarLengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt,rel_434_delta_ArrayVarLengthVar->createContext());
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_441_new_PossibleArrayLoose_op_ctxt,rel_441_new_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( !rel_434_delta_ArrayVarLengthVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_434_delta_ArrayVarLengthVar_op_ctxt)).empty() && !(rel_439_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_441_new_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_441_new_PossibleArrayLoose_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ArrayActualArg(caller,function,pos,"Regular") :- 
   ActualArgs(caller,actual,pos),
   IsRegularArrayVar(actual),
   CallGraphEdge(caller,function),
   FormalArgs(function,_,pos).
in file arrays.dl [609:1-613:32])_");
if(!(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt,rel_442_ArrayActualArg->createContext());
CREATE_OP_CONTEXT(rel_444_new_ArrayActualArg_op_ctxt,rel_444_new_ArrayActualArg->createContext());
for(const auto& env0 : *rel_100_ActualArgs) {
if( rel_425_delta_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt))) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
if( !rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt)).empty() && !(rel_442_ArrayActualArg->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(RamSigned(52))}};
rel_444_new_ArrayActualArg->insert(tuple,READ_OP_CONTEXT(rel_444_new_ArrayActualArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayFormalRet(fun,index,"Regular") :- 
   FormalReturnArgs(fun,formalRet,index),
   IsRegularArrayVar(formalRet).
in file arrays.dl [622:1-624:32])_");
if(!(rel_119_FormalReturnArgs->empty()) && !(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt,rel_445_ArrayFormalRet->createContext());
CREATE_OP_CONTEXT(rel_447_new_ArrayFormalRet_op_ctxt,rel_447_new_ArrayFormalRet->createContext());
for(const auto& env0 : *rel_119_FormalReturnArgs) {
if( rel_425_delta_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt)) && !(rel_445_ArrayFormalRet->contains(Tuple<RamDomain,3>{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(RamSigned(52))}},READ_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(RamSigned(52))}};
rel_447_new_ArrayFormalRet->insert(tuple,READ_OP_CONTEXT(rel_447_new_ArrayFormalRet_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(RegularArrayVarsInSameClass(arrVar1,arrVar1) :- 
   IsRegularArrayVar(arrVar1).
in file arrays.dl [761:1-762:30])_");
if(!(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt,rel_450_new_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
if( !(rel_448_RegularArrayVarsInSameClass->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_450_new_RegularArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(RegularArrayVarsInSameClass(arrVar1,arrVar2) :- 
   IsRegularArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,arrVal),
   Variable_SymbolicValue(arrVar2,arrVal).
in file arrays.dl [764:1-768:43])_");
if(!(rel_229_Variable_SymbolicValue->empty()) && !(rel_425_delta_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt,rel_450_new_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_448_RegularArrayVarsInSameClass->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0])}};
rel_450_new_RegularArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(RegularArrayVarsInSameClass(arrVar1,arrVar2) :- 
   IsRegularArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [775:1-783:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt,rel_450_new_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_425_delta_IsRegularArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_448_RegularArrayVarsInSameClass->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0])}};
rel_450_new_RegularArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructContainsArray(structBase,wordOffset,@hex_to_number(elementSize)) :- 
   StructStore(_,structBase,wordOffset,storedVar),
   IsRegularArrayVar(storedVar),
   Array_ElementLength(storedVar,elementSize).
in file structs.dl [105:1-108:47])_");
if(!(rel_425_delta_IsRegularArrayVar->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_423_StructStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_423_StructStore_op_ctxt,rel_423_StructStore->createContext());
CREATE_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt,rel_425_delta_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt,rel_451_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt,rel_453_new_StructContainsArray->createContext());
for(const auto& env0 : *rel_423_StructStore) {
if( rel_425_delta_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_425_delta_IsRegularArrayVar_op_ctxt))) {
auto range = rel_430_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_451_StructContainsArray->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}},READ_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt))) && !(rel_431_delta_Array_ElementLength->contains(Tuple<RamDomain,2>{{ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_453_new_StructContainsArray->insert(tuple,READ_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructContainsArray(structBase,wordOffset,@hex_to_number(elementSize)) :- 
   StructStore(_,structBase,wordOffset,storedVar),
   IsRegularArrayVar(storedVar),
   Array_ElementLength(storedVar,elementSize).
in file structs.dl [105:1-108:47])_");
if(!(rel_424_IsRegularArrayVar->empty()) && !(rel_431_delta_Array_ElementLength->empty()) && !(rel_423_StructStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_423_StructStore_op_ctxt,rel_423_StructStore->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt,rel_431_delta_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt,rel_451_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt,rel_453_new_StructContainsArray->createContext());
for(const auto& env0 : *rel_423_StructStore) {
if( rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt))) {
auto range = rel_431_delta_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_431_delta_Array_ElementLength_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_451_StructContainsArray->contains(Tuple<RamDomain,3>{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}},READ_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_453_new_StructContainsArray->insert(tuple,READ_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StructContainsArray(formal,wordOffset,elementSize) :- 
   StructArg(_,_,_,actual,formal),
   StructContainsArray(actual,wordOffset,elementSize).
in file structs.dl [139:1-141:56])_");
if(!(rel_416_StructArg->empty()) && !(rel_452_delta_StructContainsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_416_StructArg_op_ctxt,rel_416_StructArg->createContext());
CREATE_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt,rel_451_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt,rel_452_delta_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt,rel_453_new_StructContainsArray->createContext());
for(const auto& env0 : *rel_416_StructArg) {
auto range = rel_452_delta_StructContainsArray->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_452_delta_StructContainsArray_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_451_StructContainsArray->contains(Tuple<RamDomain,3>{{ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[2])}};
rel_453_new_StructContainsArray->insert(tuple,READ_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArray(abiArr,memConsStmt,abiAddrPlusIndex,index) :- 
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   ABIEncodedArrayReadByStmt(abiArrVar,memConsStmt),
   MLOAD(mload,_,abiArrVar),
   FreePointerBasedValue(abiVal,mload,_,index),
   Variable_SymbolicValue(innnerArrIndex,abiVal),
   MLOAD(_,innnerArrIndex,indexVar),
   ADDFix(_,indexVar,abiArrVar,abiAddrPlusIndex),
   PossibleArrayLoose(abiAddrPlusIndex).
in file uses_defs_abstractions.dl [228:1-236:40])_");
if(!(rel_9_ADDFix->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_10_MLOAD->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_308_ABIEncodedArrayReadByStmt->empty()) && !(rel_440_delta_PossibleArrayLoose->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt,rel_308_ABIEncodedArrayReadByStmt->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt,rel_456_new_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_306_ABIEncodedArrayVar_ClassRep) {
auto range = rel_308_ABIEncodedArrayReadByStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_308_ABIEncodedArrayReadByStmt_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env6 : range) {
if( rel_440_delta_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env6[3])}},READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt)) && !(rel_454_ABIEncodedArrayIncludesArray->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env6[3]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env6[3]),ramBitCast(env3[3])}};
rel_456_new_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArray(abiArr,memConsStmt,abiAddrPlusIndex,arrayPointerIndex) :- 
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   ABIEncodedArrayNoFunctionSelector(abiArr),
   ABIEncodedArrayWriteTo(mstore,abiArr,memConsStmt,arrayPointerIndex),
   MSTORE(mstore,_,arrayLocationIndex),
   ADDFixx(_,arrayLocationIndex,abiArrVar,abiAddrPlusIndex),
   PossibleArrayLoose(abiAddrPlusIndex).
in file uses_defs_abstractions.dl [239:1-245:40])_");
if(!(rel_307_ABIEncodedArrayNoFunctionSelector->empty()) && !(rel_52_ADDFixx->empty()) && !(rel_356_ABIEncodedArrayWriteTo->empty()) && !(rel_40_MSTORE->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_440_delta_PossibleArrayLoose->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_52_ADDFixx_op_ctxt,rel_52_ADDFixx->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt,rel_307_ABIEncodedArrayNoFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt,rel_456_new_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_306_ABIEncodedArrayVar_ClassRep) {
if( rel_307_ABIEncodedArrayNoFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt))) {
auto range = rel_356_ABIEncodedArrayWriteTo->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_52_ADDFixx->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_52_ADDFixx_op_ctxt));
for(const auto& env3 : range) {
if( rel_440_delta_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt)) && !(rel_454_ABIEncodedArrayIncludesArray->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env3[3]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env3[3]),ramBitCast(env1[3])}};
rel_456_new_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArray(abiArr,memConsStmt,abiAddrPlusIndex,arrayPointerIndex) :- 
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   ABIEncodedArrayWFunctionSelector(abiArr),
   ABIEncodedArrayWriteTo(mstore,abiArr,memConsStmt,arrayPointerIndex),
   MSTORE(mstore,_,arrayLocationIndex),
   ADDFix(_,abiArrVar,fourVar,abiPlusFour),
   Variable_NumericValue(fourVar,4),
   ADDFixx(_,arrayLocationIndex,abiPlusFour,abiAddrPlusIndex),
   PossibleArrayLoose(abiAddrPlusIndex),
   !Variable_NumericValue(arrayLocationIndex,arrayPointerIndex).
in file uses_defs_abstractions.dl [248:1-260:65])_");
if(!(rel_309_ABIEncodedArrayWFunctionSelector->empty()) && !(rel_52_ADDFixx->empty()) && !(rel_356_ABIEncodedArrayWriteTo->empty()) && !(rel_223_Variable_NumericValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_9_ADDFix->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_440_delta_PossibleArrayLoose->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_52_ADDFixx_op_ctxt,rel_52_ADDFixx->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt,rel_456_new_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_306_ABIEncodedArrayVar_ClassRep) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
auto range = rel_356_ABIEncodedArrayWriteTo->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt)))) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
if( rel_223_Variable_NumericValue->contains(Tuple<RamDomain,2>{{ramBitCast(env3[2]),ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt))) {
auto range = rel_52_ADDFixx->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_52_ADDFixx_op_ctxt));
for(const auto& env4 : range) {
if( rel_440_delta_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env4[3])}},READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt)) && !(rel_454_ABIEncodedArrayIncludesArray->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env4[3]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env4[3]),ramBitCast(env1[3])}};
rel_456_new_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArray(abiArr,memConsStmt,arrayVar,arrayPointerIndex) :- 
   ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,memConsStmt,arrayVar,arrayPointerIndex,_).
in file uses_defs_abstractions.dl [262:1-263:100])_");
if(!(rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt,rel_456_new_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
if( !(rel_454_ABIEncodedArrayIncludesArray->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_456_new_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,memConsStmt,abiAddrPlusIndex,arrayPointerIndex,arrayLocationIndex) :- 
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   ABIEncodedArrayWriteTo(mstore1,abiArr,memConsStmt,arrayPointerIndex),
   MSTORE(mstore1,_,arrayLocationVar),
   Variable_NumericValue(arrayLocationVar,arrayLocationIndex),
   Variable_NumericValue(otherIndexVar,arrayLocationIndex),
   arrayPointerIndex < arrayLocationIndex,
   ADDFix(_,otherIndexVar,abiArrVar,abiAddrPlusIndex),
   PossibleArrayLoose(abiAddrPlusIndex).
in file uses_defs_abstractions.dl [269:1-277:40])_");
if(!(rel_9_ADDFix->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_223_Variable_NumericValue->empty()) && !(rel_40_MSTORE->empty()) && !(rel_440_delta_PossibleArrayLoose->empty()) && !(rel_356_ABIEncodedArrayWriteTo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_306_ABIEncodedArrayVar_ClassRep) {
auto range = rel_356_ABIEncodedArrayWriteTo->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_12(Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast(env1[3])}},Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env3 : range) {
if( (ramBitCast<RamDomain>(env1[3]) != ramBitCast<RamDomain>(env3[1]))) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
if( rel_440_delta_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env5[3])}},READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt)) && !(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->contains(Tuple<RamDomain,5>{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[3]),ramBitCast(env1[3]),ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env5[3]),ramBitCast(env1[3]),ramBitCast(env3[1])}};
rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->insert(tuple,READ_OP_CONTEXT(rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,memConsStmt,indexVar,arrayPointerIndex,arrayLocationIndex) :- 
   ABIEncodedArrayWriteTo(mstore1,abiArr,memConsStmt,arrayPointerIndex),
   MSTORE(mstore1,_,arrayLocationVar),
   Variable_NumericValue(arrayLocationVar,arrayLocationIndex),
   arrayLocationIndex != 0,
   ABIEncodedArrayWriteTo(mstore2,abiArr,memConsStmt,arrayLocationIndex),
   arrayPointerIndex < arrayLocationIndex,
   MSTORE(mstore2,indexVar,_),
   PossibleArrayLoose(indexVar).
in file uses_defs_abstractions.dl [279:1-287:32])_");
if(!(rel_40_MSTORE->empty()) && !(rel_356_ABIEncodedArrayWriteTo->empty()) && !(rel_440_delta_PossibleArrayLoose->empty()) && !(rel_223_Variable_NumericValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt,rel_223_Variable_NumericValue->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt,rel_440_delta_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_356_ABIEncodedArrayWriteTo) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_223_Variable_NumericValue->lowerUpperRange_12(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast(env0[3])}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_223_Variable_NumericValue_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[3]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_356_ABIEncodedArrayWriteTo->lowerUpperRange_0111(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env2[1])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env4 : range) {
if( rel_440_delta_PossibleArrayLoose->contains(Tuple<RamDomain,1>{{ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_440_delta_PossibleArrayLoose_op_ctxt)) && !(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->contains(Tuple<RamDomain,5>{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env4[1]),ramBitCast(env0[3]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env4[1]),ramBitCast(env0[3]),ramBitCast(env2[1])}};
rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->insert(tuple,READ_OP_CONTEXT(rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt));
}
}
}
}
}
}
}
}
();}
if(rel_426_new_IsRegularArrayVar->empty() && rel_429_new_IsRawDataArrayVar->empty() && rel_432_new_Array_ElementLength->empty() && rel_435_new_ArrayVarLengthVar->empty() && rel_438_new_ArrayDataStartVar->empty() && rel_441_new_PossibleArrayLoose->empty() && rel_444_new_ArrayActualArg->empty() && rel_447_new_ArrayFormalRet->empty() && rel_450_new_RegularArrayVarsInSameClass->empty() && rel_453_new_StructContainsArray->empty() && rel_456_new_ABIEncodedArrayIncludesArray->empty() && rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_426_new_IsRegularArrayVar_op_ctxt,rel_426_new_IsRegularArrayVar->createContext());
for(const auto& env0 : *rel_426_new_IsRegularArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_424_IsRegularArrayVar->insert(tuple,READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt));
}
}
();std::swap(rel_425_delta_IsRegularArrayVar, rel_426_new_IsRegularArrayVar);
rel_426_new_IsRegularArrayVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_429_new_IsRawDataArrayVar_op_ctxt,rel_429_new_IsRawDataArrayVar->createContext());
for(const auto& env0 : *rel_429_new_IsRawDataArrayVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_427_IsRawDataArrayVar->insert(tuple,READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt));
}
}
();std::swap(rel_428_delta_IsRawDataArrayVar, rel_429_new_IsRawDataArrayVar);
rel_429_new_IsRawDataArrayVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_432_new_Array_ElementLength_op_ctxt,rel_432_new_Array_ElementLength->createContext());
for(const auto& env0 : *rel_432_new_Array_ElementLength) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_430_Array_ElementLength->insert(tuple,READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt));
}
}
();std::swap(rel_431_delta_Array_ElementLength, rel_432_new_Array_ElementLength);
rel_432_new_Array_ElementLength->purge();
[&](){
CREATE_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt,rel_433_ArrayVarLengthVar->createContext());
CREATE_OP_CONTEXT(rel_435_new_ArrayVarLengthVar_op_ctxt,rel_435_new_ArrayVarLengthVar->createContext());
for(const auto& env0 : *rel_435_new_ArrayVarLengthVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_433_ArrayVarLengthVar->insert(tuple,READ_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt));
}
}
();std::swap(rel_434_delta_ArrayVarLengthVar, rel_435_new_ArrayVarLengthVar);
rel_435_new_ArrayVarLengthVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_438_new_ArrayDataStartVar_op_ctxt,rel_438_new_ArrayDataStartVar->createContext());
for(const auto& env0 : *rel_438_new_ArrayDataStartVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_436_ArrayDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
}
}
();std::swap(rel_437_delta_ArrayDataStartVar, rel_438_new_ArrayDataStartVar);
rel_438_new_ArrayDataStartVar->purge();
[&](){
CREATE_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt,rel_439_PossibleArrayLoose->createContext());
CREATE_OP_CONTEXT(rel_441_new_PossibleArrayLoose_op_ctxt,rel_441_new_PossibleArrayLoose->createContext());
for(const auto& env0 : *rel_441_new_PossibleArrayLoose) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_439_PossibleArrayLoose->insert(tuple,READ_OP_CONTEXT(rel_439_PossibleArrayLoose_op_ctxt));
}
}
();std::swap(rel_440_delta_PossibleArrayLoose, rel_441_new_PossibleArrayLoose);
rel_441_new_PossibleArrayLoose->purge();
[&](){
CREATE_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt,rel_442_ArrayActualArg->createContext());
CREATE_OP_CONTEXT(rel_444_new_ArrayActualArg_op_ctxt,rel_444_new_ArrayActualArg->createContext());
for(const auto& env0 : *rel_444_new_ArrayActualArg) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_442_ArrayActualArg->insert(tuple,READ_OP_CONTEXT(rel_442_ArrayActualArg_op_ctxt));
}
}
();std::swap(rel_443_delta_ArrayActualArg, rel_444_new_ArrayActualArg);
rel_444_new_ArrayActualArg->purge();
[&](){
CREATE_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt,rel_445_ArrayFormalRet->createContext());
CREATE_OP_CONTEXT(rel_447_new_ArrayFormalRet_op_ctxt,rel_447_new_ArrayFormalRet->createContext());
for(const auto& env0 : *rel_447_new_ArrayFormalRet) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_445_ArrayFormalRet->insert(tuple,READ_OP_CONTEXT(rel_445_ArrayFormalRet_op_ctxt));
}
}
();std::swap(rel_446_delta_ArrayFormalRet, rel_447_new_ArrayFormalRet);
rel_447_new_ArrayFormalRet->purge();
[&](){
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_450_new_RegularArrayVarsInSameClass_op_ctxt,rel_450_new_RegularArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_450_new_RegularArrayVarsInSameClass) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_448_RegularArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt));
}
}
();std::swap(rel_449_delta_RegularArrayVarsInSameClass, rel_450_new_RegularArrayVarsInSameClass);
rel_450_new_RegularArrayVarsInSameClass->purge();
[&](){
CREATE_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt,rel_451_StructContainsArray->createContext());
CREATE_OP_CONTEXT(rel_453_new_StructContainsArray_op_ctxt,rel_453_new_StructContainsArray->createContext());
for(const auto& env0 : *rel_453_new_StructContainsArray) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_451_StructContainsArray->insert(tuple,READ_OP_CONTEXT(rel_451_StructContainsArray_op_ctxt));
}
}
();std::swap(rel_452_delta_StructContainsArray, rel_453_new_StructContainsArray);
rel_453_new_StructContainsArray->purge();
[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_456_new_ABIEncodedArrayIncludesArray_op_ctxt,rel_456_new_ABIEncodedArrayIncludesArray->createContext());
for(const auto& env0 : *rel_456_new_ABIEncodedArrayIncludesArray) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_454_ABIEncodedArrayIncludesArray->insert(tuple,READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt));
}
}
();std::swap(rel_455_delta_ABIEncodedArrayIncludesArray, rel_456_new_ABIEncodedArrayIncludesArray);
rel_456_new_ABIEncodedArrayIncludesArray->purge();
[&](){
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->insert(tuple,READ_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt));
}
}
();std::swap(rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex, rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex);
rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->purge();
iter++;
}
iter = 0;
rel_425_delta_IsRegularArrayVar->purge();
rel_426_new_IsRegularArrayVar->purge();
rel_428_delta_IsRawDataArrayVar->purge();
rel_429_new_IsRawDataArrayVar->purge();
rel_431_delta_Array_ElementLength->purge();
rel_432_new_Array_ElementLength->purge();
rel_434_delta_ArrayVarLengthVar->purge();
rel_435_new_ArrayVarLengthVar->purge();
rel_437_delta_ArrayDataStartVar->purge();
rel_438_new_ArrayDataStartVar->purge();
rel_440_delta_PossibleArrayLoose->purge();
rel_441_new_PossibleArrayLoose->purge();
rel_443_delta_ArrayActualArg->purge();
rel_444_new_ArrayActualArg->purge();
rel_446_delta_ArrayFormalRet->purge();
rel_447_new_ArrayFormalRet->purge();
rel_449_delta_RegularArrayVarsInSameClass->purge();
rel_450_new_RegularArrayVarsInSameClass->purge();
rel_452_delta_StructContainsArray->purge();
rel_453_new_StructContainsArray->purge();
rel_455_delta_ABIEncodedArrayIncludesArray->purge();
rel_456_new_ABIEncodedArrayIncludesArray->purge();
rel_458_delta_ABIEncodedArrayIncludesArrayAtConcreteIndex->purge();
rel_459_new_ABIEncodedArrayIncludesArrayAtConcreteIndex->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\tfun\tindex\tkind"},{"auxArity","0"},{"name","ArrayActualArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"caller\", \"fun\", \"index\", \"kind\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_442_ArrayActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_90_RETURNDATACOPY->purge();
if (pruneImdtRels) rel_420_StructLoad->purge();
if (pruneImdtRels) rel_223_Variable_NumericValue->purge();
if (pruneImdtRels) rel_52_ADDFixx->purge();
if (pruneImdtRels) rel_378_IsCallDataArrayVar->purge();
if (pruneImdtRels) rel_302_IsABIEncodedArrayVar->purge();
if (pruneImdtRels) rel_375_ArgArrayLenWrittenTo->purge();
if (pruneImdtRels) rel_439_PossibleArrayLoose->purge();
if (pruneImdtRels) rel_442_ArrayActualArg->purge();
if (pruneImdtRels) rel_445_ArrayFormalRet->purge();
if (pruneImdtRels) rel_297_PossibleArrayAlias->purge();
if (pruneImdtRels) rel_451_StructContainsArray->purge();
if (pruneImdtRels) rel_416_StructArg->purge();
if (pruneImdtRels) rel_308_ABIEncodedArrayReadByStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"??",arrayLengthVar) :- 
   IsRegularArrayVar(array),
   MSTORE(mstore,array,arrayLengthVar),
   !Array_ElementLength(array,_).
in file arrays.dl [403:1-406:34])_");
if(!(rel_424_IsRegularArrayVar->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_424_IsRegularArrayVar) {
if( !(!rel_430_Array_ElementLength->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt)).empty())) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(53)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,elementSize,arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarTimesConstant(arrayLengthVar,elementSize,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [432:1-441:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,elementSize,arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   VarTimesConstant(arrayLengthVar,elementSize,arraySizeBytes),
   ADDFix(_,arraySizeBytes,arrayStart,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [446:1-455:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_381_VarTimesConstant->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [463:1-473:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(24)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength1),
   VarPlusThrirtyOneAndNotThirtyOne(arraySizeBytesPlusLength1,arraySizeBytesPlusLength2),
   ADDFix(_,arraySizeBytesPlusLength2,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [475:1-486:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_379_VarPlusThrirtyOneAndNotThirtyOne->empty()) && !(rel_40_MSTORE->empty()) && !(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt,rel_379_VarPlusThrirtyOneAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_379_VarPlusThrirtyOneAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_379_VarPlusThrirtyOneAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env6[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(24)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   VarPlusThirtyTwo(arraySizeBytes,arraySizeBytesPlusLength),
   ADDFix(_,arraySizeBytesPlusLength,array,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [488:1-497:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(24)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   VarPlusThirtyTwo(arrayPlusSizeBytes,updatedFMP),
   Statement_Uses(mstore,updatedFMP,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [499:1-508:25])_");
if(!(rel_40_MSTORE->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_382_VarPlusThrirtyOneDivMulSixtyFour->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_50_PossibleArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt,rel_382_VarPlusThrirtyOneDivMulSixtyFour->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_382_VarPlusThrirtyOneDivMulSixtyFour->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_382_VarPlusThrirtyOneDivMulSixtyFour_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(24)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   RETURNDATASIZEOfCALL(_,arrayLengthVar,call),
   MSTORE(_,array,arrayLengthVar),
   VarPlusThirtyTwo(array,arrayStart),
   RETURNDATACOPYAllDataOfCALL(_,arrayStart,call),
   RETURNDATASIZEOfCALL(_,arrayLengthVarAlt,call),
   VarPlusSixtyThreeAndNotThirtyOne(arrayLengthVarAlt,arraySizeBytes),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [534:1-546:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_166_RETURNDATACOPYAllDataOfCALL->empty()) && !(rel_300_VarPlusSixtyThreeAndNotThirtyOne->empty()) && !(rel_165_RETURNDATASIZEOfCALL->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt,rel_165_RETURNDATASIZEOfCALL->createContext());
CREATE_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt,rel_166_RETURNDATACOPYAllDataOfCALL->createContext());
CREATE_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt,rel_300_VarPlusSixtyThreeAndNotThirtyOne->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_165_RETURNDATASIZEOfCALL) {
auto range = rel_40_MSTORE->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
if( !rel_166_RETURNDATACOPYAllDataOfCALL->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_166_RETURNDATACOPYAllDataOfCALL_op_ctxt)).empty()) {
auto range = rel_165_RETURNDATASIZEOfCALL->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_165_RETURNDATASIZEOfCALL_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_300_VarPlusSixtyThreeAndNotThirtyOne->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_300_VarPlusSixtyThreeAndNotThirtyOne_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env6[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env6[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(24)),ramBitCast(env0[1])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
}
}
}
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayAllocationInternal(mstore,array,"0x1",arrayLengthVar) :- 
   PossibleArray(array),
   MSTORE(_,array,arrayLengthVar),
   Variable_Value(arrayLengthVar,constantLengthVal),
   ADDFix(_,arraySizeBytes,array,arrayPlusSizeBytes),
   Variable_Value(arraySizeBytes,sizeBytesVal),
   constantLengthVal != "0x0",
   @sub_256(sizeBytesVal,"0x20") != "0x0",
   @div_256(@sub_256(sizeBytesVal,"0x20"),constantLengthVal) != "0x0",
   Statement_Uses(mstore,arrayPlusSizeBytes,1),
   MSTOREFreePtr(mstore).
in file arrays.dl [511:1-525:25])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_50_PossibleArray->empty()) && !(rel_211_Variable_Value->empty()) && !(rel_9_ADDFix->empty()) && !(rel_41_MSTOREFreePtr->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
for(const auto& env0 : *rel_50_PossibleArray) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env4 : range) {
if( (ramBitCast<RamDomain>(symTable.encode(functors::div_256(symTable.decode(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))).c_str(),symTable.decode(env2[1]).c_str()))) != ramBitCast<RamDomain>(RamSigned(5))) && (ramBitCast<RamDomain>(symTable.encode(functors::sub_256(symTable.decode(env4[1]).c_str(),symTable.decode(RamSigned(36)).c_str()))) != ramBitCast<RamDomain>(RamSigned(5)))) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
if( rel_41_MSTOREFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env5[0]),ramBitCast(env0[0]),ramBitCast(RamSigned(24)),ramBitCast(env1[2])}};
rel_460_ArrayAllocationInternal->insert(tuple,READ_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_379_VarPlusThrirtyOneAndNotThirtyOne->purge();
if (pruneImdtRels) rel_300_VarPlusSixtyThreeAndNotThirtyOne->purge();
if (pruneImdtRels) rel_382_VarPlusThrirtyOneDivMulSixtyFour->purge();
if (pruneImdtRels) rel_50_PossibleArray->purge();
if (pruneImdtRels) rel_166_RETURNDATACOPYAllDataOfCALL->purge();
if (pruneImdtRels) rel_165_RETURNDATASIZEOfCALL->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayHasConstantLength(arrayVar,@hex_to_number(arrLenHex)) :- 
   ArrayAllocationInternal(_,arrayVar,_,arrayLengthVar),
   Variable_Value(arrayLengthVar,arrLenHex),
   @hex_to_number(arrLenHex) < (2**28).
in file arrays.dl [379:1-383:19])_");
if(!(rel_460_ArrayAllocationInternal->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_460_ArrayAllocationInternal_op_ctxt,rel_460_ArrayAllocationInternal->createContext());
CREATE_OP_CONTEXT(rel_461_ArrayHasConstantLength_op_ctxt,rel_461_ArrayHasConstantLength->createContext());
for(const auto& env0 : *rel_460_ArrayAllocationInternal) {
auto range = rel_211_Variable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) < ramBitCast<RamSigned>(static_cast<RamSigned>(static_cast<RamSigned>(std::pow(ramBitCast<RamSigned>(RamSigned(2)), ramBitCast<RamSigned>(RamSigned(28)))))))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_461_ArrayHasConstantLength->insert(tuple,READ_OP_CONTEXT(rel_461_ArrayHasConstantLength_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_460_ArrayAllocationInternal->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,index) :- 
   Array_ElementLength(array,elementSize),
   ADDFix(_,var,array,indexVar),
   VarPlusThirtyTwo(other,var),
   VarTimesConstant(index,elementSize,other).
in file arrays.dl [166:1-170:47])_");
if(!(rel_9_ADDFix->empty()) && !(rel_38_VarPlusThirtyTwo->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_381_VarTimesConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env3[0])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,index) :- 
   Array_ElementLength(array,elementSize),
   VarTimesConstant(index,elementSize,other),
   ADDFix(_,other,array,temp),
   VarPlusThirtyTwo(temp,indexVar).
in file arrays.dl [172:1-176:36])_");
if(!(rel_381_VarTimesConstant->empty()) && !(rel_9_ADDFix->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast(env1[0])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,index) :- 
   Array_ElementLength(array,elementSize),
   VarPlusThirtyTwo(array,arrayStart),
   ADDFix(_,indexTimesSize,arrayStart,indexVar),
   VarTimesConstant(index,elementSize,indexTimesSize).
in file arrays.dl [178:1-182:56])_");
if(!(rel_38_VarPlusThirtyTwo->empty()) && !(rel_9_ADDFix->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_381_VarTimesConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
auto range = rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[3]),ramBitCast(env3[0])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,index) :- 
   Array_ElementLength(array,elementSize),
   ArrayDataStartVar(array,dataStartVar),
   ADDFix(_,dataStartVar,indexTimesCons,indexVar),
   VarTimesConstant(index,elementSize,indexTimesCons).
in file arrays.dl [184:1-188:56])_");
if(!(rel_436_ArrayDataStartVar->empty()) && !(rel_9_ADDFix->empty()) && !(rel_430_Array_ElementLength->empty()) && !(rel_381_VarTimesConstant->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt,rel_381_VarTimesConstant->createContext());
CREATE_OP_CONTEXT(rel_430_Array_ElementLength_op_ctxt,rel_430_Array_ElementLength->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_430_Array_ElementLength) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_9_ADDFix->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_381_VarTimesConstant->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_381_VarTimesConstant_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[3]),ramBitCast(env3[0])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,actualIndexVar) :- 
   ADDFix(_,baseVar,actualIndexVar,tmp),
   VarPlusConst(tmp,const,indexVar),
   Variable_SymbolicValue(baseVar,baseVal),
   FreePointerBasedValuesNumDiffNoMemReuse(arrayVal,baseVal, _tmp_0),
   Variable_SymbolicValue(array,arrayVal),
   IsRegularArrayVar(array),
   Statement_Defines(stmt2,indexVar,_),
   Statement_Block(stmt2,block2),
   Statement_Defines(stmt1,array,_),
   Statement_Block(stmt1,block1),
   Dominates(block1,block2),
    _tmp_0 = (@hex_to_number(const)-32).
in file arrays.dl [202:1-214:73])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_9_ADDFix->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_424_IsRegularArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_125_Dominates->empty()) && !(rel_31_VarPlusConst->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt,rel_31_VarPlusConst->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_31_VarPlusConst->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(32))))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(32))))}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env7 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env7[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env7[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env8 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env8[1]),ramBitCast(env6[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env4[0]),ramBitCast(env1[2]),ramBitCast(env0[2])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayIndexAccess(array,indexVar,actualIndexVar) :- 
   ADDFix(_,baseVar,actualIndexVar,tmp),
   VarPlusConst(tmp,const,indexVar),
   Variable_SymbolicValue(baseVar,baseVal),
   FreePointerBasedValuesNumDiffNoMemReuse(arrayVal,baseVal, _tmp_1),
   Variable_SymbolicValue(array,arrayVal),
   IsRegularArrayVar(array),
   Statement_Defines(stmt2,indexVar,_),
   Statement_Block(stmt2,_),
   Statement_Defines(stmt1,array,_),
   Statement_Block(stmt1,_),
   LocalStatementPathInBlock(stmt1,stmt2),
    _tmp_1 = (@hex_to_number(const)-32).
in file arrays.dl [202:1-214:73])_");
if(!(rel_147_LocalStatementPathInBlock->empty()) && !(rel_9_ADDFix->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_377_FreePointerBasedValuesNumDiffNoMemReuse->empty()) && !(rel_424_IsRegularArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_31_VarPlusConst->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt,rel_31_VarPlusConst->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt,rel_377_FreePointerBasedValuesNumDiffNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
auto range = rel_31_VarPlusConst->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_31_VarPlusConst_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_377_FreePointerBasedValuesNumDiffNoMemReuse->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(32))))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast((ramBitCast<RamSigned>(functors::hex_to_number(symTable.decode(env1[1]).c_str())) - ramBitCast<RamSigned>(RamSigned(32))))}},READ_OP_CONTEXT(rel_377_FreePointerBasedValuesNumDiffNoMemReuse_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env6 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty() && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env6[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env4[0]),ramBitCast(env1[2]),ramBitCast(env0[2])}};
rel_462_ArrayIndexAccess->insert(tuple,READ_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt));
}
}
}
}
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_9_ADDFix->purge();
if (pruneImdtRels) rel_38_VarPlusThirtyTwo->purge();
if (pruneImdtRels) rel_31_VarPlusConst->purge();
if (pruneImdtRels) rel_381_VarTimesConstant->purge();
if (pruneImdtRels) rel_377_FreePointerBasedValuesNumDiffNoMemReuse->purge();
if (pruneImdtRels) rel_430_Array_ElementLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemArrayPut(mstore,array,index,from) :- 
   ArrayIndexAccess(array,indexVar,index),
   MSTORE(mstore,indexVar,from).
in file arrays.dl [216:1-218:34])_");
if(!(rel_462_ArrayIndexAccess->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
CREATE_OP_CONTEXT(rel_463_MemArrayPut_op_ctxt,rel_463_MemArrayPut->createContext());
for(const auto& env0 : *rel_462_ArrayIndexAccess) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_463_MemArrayPut->insert(tuple,READ_OP_CONTEXT(rel_463_MemArrayPut_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADMSTORESameAddrVar(store,load) :- 
   MSTORE(store,var,_),
   MLOAD(load,var,_).
in file misc.dl [127:1-129:23])_");
if(!(rel_40_MSTORE->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_44_MLOADMSTORESameAddrVar_op_ctxt,rel_44_MLOADMSTORESameAddrVar->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_44_MLOADMSTORESameAddrVar->insert(tuple,READ_OP_CONTEXT(rel_44_MLOADMSTORESameAddrVar_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemArrayGet(mload,array,index,to) :- 
   ArrayIndexAccess(array,indexVar,index),
   MLOAD(mload,indexVar,to).
in file arrays.dl [221:1-223:30])_");
if(!(rel_462_ArrayIndexAccess->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
CREATE_OP_CONTEXT(rel_464_MemArrayGet_op_ctxt,rel_464_MemArrayGet->createContext());
for(const auto& env0 : *rel_462_ArrayIndexAccess) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_464_MemArrayGet->insert(tuple,READ_OP_CONTEXT(rel_464_MemArrayGet_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CallDataArrayGet(stmt,array,index,to) :- 
   ArrayIndexAccess(array,indexVar,index),
   CALLDATALOAD(stmt,indexVar,to).
in file arrays.dl [233:1-235:36])_");
if(!(rel_462_ArrayIndexAccess->empty()) && !(rel_92_CALLDATALOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_462_ArrayIndexAccess_op_ctxt,rel_462_ArrayIndexAccess->createContext());
CREATE_OP_CONTEXT(rel_465_CallDataArrayGet_op_ctxt,rel_465_CallDataArrayGet->createContext());
for(const auto& env0 : *rel_462_ArrayIndexAccess) {
auto range = rel_92_CALLDATALOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[2])}};
rel_465_CallDataArrayGet->insert(tuple,READ_OP_CONTEXT(rel_465_CallDataArrayGet_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_462_ArrayIndexAccess->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATALOADArrayRelated(stmt) :- 
   CallDataLoadReadsLength(_,stmt,_,_,_).
in file metrics.dl [239:1-241:35])_");
if(!(rel_374_CallDataLoadReadsLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_374_CallDataLoadReadsLength_op_ctxt,rel_374_CallDataLoadReadsLength->createContext());
CREATE_OP_CONTEXT(rel_466_CALLDATALOADArrayRelated_op_ctxt,rel_466_CALLDATALOADArrayRelated->createContext());
for(const auto& env0 : *rel_374_CallDataLoadReadsLength) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_466_CALLDATALOADArrayRelated->insert(tuple,READ_OP_CONTEXT(rel_466_CALLDATALOADArrayRelated_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLDATALOADArrayRelated(stmt) :- 
   CallDataArrayGet(stmt,_,_,_).
in file metrics.dl [239:1-241:35])_");
if(!(rel_465_CallDataArrayGet->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_465_CallDataArrayGet_op_ctxt,rel_465_CallDataArrayGet->createContext());
CREATE_OP_CONTEXT(rel_466_CALLDATALOADArrayRelated_op_ctxt,rel_466_CALLDATALOADArrayRelated->createContext());
for(const auto& env0 : *rel_465_CallDataArrayGet) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_466_CALLDATALOADArrayRelated->insert(tuple,READ_OP_CONTEXT(rel_466_CALLDATALOADArrayRelated_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_374_CallDataLoadReadsLength->purge();
if (pruneImdtRels) rel_465_CallDataArrayGet->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single14(@generator_0) :- 
   @generator_0 = count : { CALLDATALOADArrayRelated(+underscore_898) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_466_CALLDATALOADArrayRelated_op_ctxt,rel_466_CALLDATALOADArrayRelated->createContext());
CREATE_OP_CONTEXT(rel_467_agg_single14_op_ctxt,rel_467_agg_single14->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_466_CALLDATALOADArrayRelated->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_467_agg_single14->insert(tuple,READ_OP_CONTEXT(rel_467_agg_single14_op_ctxt));
}
}
();if (pruneImdtRels) rel_466_CALLDATALOADArrayRelated->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Verbatim_CDLAllVSStaticVSArr(z,z1,z0) :- 
   __agg_single13(z),
   __agg_single14(z0),
   __agg_single15(z1).
in file metrics.dl [244:1-247:48])_");
if(!(rel_467_agg_single14->empty()) && !(rel_394_agg_single15->empty()) && !(rel_93_agg_single13->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_93_agg_single13_op_ctxt,rel_93_agg_single13->createContext());
CREATE_OP_CONTEXT(rel_394_agg_single15_op_ctxt,rel_394_agg_single15->createContext());
CREATE_OP_CONTEXT(rel_467_agg_single14_op_ctxt,rel_467_agg_single14->createContext());
CREATE_OP_CONTEXT(rel_468_Verbatim_CDLAllVSStaticVSArr_op_ctxt,rel_468_Verbatim_CDLAllVSStaticVSArr->createContext());
for(const auto& env0 : *rel_93_agg_single13) {
for(const auto& env1 : *rel_467_agg_single14) {
for(const auto& env2 : *rel_394_agg_single15) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0]),ramBitCast(env1[0])}};
rel_468_Verbatim_CDLAllVSStaticVSArr->insert(tuple,READ_OP_CONTEXT(rel_468_Verbatim_CDLAllVSStaticVSArr_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","allnum\tstaticAddr\tarrGet"},{"auxArity","0"},{"name","Verbatim_CDLAllVSStaticVSArr"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"allnum\", \"staticAddr\", \"arrGet\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_468_Verbatim_CDLAllVSStaticVSArr);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_93_agg_single13->purge();
if (pruneImdtRels) rel_467_agg_single14->purge();
if (pruneImdtRels) rel_394_agg_single15->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(arrayClassRep.LoadInBlock(arrVar,mload,block) :- 
   RegularArrayVarsInSameClass(arrVar,_),
   Statement_Defines(mload,arrVar,_),
   Statement_Block(mload,block).
in file components.dl [357:3-360:36])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
for(const auto& env0 : *rel_448_RegularArrayVarsInSameClass) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[1])}};
rel_469_arrayClassRep_LoadInBlock->insert(tuple,READ_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(arrayClassRep.LoadInBlock(arrVar,mload,block) :- 
   RegularArrayVarsInSameClass(_,arrVar),
   Statement_Defines(mload,arrVar,_),
   Statement_Block(mload,block).
in file components.dl [357:3-360:36])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
for(const auto& env0 : *rel_448_RegularArrayVarsInSameClass) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[0]),ramBitCast(env2[1])}};
rel_469_arrayClassRep_LoadInBlock->insert(tuple,READ_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(arrayClassRep.DominatesInClass(var1,var2,load1,load2) :- 
   arrayClassRep.LoadInBlock(var1,load1,block),
   RegularArrayVarsInSameClass(var1,var2),
   arrayClassRep.LoadInBlock(var2,load2,block),
   LocalStatementPathInBlock(load1,load2),
   load1 != load2.
in file components.dl [362:3-367:20])_");
if(!(rel_469_arrayClassRep_LoadInBlock->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty()) && !(rel_147_LocalStatementPathInBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt,rel_470_arrayClassRep_DominatesInClass->createContext());
for(const auto& env0 : *rel_469_arrayClassRep_LoadInBlock) {
auto range = rel_448_RegularArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_469_arrayClassRep_LoadInBlock->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env2[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_470_arrayClassRep_DominatesInClass->insert(tuple,READ_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(arrayClassRep.DominatesInClass(arrVar1,arrVar2,mload1,mload2) :- 
   arrayClassRep.LoadInBlock(arrVar1,mload1,block1),
   RegularArrayVarsInSameClass(arrVar1,arrVar2),
   arrayClassRep.LoadInBlock(arrVar2,mload2,block2),
   Dominates(block1,block2),
   mload1 != mload2,
   block1 != block2.
in file components.dl [369:3-375:22])_");
if(!(rel_469_arrayClassRep_LoadInBlock->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt,rel_470_arrayClassRep_DominatesInClass->createContext());
for(const auto& env0 : *rel_469_arrayClassRep_LoadInBlock) {
auto range = rel_448_RegularArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_469_arrayClassRep_LoadInBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(env2[2])) && rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_470_arrayClassRep_DominatesInClass->insert(tuple,READ_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(arrayClassRep.DominatesAllInClass(arrVar,mload) :- 
   arrayClassRep.LoadInBlock(arrVar,mload,_),
   !arrayClassRep.DominatesInClass(_,arrVar,_,mload).
in file components.dl [377:3-379:44])_");
if(!(rel_469_arrayClassRep_LoadInBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt,rel_470_arrayClassRep_DominatesInClass->createContext());
CREATE_OP_CONTEXT(rel_471_arrayClassRep_DominatesAllInClass_op_ctxt,rel_471_arrayClassRep_DominatesAllInClass->createContext());
for(const auto& env0 : *rel_469_arrayClassRep_LoadInBlock) {
if( !(!rel_470_arrayClassRep_DominatesInClass->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_470_arrayClassRep_DominatesInClass_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_471_arrayClassRep_DominatesAllInClass->insert(tuple,READ_OP_CONTEXT(rel_471_arrayClassRep_DominatesAllInClass_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_470_arrayClassRep_DominatesInClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(arrayClassRep.Var_ClassRep(arrVar,classRep) :- 
   arrayClassRep.DominatesAllInClass(classRep,_),
   RegularArrayVarsInSameClass(arrVar,classRep).
in file components.dl [381:3-383:35])_");
if(!(rel_471_arrayClassRep_DominatesAllInClass->empty()) && !(rel_448_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_471_arrayClassRep_DominatesAllInClass_op_ctxt,rel_471_arrayClassRep_DominatesAllInClass->createContext());
CREATE_OP_CONTEXT(rel_472_arrayClassRep_Var_ClassRep_op_ctxt,rel_472_arrayClassRep_Var_ClassRep->createContext());
for(const auto& env0 : *rel_471_arrayClassRep_DominatesAllInClass) {
auto range = rel_448_RegularArrayVarsInSameClass->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_472_arrayClassRep_Var_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_472_arrayClassRep_Var_ClassRep_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(arrayClassRep.Var_ClassRep(arrVar,arrVar) :- 
   RegularArrayVarsInSameClass(arrVar,arrVar),
   !arrayClassRep.LoadInBlock(arrVar,_,_).
in file components.dl [386:3-388:32])_");
if(!(rel_448_RegularArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_448_RegularArrayVarsInSameClass_op_ctxt,rel_448_RegularArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt,rel_469_arrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_472_arrayClassRep_Var_ClassRep_op_ctxt,rel_472_arrayClassRep_Var_ClassRep->createContext());
for(const auto& env0 : *rel_448_RegularArrayVarsInSameClass) {
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[1])) && !(!rel_469_arrayClassRep_LoadInBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_469_arrayClassRep_LoadInBlock_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_472_arrayClassRep_Var_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_472_arrayClassRep_Var_ClassRep_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_448_RegularArrayVarsInSameClass->purge();
if (pruneImdtRels) rel_469_arrayClassRep_LoadInBlock->purge();
if (pruneImdtRels) rel_471_arrayClassRep_DominatesAllInClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RegularArrayVar_ClassRep(arrVar,as(arrVarRep, ArrayVariable)) :- 
   arrayClassRep.Var_ClassRep(arrVar,arrVarRep).
in file arrays.dl [817:1-818:49])_");
if(!(rel_472_arrayClassRep_Var_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_472_arrayClassRep_Var_ClassRep_op_ctxt,rel_472_arrayClassRep_Var_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
for(const auto& env0 : *rel_472_arrayClassRep_Var_ClassRep) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_473_RegularArrayVar_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_472_arrayClassRep_Var_ClassRep->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LOGStatement(stmt,0) :- 
   Statement_Opcode(stmt,"LOG0").
in file tac_instructions.dl [309:1-310:34])_");
if(!(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(54))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(54))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(0))}};
rel_4_LOGStatement->insert(tuple,READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(LOGStatement(stmt,1) :- 
   Statement_Opcode(stmt,"LOG1").
in file tac_instructions.dl [312:1-313:34])_");
if(!(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(55))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(55))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(1))}};
rel_4_LOGStatement->insert(tuple,READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(LOGStatement(stmt,2) :- 
   Statement_Opcode(stmt,"LOG2").
in file tac_instructions.dl [315:1-316:34])_");
if(!(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(56))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(56))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(2))}};
rel_4_LOGStatement->insert(tuple,READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(LOGStatement(stmt,3) :- 
   Statement_Opcode(stmt,"LOG3").
in file tac_instructions.dl [318:1-319:34])_");
if(!(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(57))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(57))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(3))}};
rel_4_LOGStatement->insert(tuple,READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(LOGStatement(stmt,4) :- 
   Statement_Opcode(stmt,"LOG4").
in file tac_instructions.dl [321:1-322:34])_");
if(!(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(58))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(58))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(4))}};
rel_4_LOGStatement->insert(tuple,READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(NonUniqueMLOADMSTOREForAddrVar(store,load) :- 
   MLOADMSTORESameAddrVar(store,load),
   MLOADMSTORESameAddrVar(store2,load),
   store != store2.
in file misc.dl [132:1-135:19])_");
if(!(rel_44_MLOADMSTORESameAddrVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_44_MLOADMSTORESameAddrVar_op_ctxt,rel_44_MLOADMSTORESameAddrVar->createContext());
CREATE_OP_CONTEXT(rel_45_NonUniqueMLOADMSTOREForAddrVar_op_ctxt,rel_45_NonUniqueMLOADMSTOREForAddrVar->createContext());
for(const auto& env0 : *rel_44_MLOADMSTORESameAddrVar) {
auto range = rel_44_MLOADMSTORESameAddrVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_44_MLOADMSTORESameAddrVar_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_45_NonUniqueMLOADMSTOREForAddrVar->insert(tuple,READ_OP_CONTEXT(rel_45_NonUniqueMLOADMSTOREForAddrVar_op_ctxt));
break;
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayStoreAtIndex(mstore,arrVarRep,index,from) :- 
   MemArrayPut(mstore,array,index,from),
   RegularArrayVar_ClassRep(array,arrVarRep).
in file arrays.dl [229:1-231:46])_");
if(!(rel_463_MemArrayPut->empty()) && !(rel_473_RegularArrayVar_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_463_MemArrayPut_op_ctxt,rel_463_MemArrayPut->createContext());
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
for(const auto& env0 : *rel_463_MemArrayPut) {
auto range = rel_473_RegularArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_474_ArrayStoreAtIndex->insert(tuple,READ_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_463_MemArrayPut->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayStoreI(stmt) :- 
   ArrayStoreAtIndex(stmt,_,_,_).
in file metrics.dl [125:1-125:54])_");
if(!(rel_474_ArrayStoreAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
CREATE_OP_CONTEXT(rel_475_ArrayStoreI_op_ctxt,rel_475_ArrayStoreI->createContext());
for(const auto& env0 : *rel_474_ArrayStoreAtIndex) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_475_ArrayStoreI->insert(tuple,READ_OP_CONTEXT(rel_475_ArrayStoreI_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single8(@generator_0) :- 
   @generator_0 = count : { ArrayStoreI(+underscore_925) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_475_ArrayStoreI_op_ctxt,rel_475_ArrayStoreI->createContext());
CREATE_OP_CONTEXT(rel_476_agg_single8_op_ctxt,rel_476_agg_single8->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_475_ArrayStoreI->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_476_agg_single8->insert(tuple,READ_OP_CONTEXT(rel_476_agg_single8_op_ctxt));
}
}
();if (pruneImdtRels) rel_475_ArrayStoreI->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_228(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayLoadAtIndex(mload,arrVarRep,index,to) :- 
   MemArrayGet(mload,array,index,to),
   RegularArrayVar_ClassRep(array,arrVarRep).
in file arrays.dl [225:1-227:46])_");
if(!(rel_464_MemArrayGet->empty()) && !(rel_473_RegularArrayVar_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_464_MemArrayGet_op_ctxt,rel_464_MemArrayGet->createContext());
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt,rel_477_ArrayLoadAtIndex->createContext());
for(const auto& env0 : *rel_464_MemArrayGet) {
auto range = rel_473_RegularArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_477_ArrayLoadAtIndex->insert(tuple,READ_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_464_MemArrayGet->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_229(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayLoadI(stmt) :- 
   ArrayLoadAtIndex(stmt,_,_,_).
in file metrics.dl [216:1-216:52])_");
if(!(rel_477_ArrayLoadAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt,rel_477_ArrayLoadAtIndex->createContext());
CREATE_OP_CONTEXT(rel_478_ArrayLoadI_op_ctxt,rel_478_ArrayLoadI->createContext());
for(const auto& env0 : *rel_477_ArrayLoadAtIndex) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_478_ArrayLoadI->insert(tuple,READ_OP_CONTEXT(rel_478_ArrayLoadI_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_230(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single20(@generator_0) :- 
   @generator_0 = count : { ArrayLoadI(+underscore_909) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_478_ArrayLoadI_op_ctxt,rel_478_ArrayLoadI->createContext());
CREATE_OP_CONTEXT(rel_479_agg_single20_op_ctxt,rel_479_agg_single20->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_478_ArrayLoadI->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_479_agg_single20->insert(tuple,READ_OP_CONTEXT(rel_479_agg_single20_op_ctxt));
}
}
();if (pruneImdtRels) rel_478_ArrayLoadI->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_231(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(assertVarIsArray.FromHasNoEdges(from) :- 
   IsRegularArrayVar(from),
   !RegularArrayVar_ClassRep(from,_).
in file components.dl [339:3-341:27])_");
if(!(rel_424_IsRegularArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_480_assertVarIsArray_FromHasNoEdges_op_ctxt,rel_480_assertVarIsArray_FromHasNoEdges->createContext());
for(const auto& env0 : *rel_424_IsRegularArrayVar) {
if( !(!rel_473_RegularArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_480_assertVarIsArray_FromHasNoEdges->insert(tuple,READ_OP_CONTEXT(rel_480_assertVarIsArray_FromHasNoEdges_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","from"},{"auxArity","0"},{"name","assertVarIsArray.FromHasNoEdges"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"from\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_480_assertVarIsArray_FromHasNoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_232(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(assertVarIsArray.FromHasTwoEdges(from) :- 
   RegularArrayVar_ClassRep(from,to1),
   RegularArrayVar_ClassRep(from,to2),
   to1 != to2.
in file components.dl [334:3-337:16])_");
if(!(rel_473_RegularArrayVar_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_481_assertVarIsArray_FromHasTwoEdges_op_ctxt,rel_481_assertVarIsArray_FromHasTwoEdges->createContext());
for(const auto& env0 : *rel_473_RegularArrayVar_ClassRep) {
auto range = rel_473_RegularArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env1[1]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_481_assertVarIsArray_FromHasTwoEdges->insert(tuple,READ_OP_CONTEXT(rel_481_assertVarIsArray_FromHasTwoEdges_op_ctxt));
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","from"},{"auxArity","0"},{"name","assertVarIsArray.FromHasTwoEdges"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"from\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_481_assertVarIsArray_FromHasTwoEdges);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_233(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayWriteToRelativeIndex(arrayVar,mstore,relativeIndex) :- 
   ArrayDataStartVar(arrayVar,arrayDataStartVar),
   Statement_Defines(stmt1,arrayVar,_),
   Statement_Block(stmt1,block1),
   Variable_SymbolicValue(arrayDataStartVar,arrayDataStartVal),
   FreePointerBasedValuesNumDiff(relIndexWriteVal,arrayDataStartVal,relativeIndex),
   Variable_SymbolicValue(relIndexWriteVar,relIndexWriteVal),
   Statement_Defines(stmt2,relIndexWriteVar,_),
   Statement_Block(stmt2,block2),
   Dominates(block1,block2),
   MSTORE(mstore,relIndexWriteVar,_).
in file arrays.dl [300:1-310:39])_");
if(!(rel_125_Dominates->empty()) && !(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_436_ArrayDataStartVar->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt,rel_482_ArrayWriteToRelativeIndex->createContext());
for(const auto& env0 : *rel_436_ArrayDataStartVar) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env6[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env7 : range) {
if( rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env2[1]),ramBitCast(env7[1])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env8 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env8[0]),ramBitCast(env4[2])}};
rel_482_ArrayWriteToRelativeIndex->insert(tuple,READ_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt));
}
break;
}
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayWriteToRelativeIndex(arrayVar,mstore,relativeIndex) :- 
   ArrayDataStartVar(arrayVar,arrayDataStartVar),
   Statement_Defines(stmt1,arrayVar,_),
   Statement_Block(stmt1,_),
   Variable_SymbolicValue(arrayDataStartVar,arrayDataStartVal),
   FreePointerBasedValuesNumDiff(relIndexWriteVal,arrayDataStartVal,relativeIndex),
   Variable_SymbolicValue(relIndexWriteVar,relIndexWriteVal),
   Statement_Defines(stmt2,relIndexWriteVar,_),
   Statement_Block(stmt2,_),
   LocalStatementPathInBlock(stmt1,stmt2),
   MSTORE(mstore,relIndexWriteVar,_).
in file arrays.dl [300:1-310:39])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_238_FreePointerBasedValuesNumDiff->empty()) && !(rel_147_LocalStatementPathInBlock->empty()) && !(rel_229_Variable_SymbolicValue->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_436_ArrayDataStartVar->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt,rel_238_FreePointerBasedValuesNumDiff->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt,rel_482_ArrayWriteToRelativeIndex->createContext());
for(const auto& env0 : *rel_436_ArrayDataStartVar) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty()) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_238_FreePointerBasedValuesNumDiff->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_238_FreePointerBasedValuesNumDiff_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[0])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env5 : range) {
if( !rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env5[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt)).empty() && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env5[0])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env6 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env6[0]),ramBitCast(env3[2])}};
rel_482_ArrayWriteToRelativeIndex->insert(tuple,READ_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","arrayVar\tmstore\trelativeIndex"},{"auxArity","0"},{"name","ArrayWriteToRelativeIndex"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"arrayVar\", \"mstore\", \"relativeIndex\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Statement\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_482_ArrayWriteToRelativeIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_238_FreePointerBasedValuesNumDiff->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_234(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RawDataArrayVarsInSameClass(arrVar1,arrVar1) :- 
   IsRawDataArrayVar(arrVar1).
in file arrays.dl [785:1-786:30])_");
if(!(rel_427_IsRawDataArrayVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_427_IsRawDataArrayVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_483_RawDataArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(RawDataArrayVarsInSameClass(arrVar1,arrVar2) :- 
   IsRawDataArrayVar(arrVar1),
   Variable_SymbolicValue(arrVar1,val1),
   FreePointerBasedValuesEqual(val1,val2),
   FreePointerBasedValue(val1,mload1,_,_),
   FreePointerBasedValue(val2,mload2,_,_),
   MLOADSFreePtrUnchangedNoMemReuse(mload1,mload2),
   Variable_SymbolicValue(arrVar2,val2).
in file arrays.dl [788:1-796:41])_");
if(!(rel_157_MLOADSFreePtrUnchangedNoMemReuse->empty()) && !(rel_295_FreePointerBasedValuesEqual->empty()) && !(rel_232_FreePointerBasedValue->empty()) && !(rel_427_IsRawDataArrayVar->empty()) && !(rel_229_Variable_SymbolicValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt,rel_157_MLOADSFreePtrUnchangedNoMemReuse->createContext());
CREATE_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt,rel_229_Variable_SymbolicValue->createContext());
CREATE_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt,rel_232_FreePointerBasedValue->createContext());
CREATE_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt,rel_295_FreePointerBasedValuesEqual->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
for(const auto& env0 : *rel_427_IsRawDataArrayVar) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_295_FreePointerBasedValuesEqual->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_295_FreePointerBasedValuesEqual_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_232_FreePointerBasedValue->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_232_FreePointerBasedValue_op_ctxt));
for(const auto& env4 : range) {
if( rel_157_MLOADSFreePtrUnchangedNoMemReuse->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_157_MLOADSFreePtrUnchangedNoMemReuse_op_ctxt))) {
auto range = rel_229_Variable_SymbolicValue->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_229_Variable_SymbolicValue_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env5[0])}};
rel_483_RawDataArrayVarsInSameClass->insert(tuple,READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
}
break;
}
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_157_MLOADSFreePtrUnchangedNoMemReuse->purge();
if (pruneImdtRels) rel_229_Variable_SymbolicValue->purge();
if (pruneImdtRels) rel_232_FreePointerBasedValue->purge();
if (pruneImdtRels) rel_295_FreePointerBasedValuesEqual->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_235(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(UniqueMSTOREMLOADForAddrVar(store,load) :- 
   MLOADMSTORESameAddrVar(store,load),
   !NonUniqueMLOADMSTOREForAddrVar(store,load).
in file misc.dl [138:1-140:48])_");
if(!(rel_44_MLOADMSTORESameAddrVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_44_MLOADMSTORESameAddrVar_op_ctxt,rel_44_MLOADMSTORESameAddrVar->createContext());
CREATE_OP_CONTEXT(rel_45_NonUniqueMLOADMSTOREForAddrVar_op_ctxt,rel_45_NonUniqueMLOADMSTOREForAddrVar->createContext());
CREATE_OP_CONTEXT(rel_46_UniqueMSTOREMLOADForAddrVar_op_ctxt,rel_46_UniqueMSTOREMLOADForAddrVar->createContext());
for(const auto& env0 : *rel_44_MLOADMSTORESameAddrVar) {
if( !(rel_45_NonUniqueMLOADMSTOREForAddrVar->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_45_NonUniqueMLOADMSTOREForAddrVar_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_46_UniqueMSTOREMLOADForAddrVar->insert(tuple,READ_OP_CONTEXT(rel_46_UniqueMSTOREMLOADForAddrVar_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_44_MLOADMSTORESameAddrVar->purge();
if (pruneImdtRels) rel_45_NonUniqueMLOADMSTOREForAddrVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_236(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(rawDataArrayClassRep.LoadInBlock(arrVar,mload,block) :- 
   RawDataArrayVarsInSameClass(arrVar,_),
   Statement_Defines(mload,arrVar,_),
   Statement_Block(mload,block).
in file components.dl [357:3-360:36])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
for(const auto& env0 : *rel_483_RawDataArrayVarsInSameClass) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[1])}};
rel_484_rawDataArrayClassRep_LoadInBlock->insert(tuple,READ_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(rawDataArrayClassRep.LoadInBlock(arrVar,mload,block) :- 
   RawDataArrayVarsInSameClass(_,arrVar),
   Statement_Defines(mload,arrVar,_),
   Statement_Block(mload,block).
in file components.dl [357:3-360:36])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
for(const auto& env0 : *rel_483_RawDataArrayVarsInSameClass) {
auto range = rel_1_Statement_Defines->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env1[0]),ramBitCast(env2[1])}};
rel_484_rawDataArrayClassRep_LoadInBlock->insert(tuple,READ_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_237(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(rawDataArrayClassRep.DominatesInClass(var1,var2,load1,load2) :- 
   rawDataArrayClassRep.LoadInBlock(var1,load1,block),
   RawDataArrayVarsInSameClass(var1,var2),
   rawDataArrayClassRep.LoadInBlock(var2,load2,block),
   LocalStatementPathInBlock(load1,load2),
   load1 != load2.
in file components.dl [362:3-367:20])_");
if(!(rel_484_rawDataArrayClassRep_LoadInBlock->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty()) && !(rel_147_LocalStatementPathInBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt,rel_147_LocalStatementPathInBlock->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt,rel_485_rawDataArrayClassRep_DominatesInClass->createContext());
for(const auto& env0 : *rel_484_rawDataArrayClassRep_LoadInBlock) {
auto range = rel_483_RawDataArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_484_rawDataArrayClassRep_LoadInBlock->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env2[1])) && rel_147_LocalStatementPathInBlock->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_147_LocalStatementPathInBlock_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_485_rawDataArrayClassRep_DominatesInClass->insert(tuple,READ_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(rawDataArrayClassRep.DominatesInClass(arrVar1,arrVar2,mload1,mload2) :- 
   rawDataArrayClassRep.LoadInBlock(arrVar1,mload1,block1),
   RawDataArrayVarsInSameClass(arrVar1,arrVar2),
   rawDataArrayClassRep.LoadInBlock(arrVar2,mload2,block2),
   Dominates(block1,block2),
   mload1 != mload2,
   block1 != block2.
in file components.dl [369:3-375:22])_");
if(!(rel_484_rawDataArrayClassRep_LoadInBlock->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty()) && !(rel_125_Dominates->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_125_Dominates_op_ctxt,rel_125_Dominates->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt,rel_485_rawDataArrayClassRep_DominatesInClass->createContext());
for(const auto& env0 : *rel_484_rawDataArrayClassRep_LoadInBlock) {
auto range = rel_483_RawDataArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_484_rawDataArrayClassRep_LoadInBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env0[1]) != ramBitCast<RamDomain>(env2[1])) && (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(env2[2])) && rel_125_Dominates->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_125_Dominates_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1])}};
rel_485_rawDataArrayClassRep_DominatesInClass->insert(tuple,READ_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_125_Dominates->purge();
if (pruneImdtRels) rel_147_LocalStatementPathInBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_238(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(rawDataArrayClassRep.DominatesAllInClass(arrVar,mload) :- 
   rawDataArrayClassRep.LoadInBlock(arrVar,mload,_),
   !rawDataArrayClassRep.DominatesInClass(_,arrVar,_,mload).
in file components.dl [377:3-379:44])_");
if(!(rel_484_rawDataArrayClassRep_LoadInBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt,rel_485_rawDataArrayClassRep_DominatesInClass->createContext());
CREATE_OP_CONTEXT(rel_486_rawDataArrayClassRep_DominatesAllInClass_op_ctxt,rel_486_rawDataArrayClassRep_DominatesAllInClass->createContext());
for(const auto& env0 : *rel_484_rawDataArrayClassRep_LoadInBlock) {
if( !(!rel_485_rawDataArrayClassRep_DominatesInClass->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_485_rawDataArrayClassRep_DominatesInClass_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_486_rawDataArrayClassRep_DominatesAllInClass->insert(tuple,READ_OP_CONTEXT(rel_486_rawDataArrayClassRep_DominatesAllInClass_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_485_rawDataArrayClassRep_DominatesInClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_239(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(rawDataArrayClassRep.Var_ClassRep(arrVar,classRep) :- 
   rawDataArrayClassRep.DominatesAllInClass(classRep,_),
   RawDataArrayVarsInSameClass(arrVar,classRep).
in file components.dl [381:3-383:35])_");
if(!(rel_486_rawDataArrayClassRep_DominatesAllInClass->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_486_rawDataArrayClassRep_DominatesAllInClass_op_ctxt,rel_486_rawDataArrayClassRep_DominatesAllInClass->createContext());
CREATE_OP_CONTEXT(rel_487_rawDataArrayClassRep_Var_ClassRep_op_ctxt,rel_487_rawDataArrayClassRep_Var_ClassRep->createContext());
for(const auto& env0 : *rel_486_rawDataArrayClassRep_DominatesAllInClass) {
auto range = rel_483_RawDataArrayVarsInSameClass->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0])}};
rel_487_rawDataArrayClassRep_Var_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_487_rawDataArrayClassRep_Var_ClassRep_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(rawDataArrayClassRep.Var_ClassRep(arrVar,arrVar) :- 
   RawDataArrayVarsInSameClass(arrVar,arrVar),
   !rawDataArrayClassRep.LoadInBlock(arrVar,_,_).
in file components.dl [386:3-388:32])_");
if(!(rel_483_RawDataArrayVarsInSameClass->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt,rel_484_rawDataArrayClassRep_LoadInBlock->createContext());
CREATE_OP_CONTEXT(rel_487_rawDataArrayClassRep_Var_ClassRep_op_ctxt,rel_487_rawDataArrayClassRep_Var_ClassRep->createContext());
for(const auto& env0 : *rel_483_RawDataArrayVarsInSameClass) {
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[1])) && !(!rel_484_rawDataArrayClassRep_LoadInBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_484_rawDataArrayClassRep_LoadInBlock_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_487_rawDataArrayClassRep_Var_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_487_rawDataArrayClassRep_Var_ClassRep_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_484_rawDataArrayClassRep_LoadInBlock->purge();
if (pruneImdtRels) rel_486_rawDataArrayClassRep_DominatesAllInClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_240(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RawDataArrayVar_ClassRep(arrVar,as(classRep, ArrayVariable)) :- 
   rawDataArrayClassRep.Var_ClassRep(arrVar,classRep).
in file arrays.dl [834:1-835:55])_");
if(!(rel_487_rawDataArrayClassRep_Var_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_487_rawDataArrayClassRep_Var_ClassRep_op_ctxt,rel_487_rawDataArrayClassRep_Var_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt,rel_488_RawDataArrayVar_ClassRep->createContext());
for(const auto& env0 : *rel_487_rawDataArrayClassRep_Var_ClassRep) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_488_RawDataArrayVar_ClassRep->insert(tuple,READ_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_487_rawDataArrayClassRep_Var_ClassRep->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_241(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VarIsArray(array,arrVarRep) :- 
   RegularArrayVar_ClassRep(array,arrVarRep).
in file arrays.dl [838:1-840:46])_");
if(!(rel_473_RegularArrayVar_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_473_RegularArrayVar_ClassRep_op_ctxt,rel_473_RegularArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
for(const auto& env0 : *rel_473_RegularArrayVar_ClassRep) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_489_VarIsArray->insert(tuple,READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(VarIsArray(array,arrVarRep) :- 
   RawDataArrayVar_ClassRep(array,arrVarRep).
in file arrays.dl [838:1-840:46])_");
if(!(rel_488_RawDataArrayVar_ClassRep->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt,rel_488_RawDataArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
for(const auto& env0 : *rel_488_RawDataArrayVar_ClassRep) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_489_VarIsArray->insert(tuple,READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_473_RegularArrayVar_ClassRep->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_242(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTOREToMLOAD(mstore,mload,actual) :- 
   memWriteToMemConsStmtImpr.ReachableBypassingAnyStrict(mstore,mload,addr),
   MLOAD(mload,indexVar,_),
   MSTORE(mstore,_,actual),
   addr != "0x40",
   !VarIsArray(indexVar,_).
in file uses_defs_abstractions.dl [159:1-166:28])_");
if(!(rel_10_MLOAD->empty()) && !(rel_40_MSTORE->empty()) && !(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict_op_ctxt,rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_490_MSTOREToMLOAD_op_ctxt,rel_490_MSTOREToMLOAD->createContext());
for(const auto& env0 : *rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict) {
if( (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(RamSigned(22)))) {
auto range = rel_10_MLOAD->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
if( !(!rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt)).empty())) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[2])}};
rel_490_MSTOREToMLOAD->insert(tuple,READ_OP_CONTEXT(rel_490_MSTOREToMLOAD_op_ctxt));
}
break;
}
}
}
}
}
();}
if (pruneImdtRels) rel_373_memWriteToMemConsStmtImpr_ReachableBypassingAnyStrict->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_243(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArbitraryCall(call) :- 
   StatementUsesMemory_StartVar(call,_,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,arrVarRep),
   ABIEncodedArrayWFunctionSelector(arrVarRep),
   RawDataArrayVarsInSameClass(abiArrVar,abiArrVarAlias),
   MemoryCopyLoop(_,argArrayDataVar,abiArrVarAlias),
   ArrayDataStartVar(argArrayVar,argArrayDataVar),
   CallDataCopyArgInfo(_,argArrayVar,_).
in file uses_defs_abstractions.dl [411:1-418:42])_");
if(!(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_436_ArrayDataStartVar->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty()) && !(rel_271_MemoryCopyLoop->empty()) && !(rel_483_RawDataArrayVarsInSameClass->empty()) && !(rel_383_CallDataCopyArgInfo->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt,rel_383_CallDataCopyArgInfo->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt,rel_483_RawDataArrayVarsInSameClass->createContext());
CREATE_OP_CONTEXT(rel_491_ArbitraryCall_op_ctxt,rel_491_ArbitraryCall->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
auto range = rel_483_RawDataArrayVarsInSameClass->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_483_RawDataArrayVarsInSameClass_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_271_MemoryCopyLoop->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[1])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env4 : range) {
if( !rel_383_CallDataCopyArgInfo->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env4[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_491_ArbitraryCall->insert(tuple,READ_OP_CONTEXT(rel_491_ArbitraryCall_op_ctxt));
break;
}
}
}
}
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","ArbitraryCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_491_ArbitraryCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_483_RawDataArrayVarsInSameClass->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_244(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AllocationAny(mstore) :- 
   IsRegularArrayVar(array),
   MSTORE(mstore,array,_).
in file metrics.dl [113:1-115:28])_");
if(!(rel_424_IsRegularArrayVar->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_492_AllocationAny_op_ctxt,rel_492_AllocationAny->createContext());
for(const auto& env0 : *rel_424_IsRegularArrayVar) {
auto range = rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[0])}};
rel_492_AllocationAny->insert(tuple,READ_OP_CONTEXT(rel_492_AllocationAny_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_245(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single10(@generator_0) :- 
   @generator_0 = count : { AllocationAny(+underscore_892) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_492_AllocationAny_op_ctxt,rel_492_AllocationAny->createContext());
CREATE_OP_CONTEXT(rel_493_agg_single10_op_ctxt,rel_493_agg_single10->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_492_AllocationAny->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_493_agg_single10->insert(tuple,READ_OP_CONTEXT(rel_493_agg_single10_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_246(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single6(@generator_0) :- 
   @generator_0 = count : { MSTORE(+underscore_921,+underscore_922,+underscore_923) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_47_agg_single6_op_ctxt,rel_47_agg_single6->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_40_MSTORE->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_47_agg_single6->insert(tuple,READ_OP_CONTEXT(rel_47_agg_single6_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_247(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory_UsesArray(stmt,kind,array) :- 
   StatementUsesMemory_LengthVar(stmt,kind,arrayLength),
   StatementUsesMemory_StartVar(stmt,kind,arrayStart),
   ArrayVarLengthVar(array,arrayLength),
   ArrayDataStartVar(array,arrayStart).
in file arrays.dl [140:1-144:40])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_433_ArrayVarLengthVar->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty()) && !(rel_436_ArrayDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt,rel_433_ArrayVarLengthVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt,rel_494_StatementUsesMemory_UsesArray->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_433_ArrayVarLengthVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_433_ArrayVarLengthVar_op_ctxt));
for(const auto& env2 : range) {
if( rel_436_ArrayDataStartVar->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[0])}};
rel_494_StatementUsesMemory_UsesArray->insert(tuple,READ_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_UsesArray(stmt,kind,array) :- 
   StatementUsesMemory_StartVar(stmt,kind,arrayStart),
   ArrayDataStartVar(array,arrayStart),
   IsRawDataArrayVar(array).
in file arrays.dl [146:1-150:28])_");
if(!(rel_436_ArrayDataStartVar->empty()) && !(rel_427_IsRawDataArrayVar->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt,rel_494_StatementUsesMemory_UsesArray->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env1 : range) {
if( rel_427_IsRawDataArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[0])}};
rel_494_StatementUsesMemory_UsesArray->insert(tuple,READ_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_UsesArray(stmt,kind,innerArr) :- 
   StatementUsesMemoryReadsABIEnc(stmt,kind),
   StatementUsesMemory_StartVar(stmt,kind,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArr),
   ABIEncodedArrayIncludesArray(abiArr,stmt,innerArr,_).
in file uses_defs_abstractions.dl [219:1-223:59])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_69_StatementUsesMemoryReadsABIEnc->empty()) && !(rel_454_ABIEncodedArrayIncludesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt,rel_69_StatementUsesMemoryReadsABIEnc->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt,rel_494_StatementUsesMemory_UsesArray->createContext());
for(const auto& env0 : *rel_69_StatementUsesMemoryReadsABIEnc) {
auto range = rel_64_StatementUsesMemory_StartVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_454_ABIEncodedArrayIncludesArray->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env3[2])}};
rel_494_StatementUsesMemory_UsesArray->insert(tuple,READ_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_69_StatementUsesMemoryReadsABIEnc->purge();
if (pruneImdtRels) rel_433_ArrayVarLengthVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_248(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOADReadsArrayLength(mload) :- 
   IsRegularArrayVar(array),
   MLOAD(mload,array,_).
in file arrays.dl [273:1-275:26])_");
if(!(rel_424_IsRegularArrayVar->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_495_MLOADReadsArrayLength_op_ctxt,rel_495_MLOADReadsArrayLength->createContext());
for(const auto& env0 : *rel_424_IsRegularArrayVar) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[0])}};
rel_495_MLOADReadsArrayLength->insert(tuple,READ_OP_CONTEXT(rel_495_MLOADReadsArrayLength_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_249(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single19(@generator_0) :- 
   @generator_0 = count : { MLOADReadsArrayLength(+underscore_907) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_495_MLOADReadsArrayLength_op_ctxt,rel_495_MLOADReadsArrayLength->createContext());
CREATE_OP_CONTEXT(rel_496_agg_single19_op_ctxt,rel_496_agg_single19->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_495_MLOADReadsArrayLength->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_496_agg_single19->insert(tuple,READ_OP_CONTEXT(rel_496_agg_single19_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_250(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayDataActualArg(caller,function,pos,"Data") :- 
   ActualArgs(caller,actual,pos),
   ArrayDataStartVar(arr,actual),
   IsRegularArrayVar(arr),
   CallGraphEdge(caller,function),
   FormalArgs(function,_,pos).
in file arrays.dl [615:1-620:32])_");
if(!(rel_436_ArrayDataStartVar->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_424_IsRegularArrayVar->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_100_ActualArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt,rel_424_IsRegularArrayVar->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_497_ArrayDataActualArg_op_ctxt,rel_497_ArrayDataActualArg->createContext());
for(const auto& env0 : *rel_100_ActualArgs) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env1 : range) {
if( rel_424_IsRegularArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_424_IsRegularArrayVar_op_ctxt))) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env2 : range) {
if( !rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2]),ramBitCast(RamSigned(59))}};
rel_497_ArrayDataActualArg->insert(tuple,READ_OP_CONTEXT(rel_497_ArrayDataActualArg_op_ctxt));
}
}
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\tfun\tindex\tkind"},{"auxArity","0"},{"name","ArrayDataActualArg"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"caller\", \"fun\", \"index\", \"kind\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Block\", \"s:Function\", \"i:number\", \"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_497_ArrayDataActualArg);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_424_IsRegularArrayVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_251(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ExternalCallTakesWholeCallData(stmt) :- 
   StatementUsesMemory_StartVar(stmt,_,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,arrVarRep),
   ABIEncodedArrayWFunctionSelector(arrVarRep),
   IsRawDataArrayVar(abiArrVar).
in file uses_defs_abstractions.dl [402:1-407:32])_");
if(!(rel_427_IsRawDataArrayVar->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_498_ExternalCallTakesWholeCallData_op_ctxt,rel_498_ExternalCallTakesWholeCallData->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( rel_427_IsRawDataArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt))) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_498_ExternalCallTakesWholeCallData->insert(tuple,READ_OP_CONTEXT(rel_498_ExternalCallTakesWholeCallData_op_ctxt));
break;
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","ExternalCallTakesWholeCallData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_498_ExternalCallTakesWholeCallData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_252(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(_StructStore(stmt) :- 
   StructStore(stmt,_,_,_).
in file metrics.dl [128:1-128:49])_");
if(!(rel_423_StructStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_423_StructStore_op_ctxt,rel_423_StructStore->createContext());
CREATE_OP_CONTEXT(rel_499_StructStore_op_ctxt,rel_499_StructStore->createContext());
for(const auto& env0 : *rel_423_StructStore) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_499_StructStore->insert(tuple,READ_OP_CONTEXT(rel_499_StructStore_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_423_StructStore->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_253(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single12(@generator_0) :- 
   @generator_0 = count : { _StructStore(+underscore_894) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_499_StructStore_op_ctxt,rel_499_StructStore->createContext());
CREATE_OP_CONTEXT(rel_500_agg_single12_op_ctxt,rel_500_agg_single12->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_499_StructStore->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_500_agg_single12->insert(tuple,READ_OP_CONTEXT(rel_500_agg_single12_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_254(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(localFlowAnalysis.TransferOpcode(op) :- 
   FlowOp(op).
in file flows.dl [162:1-162:52])_");
if(!(rel_401_FlowOp->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_401_FlowOp_op_ctxt,rel_401_FlowOp->createContext());
CREATE_OP_CONTEXT(rel_501_localFlowAnalysis_TransferOpcode_op_ctxt,rel_501_localFlowAnalysis_TransferOpcode->createContext());
for(const auto& env0 : *rel_401_FlowOp) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_501_localFlowAnalysis_TransferOpcode->insert(tuple,READ_OP_CONTEXT(rel_501_localFlowAnalysis_TransferOpcode_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(localFlowAnalysis.TransferOpcode("PHI").
in file flows.dl [144:3-144:25])_");
[&](){
CREATE_OP_CONTEXT(rel_501_localFlowAnalysis_TransferOpcode_op_ctxt,rel_501_localFlowAnalysis_TransferOpcode->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(23))}};
rel_501_localFlowAnalysis_TransferOpcode->insert(tuple,READ_OP_CONTEXT(rel_501_localFlowAnalysis_TransferOpcode_op_ctxt));
}
();if (pruneImdtRels) rel_401_FlowOp->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_255(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(localFlowAnalysis.Flows(x,x) :- 
   isVariable(x).
in file flows.dl [96:3-97:32])_");
if(!(rel_112_isVariable->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_112_isVariable) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_502_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(localFlowAnalysis.Flows(x,y) :- 
   localFlowAnalysis.TransferOpcode(op),
   Statement_Opcode(stmt,op),
   Statement_Block(stmt,block),
   IsBlock(block),
   Statement_Defines(stmt,y,_),
   Statement_Uses(stmt,x,_).
in file flows.dl [108:3-115:32])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_140_IsBlock->empty()) && !(rel_501_localFlowAnalysis_TransferOpcode->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_501_localFlowAnalysis_TransferOpcode_op_ctxt,rel_501_localFlowAnalysis_TransferOpcode->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_501_localFlowAnalysis_TransferOpcode) {
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env4[1]),ramBitCast(env3[1])}};
rel_502_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
}
}
break;
}
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt,rel_503_delta_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_502_localFlowAnalysis_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_503_delta_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_505_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_505_localFlowAnalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_506_delta_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_506_delta_localFlowAnalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_505_localFlowAnalysis_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_506_delta_localFlowAnalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_506_delta_localFlowAnalysis_FunctionFlowSummary_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(localFlowAnalysis.Flows(actual,actualReturn) :- 
   localFlowAnalysis.FunctionFlowSummary(fn,formal,m),
   FunctionCallReturn(block,fn,_),
   FormalArgs(fn,formal,n),
   ActualArgs(block,actual,n),
   ActualReturnArgs(block,actualReturn,m),
   IsBlock(block).
in file flows.dl [118:3-125:29])_");
if(!(rel_193_FunctionCallReturn->empty()) && !(rel_100_ActualArgs->empty()) && !(rel_140_IsBlock->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_506_delta_localFlowAnalysis_FunctionFlowSummary->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_140_IsBlock_op_ctxt,rel_140_IsBlock->createContext());
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt,rel_504_new_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_506_delta_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_506_delta_localFlowAnalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_506_delta_localFlowAnalysis_FunctionFlowSummary) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_140_IsBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_140_IsBlock_op_ctxt))) {
auto range = rel_111_FormalArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_100_ActualArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_192_ActualReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_502_localFlowAnalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env3[1]),ramBitCast(env4[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[1]),ramBitCast(env4[1])}};
rel_504_new_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(localFlowAnalysis.Flows(x,z) :- 
   localFlowAnalysis.Flows(x,y),
   localFlowAnalysis.Flows(y,z). .plan 1:(2,1)
in file flows.dl [135:3-137:17])_");
if(!(rel_503_delta_localFlowAnalysis_Flows->empty()) && !(rel_502_localFlowAnalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt,rel_503_delta_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt,rel_504_new_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_503_delta_localFlowAnalysis_Flows) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_503_delta_localFlowAnalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt))) && !(rel_502_localFlowAnalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_504_new_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(localFlowAnalysis.Flows(x,z) :- 
   localFlowAnalysis.Flows(x,y),
   localFlowAnalysis.Flows(y,z). .plan 1:(2,1)
in file flows.dl [135:3-137:17])_");
if(!(rel_503_delta_localFlowAnalysis_Flows->empty()) && !(rel_502_localFlowAnalysis_Flows->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt,rel_503_delta_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt,rel_504_new_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_503_delta_localFlowAnalysis_Flows) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_502_localFlowAnalysis_Flows->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1])}};
rel_504_new_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(localFlowAnalysis.FunctionFlowSummary(fn,from,n) :- 
   localFlowAnalysis.Flows(from,to),
   FormalReturnArgs(fn,to,n).
in file flows.dl [131:4-133:35])_");
if(!(rel_503_delta_localFlowAnalysis_Flows->empty()) && !(rel_119_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt,rel_119_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_503_delta_localFlowAnalysis_Flows_op_ctxt,rel_503_delta_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_505_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_505_localFlowAnalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_507_new_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_507_new_localFlowAnalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_503_delta_localFlowAnalysis_Flows) {
auto range = rel_119_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_119_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_505_localFlowAnalysis_FunctionFlowSummary->contains(Tuple<RamDomain,3>{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_505_localFlowAnalysis_FunctionFlowSummary_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_507_new_localFlowAnalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_507_new_localFlowAnalysis_FunctionFlowSummary_op_ctxt));
}
}
}
}
();}
if(rel_504_new_localFlowAnalysis_Flows->empty() && rel_507_new_localFlowAnalysis_FunctionFlowSummary->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_504_new_localFlowAnalysis_Flows_op_ctxt,rel_504_new_localFlowAnalysis_Flows->createContext());
for(const auto& env0 : *rel_504_new_localFlowAnalysis_Flows) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_502_localFlowAnalysis_Flows->insert(tuple,READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
}
}
();std::swap(rel_503_delta_localFlowAnalysis_Flows, rel_504_new_localFlowAnalysis_Flows);
rel_504_new_localFlowAnalysis_Flows->purge();
[&](){
CREATE_OP_CONTEXT(rel_505_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_505_localFlowAnalysis_FunctionFlowSummary->createContext());
CREATE_OP_CONTEXT(rel_507_new_localFlowAnalysis_FunctionFlowSummary_op_ctxt,rel_507_new_localFlowAnalysis_FunctionFlowSummary->createContext());
for(const auto& env0 : *rel_507_new_localFlowAnalysis_FunctionFlowSummary) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_505_localFlowAnalysis_FunctionFlowSummary->insert(tuple,READ_OP_CONTEXT(rel_505_localFlowAnalysis_FunctionFlowSummary_op_ctxt));
}
}
();std::swap(rel_506_delta_localFlowAnalysis_FunctionFlowSummary, rel_507_new_localFlowAnalysis_FunctionFlowSummary);
rel_507_new_localFlowAnalysis_FunctionFlowSummary->purge();
iter++;
}
iter = 0;
rel_503_delta_localFlowAnalysis_Flows->purge();
rel_504_new_localFlowAnalysis_Flows->purge();
rel_506_delta_localFlowAnalysis_FunctionFlowSummary->purge();
rel_507_new_localFlowAnalysis_FunctionFlowSummary->purge();
if (pruneImdtRels) rel_100_ActualArgs->purge();
if (pruneImdtRels) rel_119_FormalReturnArgs->purge();
if (pruneImdtRels) rel_112_isVariable->purge();
if (pruneImdtRels) rel_140_IsBlock->purge();
if (pruneImdtRels) rel_505_localFlowAnalysis_FunctionFlowSummary->purge();
if (pruneImdtRels) rel_501_localFlowAnalysis_TransferOpcode->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_256(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayStore(mstore,arrId,from) :- 
   MSTORE(mstore,indexVar,from),
   localFlowAnalysis.Flows(arrayDataStart,indexVar),
   ArrayDataStartVar(array,arrayDataStart),
   VarIsArray(array,arrId),
   !ArrayStoreAtIndex(mstore,_,_,_).
in file arrays.dl [252:1-257:39])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_436_ArrayDataStartVar->empty()) && !(rel_40_MSTORE->empty()) && !(rel_489_VarIsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( !(!rel_474_ArrayStoreAtIndex->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt)).empty())) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast(env0[2])}};
rel_508_ArrayStore->insert(tuple,READ_OP_CONTEXT(rel_508_ArrayStore_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayStore(mstore,arrId,from) :- 
   MSTORE(mstore,indexVar,from),
   localFlowAnalysis.Flows(rawDataArray,indexVar),
   RawDataArrayVar_ClassRep(rawDataArray,arrId).
in file arrays.dl [264:1-267:49])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_488_RawDataArrayVar_ClassRep->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt,rel_488_RawDataArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_488_RawDataArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel_508_ArrayStore->insert(tuple,READ_OP_CONTEXT(rel_508_ArrayStore_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayStore(mstore,arrId,from) :- 
   ArrayHasConstantLength(arrayVar,length),
   VarIsArray(arrayVar,arrId),
   ArrayWriteToRelativeIndex(arrayVar,mstore,relativeIndex),
   MSTORE(mstore,_,from),
   relativeIndex > 0,
   relativeIndex < (length+32),
   !ArrayStoreAtIndex(mstore,_,_,_).
in file arrays.dl [313:1-320:39])_");
if(!(rel_489_VarIsArray->empty()) && !(rel_482_ArrayWriteToRelativeIndex->empty()) && !(rel_461_ArrayHasConstantLength->empty()) && !(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_461_ArrayHasConstantLength_op_ctxt,rel_461_ArrayHasConstantLength->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
CREATE_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt,rel_482_ArrayWriteToRelativeIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
for(const auto& env0 : *rel_461_ArrayHasConstantLength) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_482_ArrayWriteToRelativeIndex->lowerUpperRange_102(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env0[1]) + ramBitCast<RamSigned>(RamSigned(32))))}},READ_OP_CONTEXT(rel_482_ArrayWriteToRelativeIndex_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[2]) != ramBitCast<RamDomain>((ramBitCast<RamSigned>(env0[1]) + ramBitCast<RamSigned>(RamSigned(32))))) && (ramBitCast<RamDomain>(env2[2]) != ramBitCast<RamDomain>(RamSigned(0))) && !(!rel_474_ArrayStoreAtIndex->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt)).empty())) {
auto range = rel_40_MSTORE->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[1]),ramBitCast(env1[1]),ramBitCast(env3[2])}};
rel_508_ArrayStore->insert(tuple,READ_OP_CONTEXT(rel_508_ArrayStore_op_ctxt));
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_482_ArrayWriteToRelativeIndex->purge();
if (pruneImdtRels) rel_461_ArrayHasConstantLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_257(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PHI(stmt,fro,to) :- 
   Statement_Opcode(stmt,"PHI"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,fro,_).
in file tac_instructions.dl [364:1-367:33])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_48_PHI_op_ctxt,rel_48_PHI->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(23))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(23))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_48_PHI->insert(tuple,READ_OP_CONTEXT(rel_48_PHI_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_258(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(WriteToArrayUsedByABIEncodedArray(mstore,abiArr) :- 
   ABIEncodedArrayIncludesArray(abiArr,_,innerArrVar,_),
   VarIsArray(innerArrVar,innerArr),
   ArrayStore(mstore,innerArr,_).
in file uses_defs_abstractions.dl [305:1-310:48])_");
if(!(rel_489_VarIsArray->empty()) && !(rel_508_ArrayStore->empty()) && !(rel_454_ABIEncodedArrayIncludesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
CREATE_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt,rel_509_WriteToArrayUsedByABIEncodedArray->createContext());
for(const auto& env0 : *rel_454_ABIEncodedArrayIncludesArray) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_508_ArrayStore->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_508_ArrayStore_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_509_WriteToArrayUsedByABIEncodedArray->insert(tuple,READ_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(WriteToArrayUsedByABIEncodedArray(mstore,abiArr) :- 
   ABIEncodedArrayIncludesArray(abiArr,_,innerArrVar,_),
   VarIsArray(innerArrVar,innerArr),
   ArrayStoreAtIndex(mstore,innerArr,_,_).
in file uses_defs_abstractions.dl [305:1-310:48])_");
if(!(rel_489_VarIsArray->empty()) && !(rel_474_ArrayStoreAtIndex->empty()) && !(rel_454_ABIEncodedArrayIncludesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt,rel_509_WriteToArrayUsedByABIEncodedArray->createContext());
for(const auto& env0 : *rel_454_ABIEncodedArrayIncludesArray) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_474_ArrayStoreAtIndex->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_509_WriteToArrayUsedByABIEncodedArray->insert(tuple,READ_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(WriteToArrayUsedByABIEncodedArray(mstore,abiArr) :- 
   ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,_,innerArrVar,_,_),
   VarIsArray(innerArrVar,innerArr),
   ArrayStore(mstore,innerArr,_).
in file uses_defs_abstractions.dl [305:1-310:48])_");
if(!(rel_489_VarIsArray->empty()) && !(rel_508_ArrayStore->empty()) && !(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
CREATE_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt,rel_509_WriteToArrayUsedByABIEncodedArray->createContext());
for(const auto& env0 : *rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_508_ArrayStore->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_508_ArrayStore_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_509_WriteToArrayUsedByABIEncodedArray->insert(tuple,READ_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(WriteToArrayUsedByABIEncodedArray(mstore,abiArr) :- 
   ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,_,innerArrVar,_,_),
   VarIsArray(innerArrVar,innerArr),
   ArrayStoreAtIndex(mstore,innerArr,_,_).
in file uses_defs_abstractions.dl [305:1-310:48])_");
if(!(rel_489_VarIsArray->empty()) && !(rel_474_ArrayStoreAtIndex->empty()) && !(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt,rel_509_WriteToArrayUsedByABIEncodedArray->createContext());
for(const auto& env0 : *rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_474_ArrayStoreAtIndex->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_509_WriteToArrayUsedByABIEncodedArray->insert(tuple,READ_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_259(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayWriteToIsNotArrayOrLen(memWriteStmt,abiArr,memConsStmt,index) :- 
   ABIEncodedArrayWriteTo(memWriteStmt,abiArr,memConsStmt,index),
   !ABIEncodedArrayIncludesArray(abiArr,memConsStmt,_,index),
   !ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,_,_,_,index),
   !WriteToArrayUsedByABIEncodedArray(memWriteStmt,abiArr).
in file uses_defs_abstractions.dl [312:1-316:60])_");
if(!(rel_356_ABIEncodedArrayWriteTo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
CREATE_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt,rel_509_WriteToArrayUsedByABIEncodedArray->createContext());
CREATE_OP_CONTEXT(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen_op_ctxt,rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->createContext());
for(const auto& env0 : *rel_356_ABIEncodedArrayWriteTo) {
if( !(!rel_454_ABIEncodedArrayIncludesArray->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt)).empty()) && !(rel_509_WriteToArrayUsedByABIEncodedArray->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_509_WriteToArrayUsedByABIEncodedArray_op_ctxt))) && !(!rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->insert(tuple,READ_OP_CONTEXT(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_509_WriteToArrayUsedByABIEncodedArray->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_260(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIEncodedArrayHasVarAtIndex(abiArr,memConsStmt,varWritten,index) :- 
   ABIEncodedArrayWriteToIsNotArrayOrLen(mstore,abiArr,memConsStmt,index),
   MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,_,varWritten).
in file uses_defs_abstractions.dl [318:1-321:72])_");
if(!(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->empty()) && !(rel_358_MSTOREToMemConsStmt_WrittenVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
CREATE_OP_CONTEXT(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen_op_ctxt,rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->createContext());
CREATE_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt,rel_511_ABIEncodedArrayHasVarAtIndex->createContext());
for(const auto& env0 : *rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen) {
auto range = rel_358_MSTOREToMemConsStmt_WrittenVar->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[3]),ramBitCast(env0[3])}};
rel_511_ABIEncodedArrayHasVarAtIndex->insert(tuple,READ_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ABIEncodedArrayHasVarAtIndex(abiArr,memConsStmt,varWritten,index) :- 
   ABIEncodedArrayIncludesArray(abiArr,memConsStmt,varWritten,index).
in file uses_defs_abstractions.dl [318:1-321:72])_");
if(!(rel_454_ABIEncodedArrayIncludesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_454_ABIEncodedArrayIncludesArray_op_ctxt,rel_454_ABIEncodedArrayIncludesArray->createContext());
CREATE_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt,rel_511_ABIEncodedArrayHasVarAtIndex->createContext());
for(const auto& env0 : *rel_454_ABIEncodedArrayIncludesArray) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_511_ABIEncodedArrayHasVarAtIndex->insert(tuple,READ_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_454_ABIEncodedArrayIncludesArray->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_261(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(stmt,kind,0,arrVarRep) :- 
   StatementUsesMemory_UsesArray(stmt,kind,array),
   VarIsArray(array,arrVarRep),
   StatementUsesMemoryReadsRawData(stmt,kind),
   !StatementUsesMemoryOfComputableLength(stmt,_,_).
in file arrays.dl [152:1-156:54])_");
if(!(rel_71_StatementUsesMemoryReadsRawData->empty()) && !(rel_489_VarIsArray->empty()) && !(rel_494_StatementUsesMemory_UsesArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt,rel_71_StatementUsesMemoryReadsRawData->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt,rel_494_StatementUsesMemory_UsesArray->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_494_StatementUsesMemory_UsesArray) {
if( rel_71_StatementUsesMemoryReadsRawData->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt)) && !(!rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt)).empty())) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(env1[1])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(memConsStmt,kind,i,actual) :- 
   StatementUsesMemoryWriteAtRelativeIndex_Order(memConsStmt,kind,mstore,relativeIndex,i),
   MSTOREToMemConsStmt_WrittenVar(mstore,memConsStmt,relativeIndex,actual).
in file uses_defs_abstractions.dl [122:1-124:78])_");
if(!(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->empty()) && !(rel_358_MSTOREToMemConsStmt_WrittenVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt,rel_358_MSTOREToMemConsStmt_WrittenVar->createContext());
CREATE_OP_CONTEXT(rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order_op_ctxt,rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order) {
auto range = rel_358_MSTOREToMemConsStmt_WrittenVar->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_358_MSTOREToMemConsStmt_WrittenVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[3])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(stmt,kind,0,actual) :- 
   StatementUsesMemory_StartVar(stmt,kind,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArrRep),
   ABIEncodedArrayWFunctionSelector(abiArrRep),
   ABIEncodedArrayHasVarAtIndex(abiArrRep,stmt,actual,-4).
in file uses_defs_abstractions.dl [358:1-362:61])_");
if(!(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_511_ABIEncodedArrayHasVarAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt,rel_511_ABIEncodedArrayHasVarAtIndex->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
auto range = rel_511_ABIEncodedArrayHasVarAtIndex->lowerUpperRange_1101(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(-4))}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(-4))}},READ_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(env2[2])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(stmt,kind,0,abiArrVar) :- 
   StatementUsesMemory_StartVar(stmt,kind,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,arrVarRep),
   ABIEncodedArrayWFunctionSelector(arrVarRep),
   IsRawDataArrayVar(abiArrVar).
in file uses_defs_abstractions.dl [402:1-407:32])_");
if(!(rel_427_IsRawDataArrayVar->empty()) && !(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt,rel_427_IsRawDataArrayVar->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( rel_427_IsRawDataArrayVar->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_427_IsRawDataArrayVar_op_ctxt))) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(env0[2])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(callDataCopy,"CALLDATACOPY",0,arrayVar) :- 
   CallDataCopyArgInfo(callDataCopy,arrayVar,_).
in file uses_defs_abstractions.dl [592:1-594:50])_");
if(!(rel_383_CallDataCopyArgInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt,rel_383_CallDataCopyArgInfo->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_383_CallDataCopyArgInfo) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(51)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(callDataCopy,"CALLDATACOPY",0,arrVarRep) :- 
   CALLDATACOPY_AllCalldata(callDataCopy),
   CALLDATACOPY(callDataCopy,array,_,_),
   VarIsArray(array,arrVarRep).
in file uses_defs_abstractions.dl [596:1-600:32])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_489_VarIsArray->empty()) && !(rel_388_CALLDATACOPY_AllCalldata->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_388_CALLDATACOPY_AllCalldata_op_ctxt,rel_388_CALLDATACOPY_AllCalldata->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_388_CALLDATACOPY_AllCalldata) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(51)),ramBitCast(RamSigned(0)),ramBitCast(env2[1])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(stmt,kind,(relativeIndex/32),actual) :- 
   StatementUsesMemory_StartVar(stmt,kind,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArrRep),
   ABIEncodedArrayNoFunctionSelector(abiArrRep),
   ABIEncodedArrayHasVarAtIndex(abiArrRep,stmt,actual,relativeIndex),
   relativeIndex != -4.
in file uses_defs_abstractions.dl [342:1-348:28])_");
if(!(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_307_ABIEncodedArrayNoFunctionSelector->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_511_ABIEncodedArrayHasVarAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt,rel_307_ABIEncodedArrayNoFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt,rel_511_ABIEncodedArrayHasVarAtIndex->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_307_ABIEncodedArrayNoFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_307_ABIEncodedArrayNoFunctionSelector_op_ctxt))) {
auto range = rel_511_ABIEncodedArrayHasVarAtIndex->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) != ramBitCast<RamDomain>(RamSigned(-4)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env2[3]) / ramBitCast<RamSigned>(RamSigned(32)))),ramBitCast(env2[2])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualMemoryArg(stmt,kind,(1+(relativeIndex/32)),actual) :- 
   StatementUsesMemory_StartVar(stmt,kind,abiArrVar),
   ABIEncodedArrayVar_ClassRep(abiArrVar,abiArrRep),
   ABIEncodedArrayWFunctionSelector(abiArrRep),
   ABIEncodedArrayHasVarAtIndex(abiArrRep,stmt,actual,relativeIndex),
   relativeIndex != -4.
in file uses_defs_abstractions.dl [350:1-356:32])_");
if(!(rel_306_ABIEncodedArrayVar_ClassRep->empty()) && !(rel_309_ABIEncodedArrayWFunctionSelector->empty()) && !(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_511_ABIEncodedArrayHasVarAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt,rel_306_ABIEncodedArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt,rel_309_ABIEncodedArrayWFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt,rel_511_ABIEncodedArrayHasVarAtIndex->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
auto range = rel_306_ABIEncodedArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_306_ABIEncodedArrayVar_ClassRep_op_ctxt));
for(const auto& env1 : range) {
if( rel_309_ABIEncodedArrayWFunctionSelector->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_309_ABIEncodedArrayWFunctionSelector_op_ctxt))) {
auto range = rel_511_ABIEncodedArrayHasVarAtIndex->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_511_ABIEncodedArrayHasVarAtIndex_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[3]) != ramBitCast<RamDomain>(RamSigned(-4)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(RamSigned(1)) + ramBitCast<RamSigned>((ramBitCast<RamSigned>(env2[3]) / ramBitCast<RamSigned>(RamSigned(32)))))),ramBitCast(env2[2])}};
rel_512_StatementUsesMemory_ActualMemoryArg->insert(tuple,READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_64_StatementUsesMemory_StartVar->purge();
if (pruneImdtRels) rel_71_StatementUsesMemoryReadsRawData->purge();
if (pruneImdtRels) rel_358_MSTOREToMemConsStmt_WrittenVar->purge();
if (pruneImdtRels) rel_427_IsRawDataArrayVar->purge();
if (pruneImdtRels) rel_306_ABIEncodedArrayVar_ClassRep->purge();
if (pruneImdtRels) rel_363_StatementUsesMemoryWriteAtRelativeIndex_Order->purge();
if (pruneImdtRels) rel_309_ABIEncodedArrayWFunctionSelector->purge();
if (pruneImdtRels) rel_307_ABIEncodedArrayNoFunctionSelector->purge();
if (pruneImdtRels) rel_511_ABIEncodedArrayHasVarAtIndex->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_262(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLWithPossibleSigHashFromSHA3(call,sha3) :- 
   CALLStatement(call,_),
   StatementUsesMemory_ActualMemoryArg(call,_,0,actual),
   localFlowAnalysis.Flows(sigVar,actual),
   SHA3(sha3,_,_,sigVar).
in file misc.dl [102:1-106:28])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_97_CALLStatement->empty()) && !(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
CREATE_OP_CONTEXT(rel_513_CALLWithPossibleSigHashFromSHA3_op_ctxt,rel_513_CALLWithPossibleSigHashFromSHA3->createContext());
for(const auto& env0 : *rel_97_CALLStatement) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[3])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_63_SHA3->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_63_SHA3_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env3[0])}};
rel_513_CALLWithPossibleSigHashFromSHA3->insert(tuple,READ_OP_CONTEXT(rel_513_CALLWithPossibleSigHashFromSHA3_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_263(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(mload,actual,0) :- 
   MSTOREToMLOAD(_,mload,actual).
in file uses_defs_abstractions.dl [154:1-157:40])_");
if(!(rel_490_MSTOREToMLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_490_MSTOREToMLOAD_op_ctxt,rel_490_MSTOREToMLOAD->createContext());
for(const auto& env0 : *rel_490_MSTOREToMLOAD) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(RamSigned(0))}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,index) :- 
   !LOGStatement(stmt,_),
   !CALLStatement(stmt,_),
   StatementUsesMemory_ActualMemoryArg(stmt,_,index,actual).
in file uses_defs_abstractions.dl [370:1-373:63])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_512_StatementUsesMemory_ActualMemoryArg) {
if( !(!rel_97_CALLStatement->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt)).empty()) && !(!rel_4_LOGStatement->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_4_LOGStatement_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[3]),ramBitCast(env0[2])}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,(index+numOfNonDataArgs)) :- 
   LOGStatement(stmt,numOfNonDataArgs),
   StatementUsesMemory_ActualMemoryArg(stmt,_,index,actual).
in file uses_defs_abstractions.dl [375:1-377:63])_");
if(!(rel_4_LOGStatement->empty()) && !(rel_512_StatementUsesMemory_ActualMemoryArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_4_LOGStatement) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(env0[1])))}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,index) :- 
   LOGIndexedArg(stmt,actual,index).
in file uses_defs_abstractions.dl [379:1-380:38])_");
if(!(rel_98_LOGIndexedArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_98_LOGIndexedArg_op_ctxt,rel_98_LOGIndexedArg->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
for(const auto& env0 : *rel_98_LOGIndexedArg) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,index) :- 
   CALLStatement(stmt,nOtherArgs),
   StatementUsesMemoryOfComputableLength(stmt,_,0),
   Statement_Uses(stmt,actual,index),
   index < nOtherArgs.
in file uses_defs_abstractions.dl [382:1-387:22])_");
if(!(rel_310_StatementUsesMemoryOfComputableLength->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_97_CALLStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
for(const auto& env0 : *rel_97_CALLStatement) {
if( !rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt)).empty()) {
auto range = rel_7_Statement_Uses->lowerUpperRange_102(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[1]))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2])}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,index) :- 
   CALLStatement(stmt,nOtherArgs),
   StatementUsesMemory_ActualMemoryArg(stmt,_,_,_),
   Statement_Uses(stmt,actual,index),
   index < nOtherArgs.
in file uses_defs_abstractions.dl [382:1-387:22])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_97_CALLStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_97_CALLStatement) {
if( !rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt)).empty()) {
auto range = rel_7_Statement_Uses->lowerUpperRange_102(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(env0[1]))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2])}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(stmt,actual,(index+nOtherArgs)) :- 
   CALLStatement(stmt,nOtherArgs),
   StatementUsesMemory_ActualMemoryArg(stmt,_,index,actual).
in file uses_defs_abstractions.dl [389:1-391:63])_");
if(!(rel_97_CALLStatement->empty()) && !(rel_512_StatementUsesMemory_ActualMemoryArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_97_CALLStatement) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(env0[1])))}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(callDataCopy,arrayVar,0) :- 
   CallDataCopyArgInfo(callDataCopy,arrayVar,_).
in file uses_defs_abstractions.dl [592:1-594:50])_");
if(!(rel_383_CallDataCopyArgInfo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_383_CallDataCopyArgInfo_op_ctxt,rel_383_CallDataCopyArgInfo->createContext());
for(const auto& env0 : *rel_383_CallDataCopyArgInfo) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(0))}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_ActualArg(callDataCopy,arrVarRep,0) :- 
   CALLDATACOPY_AllCalldata(callDataCopy),
   CALLDATACOPY(callDataCopy,array,_,_),
   VarIsArray(array,arrVarRep).
in file uses_defs_abstractions.dl [596:1-600:32])_");
if(!(rel_94_CALLDATACOPY->empty()) && !(rel_489_VarIsArray->empty()) && !(rel_388_CALLDATACOPY_AllCalldata->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_388_CALLDATACOPY_AllCalldata_op_ctxt,rel_388_CALLDATACOPY_AllCalldata->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
for(const auto& env0 : *rel_388_CALLDATACOPY_AllCalldata) {
auto range = rel_94_CALLDATACOPY->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(RamSigned(0))}};
rel_514_StatementUsesMemory_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_94_CALLDATACOPY->purge();
if (pruneImdtRels) rel_4_LOGStatement->purge();
if (pruneImdtRels) rel_98_LOGIndexedArg->purge();
if (pruneImdtRels) rel_383_CallDataCopyArgInfo->purge();
if (pruneImdtRels) rel_388_CALLDATACOPY_AllCalldata->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_264(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MemoryStatement_ActualArg(stmt,arrVarRep,0) :- 
   StatementUsesMemory_UsesArray(stmt,_,array),
   VarIsArray(array,arrVarRep),
   !StatementUsesMemoryOfComputableLength(stmt,_,_).
in file arrays.dl [158:1-161:54])_");
if(!(rel_494_StatementUsesMemory_UsesArray->empty()) && !(rel_489_VarIsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt,rel_515_MemoryStatement_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt,rel_310_StatementUsesMemoryOfComputableLength->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_494_StatementUsesMemory_UsesArray_op_ctxt,rel_494_StatementUsesMemory_UsesArray->createContext());
for(const auto& env0 : *rel_494_StatementUsesMemory_UsesArray) {
if( !(!rel_310_StatementUsesMemoryOfComputableLength->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_310_StatementUsesMemoryOfComputableLength_op_ctxt)).empty())) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_515_MemoryStatement_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(MemoryStatement_ActualArg(stmt,actual,index) :- 
   StatementUsesMemory_ActualArg(stmt,actual,index).
in file arrays.dl [163:1-164:54])_");
if(!(rel_514_StatementUsesMemory_ActualArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_514_StatementUsesMemory_ActualArg_op_ctxt,rel_514_StatementUsesMemory_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt,rel_515_MemoryStatement_ActualArg->createContext());
for(const auto& env0 : *rel_514_StatementUsesMemory_ActualArg) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_515_MemoryStatement_ActualArg->insert(tuple,READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_310_StatementUsesMemoryOfComputableLength->purge();
if (pruneImdtRels) rel_494_StatementUsesMemory_UsesArray->purge();
if (pruneImdtRels) rel_514_StatementUsesMemory_ActualArg->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_265(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHA3_1ARG(stmt,arg1,def) :- 
   SHA3(stmt,_,_,def),
   MemoryStatement_ActualArg(stmt,arg1,0),
   !MemoryStatement_ActualArg(stmt,_,1).
in file clienthelpers.dl [11:1-14:42])_");
if(!(rel_63_SHA3->empty()) && !(rel_515_MemoryStatement_ActualArg->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt,rel_515_MemoryStatement_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_516_SHA3_1ARG_op_ctxt,rel_516_SHA3_1ARG->createContext());
for(const auto& env0 : *rel_63_SHA3) {
if( !(!rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt)).empty())) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3])}};
rel_516_SHA3_1ARG->insert(tuple,READ_OP_CONTEXT(rel_516_SHA3_1ARG_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_266(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHA3_2ARG(stmt,arg1,arg2,def) :- 
   SHA3(stmt,_,_,def),
   MemoryStatement_ActualArg(stmt,arg1,0),
   MemoryStatement_ActualArg(stmt,arg2,1),
   !MemoryStatement_ActualArg(stmt,_,2).
in file clienthelpers.dl [18:1-22:42])_");
if(!(rel_515_MemoryStatement_ActualArg->empty()) && !(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt,rel_515_MemoryStatement_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_517_SHA3_2ARG_op_ctxt,rel_517_SHA3_2ARG->createContext());
for(const auto& env0 : *rel_63_SHA3) {
if( !(!rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt)).empty())) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env0[3])}};
rel_517_SHA3_2ARG->insert(tuple,READ_OP_CONTEXT(rel_517_SHA3_2ARG_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_267(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHA3_3ARG(stmt,arg1,arg2,arg3,def) :- 
   SHA3(stmt,_,_,def),
   MemoryStatement_ActualArg(stmt,arg1,0),
   MemoryStatement_ActualArg(stmt,arg2,1),
   MemoryStatement_ActualArg(stmt,arg3,2),
   !MemoryStatement_ActualArg(stmt,_,3).
in file clienthelpers.dl [26:1-31:42])_");
if(!(rel_515_MemoryStatement_ActualArg->empty()) && !(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt,rel_515_MemoryStatement_ActualArg->createContext());
CREATE_OP_CONTEXT(rel_518_SHA3_3ARG_op_ctxt,rel_518_SHA3_3ARG->createContext());
for(const auto& env0 : *rel_63_SHA3) {
if( !(!rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt)).empty())) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_515_MemoryStatement_ActualArg->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_515_MemoryStatement_ActualArg_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env0[3])}};
rel_518_SHA3_3ARG->insert(tuple,READ_OP_CONTEXT(rel_518_SHA3_3ARG_op_ctxt));
}
}
}
}
}
}
();}
if (pruneImdtRels) rel_515_MemoryStatement_ActualArg->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_268(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PHIStmtTwoUses(phi,var1,var2,def) :- 
   PHI(phi,_,_),
   Statement_Defines(phi,def,0),
   Statement_Uses(phi,var1,-1),
   Statement_Uses(phi,var2,-1),
   var1 != var2,
   2 = count : { Statement_Uses(phi,+underscore_590,+underscore_591) }.
in file loops.dl [10:1-16:16])_");
if(!(rel_48_PHI->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_48_PHI_op_ctxt,rel_48_PHI->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
for(const auto& env0 : *rel_48_PHI) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_7_Statement_Uses->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(2)) == ramBitCast<RamDomain>(env1[0]))) {
auto range = rel_1_Statement_Defines->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(-1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(-1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(-1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(-1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
if( (ramBitCast<RamDomain>(env3[1]) != ramBitCast<RamDomain>(env4[1]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast(env4[1]),ramBitCast(env2[1])}};
rel_49_PHIStmtTwoUses->insert(tuple,READ_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt));
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_269(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHA3_KnownContent(sha3,val) :- 
   SHA3_1ARG(sha3,arg,_),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg,val).
in file clienthelpers.dl [36:1-38:58])_");
if(!(rel_516_SHA3_1ARG->empty()) && !(rel_370_MSTOREToMemConsStmt_WrittenValue->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_516_SHA3_1ARG_op_ctxt,rel_516_SHA3_1ARG->createContext());
CREATE_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt,rel_519_SHA3_KnownContent->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
for(const auto& env0 : *rel_516_SHA3_1ARG) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[4])}};
rel_519_SHA3_KnownContent->insert(tuple,READ_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(SHA3_KnownContent(sha3,cat(val1,substr(val2,2,strlen(val2)))) :- 
   SHA3_2ARG(sha3,arg1,arg2,_),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg1,val1),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg2,val2).
in file clienthelpers.dl [40:1-44:57])_");
if(!(rel_370_MSTOREToMemConsStmt_WrittenValue->empty()) && !(rel_517_SHA3_2ARG->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_517_SHA3_2ARG_op_ctxt,rel_517_SHA3_2ARG->createContext());
CREATE_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt,rel_519_SHA3_KnownContent->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
for(const auto& env0 : *rel_517_SHA3_2ARG) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(symTable.encode(symTable.decode(env1[4]) + symTable.decode(symTable.encode(substr_wrapper(symTable.decode(env2[4]),(RamSigned(2)),(static_cast<RamSigned>(symTable.decode(env2[4]).size())))))))}};
rel_519_SHA3_KnownContent->insert(tuple,READ_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(SHA3_KnownContent(sha3,cat(val1,substr(val2,2,strlen(val2)),substr(val3,2,strlen(val3)))) :- 
   SHA3_3ARG(sha3,arg1,arg2,arg3,_),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg1,val1),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg2,val2),
   MSTOREToMemConsStmt_WrittenValue(_,sha3,_,arg3,val3).
in file clienthelpers.dl [46:1-51:88])_");
if(!(rel_370_MSTOREToMemConsStmt_WrittenValue->empty()) && !(rel_518_SHA3_3ARG->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_518_SHA3_3ARG_op_ctxt,rel_518_SHA3_3ARG->createContext());
CREATE_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt,rel_519_SHA3_KnownContent->createContext());
CREATE_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt,rel_370_MSTOREToMemConsStmt_WrittenValue->createContext());
for(const auto& env0 : *rel_518_SHA3_3ARG) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_370_MSTOREToMemConsStmt_WrittenValue->lowerUpperRange_01010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_370_MSTOREToMemConsStmt_WrittenValue_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(symTable.encode(symTable.decode(env1[4]) + symTable.decode(symTable.encode(substr_wrapper(symTable.decode(env2[4]),(RamSigned(2)),(static_cast<RamSigned>(symTable.decode(env2[4]).size()))))) + symTable.decode(symTable.encode(substr_wrapper(symTable.decode(env3[4]),(RamSigned(2)),(static_cast<RamSigned>(symTable.decode(env3[4]).size())))))))}};
rel_519_SHA3_KnownContent->insert(tuple,READ_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_370_MSTOREToMemConsStmt_WrittenValue->purge();
if (pruneImdtRels) rel_516_SHA3_1ARG->purge();
if (pruneImdtRels) rel_517_SHA3_2ARG->purge();
if (pruneImdtRels) rel_518_SHA3_3ARG->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_270(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CallToSignatureFromSHA3(call,@hex_to_str(hexContent)) :- 
   CALLWithPossibleSigHashFromSHA3(call,sha3),
   SHA3_KnownContent(sha3,hexContent),
   (strlen(hexContent)%2) = 0.
in file clienthelpers.dl [56:1-60:37])_");
if(!(rel_513_CALLWithPossibleSigHashFromSHA3->empty()) && !(rel_519_SHA3_KnownContent->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt,rel_519_SHA3_KnownContent->createContext());
CREATE_OP_CONTEXT(rel_520_CallToSignatureFromSHA3_op_ctxt,rel_520_CallToSignatureFromSHA3->createContext());
CREATE_OP_CONTEXT(rel_513_CALLWithPossibleSigHashFromSHA3_op_ctxt,rel_513_CALLWithPossibleSigHashFromSHA3->createContext());
for(const auto& env0 : *rel_513_CALLWithPossibleSigHashFromSHA3) {
auto range = rel_519_SHA3_KnownContent->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_519_SHA3_KnownContent_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>((ramBitCast<RamSigned>(static_cast<RamSigned>(symTable.decode(env1[1]).size())) % ramBitCast<RamSigned>(RamSigned(2)))) == ramBitCast<RamDomain>(RamSigned(0)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(symTable.encode(functors::hex_to_str(symTable.decode(env1[1]).c_str())))}};
rel_520_CallToSignatureFromSHA3->insert(tuple,READ_OP_CONTEXT(rel_520_CallToSignatureFromSHA3_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call\tsigText"},{"auxArity","0"},{"name","CallToSignatureFromSHA3"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"call\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_520_CallToSignatureFromSHA3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_513_CALLWithPossibleSigHashFromSHA3->purge();
if (pruneImdtRels) rel_519_SHA3_KnownContent->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_271(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementConsumesMemoryNoArgs(stmt) :- 
   StatementUsesMemory_LengthVar(stmt,_,lenvar),
   Statement_Opcode(stmt,op),
   op != "REVERT",
   !Variable_Value(lenvar,"0x0"),
   !StatementUsesMemory_ActualMemoryArg(stmt,_,_,_).
in file metrics.dl [191:1-196:55])_");
if(!(rel_66_StatementUsesMemory_LengthVar->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_521_StatementConsumesMemoryNoArgs_op_ctxt,rel_521_StatementConsumesMemoryNoArgs->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
if( !(!rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt)).empty()) && !(rel_211_Variable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt)))) {
auto range = rel_2_Statement_Opcode->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[1]) != ramBitCast<RamDomain>(RamSigned(60)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_521_StatementConsumesMemoryNoArgs->insert(tuple,READ_OP_CONTEXT(rel_521_StatementConsumesMemoryNoArgs_op_ctxt));
break;
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_272(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ABIWriteMSTORE(mstore) :- 
   ABIEncodedArrayWriteToIsNotArrayOrLen(mstore,_,_,_).
in file metrics.dl [117:1-118:58])_");
if(!(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_522_ABIWriteMSTORE_op_ctxt,rel_522_ABIWriteMSTORE->createContext());
CREATE_OP_CONTEXT(rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen_op_ctxt,rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->createContext());
for(const auto& env0 : *rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_522_ABIWriteMSTORE->insert(tuple,READ_OP_CONTEXT(rel_522_ABIWriteMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ABIWriteMSTORE(mstore) :- 
   ABIEncodedArrayIncludesArrayAtConcreteIndex(abiArr,_,_,index,_),
   ABIEncodedArrayWriteTo(mstore,abiArr,_,index).
in file metrics.dl [120:1-122:52])_");
if(!(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->empty()) && !(rel_356_ABIEncodedArrayWriteTo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_522_ABIWriteMSTORE_op_ctxt,rel_522_ABIWriteMSTORE->createContext());
CREATE_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt,rel_356_ABIEncodedArrayWriteTo->createContext());
CREATE_OP_CONTEXT(rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex_op_ctxt,rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->createContext());
for(const auto& env0 : *rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex) {
auto range = rel_356_ABIEncodedArrayWriteTo->lowerUpperRange_0101(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_356_ABIEncodedArrayWriteTo_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[0])}};
rel_522_ABIWriteMSTORE->insert(tuple,READ_OP_CONTEXT(rel_522_ABIWriteMSTORE_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_457_ABIEncodedArrayIncludesArrayAtConcreteIndex->purge();
if (pruneImdtRels) rel_356_ABIEncodedArrayWriteTo->purge();
if (pruneImdtRels) rel_510_ABIEncodedArrayWriteToIsNotArrayOrLen->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_273(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArgWriteAny(mstore) :- 
   ABIWriteMSTORE(mstore).
in file metrics.dl [107:1-110:31])_");
if(!(rel_522_ABIWriteMSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_522_ABIWriteMSTORE_op_ctxt,rel_522_ABIWriteMSTORE->createContext());
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
for(const auto& env0 : *rel_522_ABIWriteMSTORE) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_523_ArgWriteAny->insert(tuple,READ_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ArgWriteAny(mstore) :- 
   StatementUsesMemoryWriteAtRelativeIndex(_,_,mstore,_).
in file metrics.dl [107:1-110:31])_");
if(!(rel_359_StatementUsesMemoryWriteAtRelativeIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
CREATE_OP_CONTEXT(rel_359_StatementUsesMemoryWriteAtRelativeIndex_op_ctxt,rel_359_StatementUsesMemoryWriteAtRelativeIndex->createContext());
for(const auto& env0 : *rel_359_StatementUsesMemoryWriteAtRelativeIndex) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[2])}};
rel_523_ArgWriteAny->insert(tuple,READ_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ArgWriteAny(mstore) :- 
   MSTOREToMLOAD(mstore,_,_).
in file metrics.dl [107:1-110:31])_");
if(!(rel_490_MSTOREToMLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
CREATE_OP_CONTEXT(rel_490_MSTOREToMLOAD_op_ctxt,rel_490_MSTOREToMLOAD->createContext());
for(const auto& env0 : *rel_490_MSTOREToMLOAD) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_523_ArgWriteAny->insert(tuple,READ_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_359_StatementUsesMemoryWriteAtRelativeIndex->purge();
if (pruneImdtRels) rel_522_ABIWriteMSTORE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_274(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   MSTOREFreePtr(mstore).
in file metrics.dl [130:1-137:23])_");
if(!(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   ArrayStoreAtIndex(mstore,_,_,_).
in file metrics.dl [130:1-137:23])_");
if(!(rel_474_ArrayStoreAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_474_ArrayStoreAtIndex_op_ctxt,rel_474_ArrayStoreAtIndex->createContext());
for(const auto& env0 : *rel_474_ArrayStoreAtIndex) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   ArrayStore(mstore,_,_).
in file metrics.dl [130:1-137:23])_");
if(!(rel_508_ArrayStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
for(const auto& env0 : *rel_508_ArrayStore) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   AllocationAny(mstore).
in file metrics.dl [130:1-137:23])_");
if(!(rel_492_AllocationAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_492_AllocationAny_op_ctxt,rel_492_AllocationAny->createContext());
for(const auto& env0 : *rel_492_AllocationAny) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   _StructStore(mstore).
in file metrics.dl [130:1-137:23])_");
if(!(rel_499_StructStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_499_StructStore_op_ctxt,rel_499_StructStore->createContext());
for(const auto& env0 : *rel_499_StructStore) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMSTORE(mstore) :- 
   ArgWriteAny(mstore).
in file metrics.dl [130:1-137:23])_");
if(!(rel_523_ArgWriteAny->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
for(const auto& env0 : *rel_523_ArgWriteAny) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_524_ModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_474_ArrayStoreAtIndex->purge();
if (pruneImdtRels) rel_41_MSTOREFreePtr->purge();
if (pruneImdtRels) rel_499_StructStore->purge();
if (pruneImdtRels) rel_492_AllocationAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_275(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(NonModeledMSTORE(mstore) :- 
   MSTORE(mstore,_,_),
   !ModeledMSTORE(mstore).
in file metrics.dl [154:1-156:26])_");
if(!(rel_40_MSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt,rel_524_ModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_525_NonModeledMSTORE_op_ctxt,rel_525_NonModeledMSTORE->createContext());
for(const auto& env0 : *rel_40_MSTORE) {
if( !(rel_524_ModeledMSTORE->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_524_ModeledMSTORE_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_525_NonModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_525_NonModeledMSTORE_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_524_ModeledMSTORE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_276(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_NonModeledMSTORE(mstore) :- 
   NonModeledMSTORE(mstore).
in file metrics.dl [57:1-58:28])_");
if(!(rel_525_NonModeledMSTORE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_525_NonModeledMSTORE_op_ctxt,rel_525_NonModeledMSTORE->createContext());
CREATE_OP_CONTEXT(rel_526_Analytics_NonModeledMSTORE_op_ctxt,rel_526_Analytics_NonModeledMSTORE->createContext());
for(const auto& env0 : *rel_525_NonModeledMSTORE) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_526_Analytics_NonModeledMSTORE->insert(tuple,READ_OP_CONTEXT(rel_526_Analytics_NonModeledMSTORE_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mstore"},{"auxArity","0"},{"name","Analytics_NonModeledMSTORE"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"mstore\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_526_Analytics_NonModeledMSTORE);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_525_NonModeledMSTORE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_277(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayStoreSimple(stmt) :- 
   ArrayStore(stmt,_,_),
   !ArgWriteAny(stmt).
in file metrics.dl [124:1-124:69])_");
if(!(rel_508_ArrayStore->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
CREATE_OP_CONTEXT(rel_508_ArrayStore_op_ctxt,rel_508_ArrayStore->createContext());
CREATE_OP_CONTEXT(rel_527_ArrayStoreSimple_op_ctxt,rel_527_ArrayStoreSimple->createContext());
for(const auto& env0 : *rel_508_ArrayStore) {
if( !(rel_523_ArgWriteAny->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_527_ArrayStoreSimple->insert(tuple,READ_OP_CONTEXT(rel_527_ArrayStoreSimple_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_508_ArrayStore->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_278(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single9(@generator_0) :- 
   @generator_0 = count : { ArrayStoreSimple(+underscore_926) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_527_ArrayStoreSimple_op_ctxt,rel_527_ArrayStoreSimple->createContext());
CREATE_OP_CONTEXT(rel_528_agg_single9_op_ctxt,rel_528_agg_single9->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_527_ArrayStoreSimple->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_528_agg_single9->insert(tuple,READ_OP_CONTEXT(rel_528_agg_single9_op_ctxt));
}
}
();if (pruneImdtRels) rel_527_ArrayStoreSimple->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_279(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(PossibleArray(array) :- 
   MLOADFreePtr_To(_,array),
   VarPlusThirtyTwo(array,_).
in file arrays.dl [326:1-328:30])_");
if(!(rel_29_MLOADFreePtr_To->empty()) && !(rel_38_VarPlusThirtyTwo->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt,rel_38_VarPlusThirtyTwo->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
if( !rel_38_VarPlusThirtyTwo->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_38_VarPlusThirtyTwo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_50_PossibleArray->insert(tuple,READ_OP_CONTEXT(rel_50_PossibleArray_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(PossibleArray(array) :- 
   MSIZE(_,array).
in file arrays.dl [330:1-331:19])_");
if(!(rel_3_MSIZE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
for(const auto& env0 : *rel_3_MSIZE) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_50_PossibleArray->insert(tuple,READ_OP_CONTEXT(rel_50_PossibleArray_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(PossibleArray(array) :- 
   PHIStmtTwoUses(_,msizeVar,mloadFreePtrVar,array),
   MSIZE(_,msizeVar),
   Statement_Defines(mload,mloadFreePtrVar,0),
   MLOADFreePtr(mload).
in file arrays.dl [333:1-337:23])_");
if(!(rel_3_MSIZE->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_49_PHIStmtTwoUses->empty()) && !(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_3_MSIZE_op_ctxt,rel_3_MSIZE->createContext());
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_49_PHIStmtTwoUses_op_ctxt,rel_49_PHIStmtTwoUses->createContext());
CREATE_OP_CONTEXT(rel_50_PossibleArray_op_ctxt,rel_50_PossibleArray->createContext());
for(const auto& env0 : *rel_49_PHIStmtTwoUses) {
if( !rel_3_MSIZE->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_3_MSIZE_op_ctxt)).empty()) {
auto range = rel_1_Statement_Defines->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
if( rel_28_MLOADFreePtr->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[3])}};
rel_50_PossibleArray->insert(tuple,READ_OP_CONTEXT(rel_50_PossibleArray_op_ctxt));
break;
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_280(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single11(@generator_0) :- 
   @generator_0 = count : { ArgWriteAny(+underscore_893) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_523_ArgWriteAny_op_ctxt,rel_523_ArgWriteAny->createContext());
CREATE_OP_CONTEXT(rel_529_agg_single11_op_ctxt,rel_529_agg_single11->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_523_ArgWriteAny->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_529_agg_single11->insert(tuple,READ_OP_CONTEXT(rel_529_agg_single11_op_ctxt));
}
}
();if (pruneImdtRels) rel_523_ArgWriteAny->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_281(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Verbatim_AllVsModeledMSTOREs(z,z0,z1,z2,z3,z4,z5) :- 
   __agg_single6(z),
   __agg_single7(z0),
   __agg_single8(z1),
   __agg_single9(z2),
   __agg_single10(z3),
   __agg_single11(z4),
   __agg_single12(z5).
in file metrics.dl [140:1-147:41])_");
if(!(rel_43_agg_single7->empty()) && !(rel_529_agg_single11->empty()) && !(rel_476_agg_single8->empty()) && !(rel_493_agg_single10->empty()) && !(rel_528_agg_single9->empty()) && !(rel_500_agg_single12->empty()) && !(rel_47_agg_single6->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_43_agg_single7_op_ctxt,rel_43_agg_single7->createContext());
CREATE_OP_CONTEXT(rel_47_agg_single6_op_ctxt,rel_47_agg_single6->createContext());
CREATE_OP_CONTEXT(rel_476_agg_single8_op_ctxt,rel_476_agg_single8->createContext());
CREATE_OP_CONTEXT(rel_493_agg_single10_op_ctxt,rel_493_agg_single10->createContext());
CREATE_OP_CONTEXT(rel_500_agg_single12_op_ctxt,rel_500_agg_single12->createContext());
CREATE_OP_CONTEXT(rel_528_agg_single9_op_ctxt,rel_528_agg_single9->createContext());
CREATE_OP_CONTEXT(rel_529_agg_single11_op_ctxt,rel_529_agg_single11->createContext());
CREATE_OP_CONTEXT(rel_530_Verbatim_AllVsModeledMSTOREs_op_ctxt,rel_530_Verbatim_AllVsModeledMSTOREs->createContext());
for(const auto& env0 : *rel_47_agg_single6) {
for(const auto& env1 : *rel_43_agg_single7) {
for(const auto& env2 : *rel_476_agg_single8) {
for(const auto& env3 : *rel_528_agg_single9) {
for(const auto& env4 : *rel_493_agg_single10) {
for(const auto& env5 : *rel_529_agg_single11) {
for(const auto& env6 : *rel_500_agg_single12) {
Tuple<RamDomain,7> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[0]),ramBitCast(env3[0]),ramBitCast(env4[0]),ramBitCast(env5[0]),ramBitCast(env6[0])}};
rel_530_Verbatim_AllVsModeledMSTOREs->insert(tuple,READ_OP_CONTEXT(rel_530_Verbatim_AllVsModeledMSTOREs_op_ctxt));
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","numOfMemStmts\tfreeptr\tstorei\tstore\tallocate\targ\tstructstore"},{"auxArity","0"},{"name","Verbatim_AllVsModeledMSTOREs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"numOfMemStmts\", \"freeptr\", \"storei\", \"store\", \"allocate\", \"arg\", \"structstore\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_530_Verbatim_AllVsModeledMSTOREs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_493_agg_single10->purge();
if (pruneImdtRels) rel_529_agg_single11->purge();
if (pruneImdtRels) rel_500_agg_single12->purge();
if (pruneImdtRels) rel_43_agg_single7->purge();
if (pruneImdtRels) rel_476_agg_single8->purge();
if (pruneImdtRels) rel_528_agg_single9->purge();
if (pruneImdtRels) rel_47_agg_single6->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_282(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_MemConsStmtUsesFromDistinctPaths(memConsStmt) :- 
   StatementUsesMemory_LengthVar(memConsStmt,_,lenVar),
   localFlowAnalysis.Flows(phiVar,lenVar),
   PHI(_,_,phiVar).
in file metrics.dl [52:1-55:21])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_48_PHI->empty()) && !(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_48_PHI_op_ctxt,rel_48_PHI->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_531_Analytics_MemConsStmtUsesFromDistinctPaths_op_ctxt,rel_531_Analytics_MemConsStmtUsesFromDistinctPaths->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !rel_48_PHI->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_48_PHI_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_531_Analytics_MemConsStmtUsesFromDistinctPaths->insert(tuple,READ_OP_CONTEXT(rel_531_Analytics_MemConsStmtUsesFromDistinctPaths_op_ctxt));
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","memConsStmt"},{"auxArity","0"},{"name","Analytics_MemConsStmtUsesFromDistinctPaths"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"memConsStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_531_Analytics_MemConsStmtUsesFromDistinctPaths);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_48_PHI->purge();
if (pruneImdtRels) rel_66_StatementUsesMemory_LengthVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_283(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayLoad(mload,arrId,to) :- 
   MLOAD(mload,indexVar,to),
   localFlowAnalysis.Flows(arrayDataStart,indexVar),
   ArrayDataStartVar(array,arrayDataStart),
   VarIsArray(array,arrId),
   !ArrayLoadAtIndex(mload,_,_,_).
in file arrays.dl [245:1-250:37])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_436_ArrayDataStartVar->empty()) && !(rel_10_MLOAD->empty()) && !(rel_489_VarIsArray->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt,rel_436_ArrayDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt,rel_477_ArrayLoadAtIndex->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt,rel_532_ArrayLoad->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
if( !(!rel_477_ArrayLoadAtIndex->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt)).empty())) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_436_ArrayDataStartVar->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_436_ArrayDataStartVar_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env3[1]),ramBitCast(env0[2])}};
rel_532_ArrayLoad->insert(tuple,READ_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ArrayLoad(mload,arrId,to) :- 
   MLOAD(mload,indexVar,to),
   localFlowAnalysis.Flows(rawDataArray,indexVar),
   RawDataArrayVar_ClassRep(rawDataArray,arrId).
in file arrays.dl [259:1-262:49])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_488_RawDataArrayVar_ClassRep->empty()) && !(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt,rel_488_RawDataArrayVar_ClassRep->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt,rel_532_ArrayLoad->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_488_RawDataArrayVar_ClassRep->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_488_RawDataArrayVar_ClassRep_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel_532_ArrayLoad->insert(tuple,READ_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_436_ArrayDataStartVar->purge();
if (pruneImdtRels) rel_488_RawDataArrayVar_ClassRep->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_284(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   MLOADReadsReturnOfCALL(mload,_,_).
in file metrics.dl [205:1-212:36])_");
if(!(rel_371_MLOADReadsReturnOfCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_371_MLOADReadsReturnOfCALL_op_ctxt,rel_371_MLOADReadsReturnOfCALL->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_371_MLOADReadsReturnOfCALL) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   MLOADFreePtr(mload).
in file metrics.dl [205:1-212:36])_");
if(!(rel_28_MLOADFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   _StructLoad(mload).
in file metrics.dl [205:1-212:36])_");
if(!(rel_421_StructLoad->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_421_StructLoad_op_ctxt,rel_421_StructLoad->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_421_StructLoad) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   MSTOREToMLOAD(_,mload,_).
in file metrics.dl [205:1-212:36])_");
if(!(rel_490_MSTOREToMLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_490_MSTOREToMLOAD_op_ctxt,rel_490_MSTOREToMLOAD->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_490_MSTOREToMLOAD) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   MLOADReadsArrayLength(mload).
in file metrics.dl [205:1-212:36])_");
if(!(rel_495_MLOADReadsArrayLength->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_495_MLOADReadsArrayLength_op_ctxt,rel_495_MLOADReadsArrayLength->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_495_MLOADReadsArrayLength) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   ArrayLoad(mload,_,_).
in file metrics.dl [205:1-212:36])_");
if(!(rel_532_ArrayLoad->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt,rel_532_ArrayLoad->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_532_ArrayLoad) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ModeledMLOAD(mload) :- 
   ArrayLoadAtIndex(mload,_,_,_).
in file metrics.dl [205:1-212:36])_");
if(!(rel_477_ArrayLoadAtIndex->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_477_ArrayLoadAtIndex_op_ctxt,rel_477_ArrayLoadAtIndex->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
for(const auto& env0 : *rel_477_ArrayLoadAtIndex) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_533_ModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_477_ArrayLoadAtIndex->purge();
if (pruneImdtRels) rel_28_MLOADFreePtr->purge();
if (pruneImdtRels) rel_495_MLOADReadsArrayLength->purge();
if (pruneImdtRels) rel_490_MSTOREToMLOAD->purge();
if (pruneImdtRels) rel_371_MLOADReadsReturnOfCALL->purge();
if (pruneImdtRels) rel_421_StructLoad->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_285(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(NonModeledMLOAD(mload) :- 
   MLOAD(mload,_,_),
   !ModeledMLOAD(mload).
in file metrics.dl [218:1-220:24])_");
if(!(rel_10_MLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt,rel_533_ModeledMLOAD->createContext());
CREATE_OP_CONTEXT(rel_534_NonModeledMLOAD_op_ctxt,rel_534_NonModeledMLOAD->createContext());
for(const auto& env0 : *rel_10_MLOAD) {
if( !(rel_533_ModeledMLOAD->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_533_ModeledMLOAD_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_534_NonModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_534_NonModeledMLOAD_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_533_ModeledMLOAD->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_286(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_NonModeledMLOAD(mload) :- 
   NonModeledMLOAD(mload).
in file metrics.dl [60:1-61:26])_");
if(!(rel_534_NonModeledMLOAD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_534_NonModeledMLOAD_op_ctxt,rel_534_NonModeledMLOAD->createContext());
CREATE_OP_CONTEXT(rel_535_Analytics_NonModeledMLOAD_op_ctxt,rel_535_Analytics_NonModeledMLOAD->createContext());
for(const auto& env0 : *rel_534_NonModeledMLOAD) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_535_Analytics_NonModeledMLOAD->insert(tuple,READ_OP_CONTEXT(rel_535_Analytics_NonModeledMLOAD_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mload"},{"auxArity","0"},{"name","Analytics_NonModeledMLOAD"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"mload\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_535_Analytics_NonModeledMLOAD);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_534_NonModeledMLOAD->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_287(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ArrayLoadSimple(stmt) :- 
   ArrayLoad(stmt,_,_).
in file metrics.dl [215:1-215:46])_");
if(!(rel_532_ArrayLoad->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_532_ArrayLoad_op_ctxt,rel_532_ArrayLoad->createContext());
CREATE_OP_CONTEXT(rel_536_ArrayLoadSimple_op_ctxt,rel_536_ArrayLoadSimple->createContext());
for(const auto& env0 : *rel_532_ArrayLoad) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_536_ArrayLoadSimple->insert(tuple,READ_OP_CONTEXT(rel_536_ArrayLoadSimple_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_532_ArrayLoad->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_288(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single21(@generator_0) :- 
   @generator_0 = count : { ArrayLoadSimple(+underscore_910) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_536_ArrayLoadSimple_op_ctxt,rel_536_ArrayLoadSimple->createContext());
CREATE_OP_CONTEXT(rel_537_agg_single21_op_ctxt,rel_537_agg_single21->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_536_ArrayLoadSimple->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_537_agg_single21->insert(tuple,READ_OP_CONTEXT(rel_537_agg_single21_op_ctxt));
}
}
();if (pruneImdtRels) rel_536_ArrayLoadSimple->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_289(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Verbatim_AllVsModeledMLOADs(z,z0,z1,z2,z3,z4,z5) :- 
   __agg_single16(z),
   __agg_single17(z0),
   __agg_single18(z1),
   __agg_single19(z2),
   __agg_single20(z3),
   __agg_single21(z4),
   __agg_single22(z5).
in file metrics.dl [222:1-230:38])_");
if(!(rel_30_agg_single17->empty()) && !(rel_537_agg_single21->empty()) && !(rel_372_agg_single18->empty()) && !(rel_479_agg_single20->empty()) && !(rel_496_agg_single19->empty()) && !(rel_422_agg_single22->empty()) && !(rel_11_agg_single16->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_11_agg_single16_op_ctxt,rel_11_agg_single16->createContext());
CREATE_OP_CONTEXT(rel_30_agg_single17_op_ctxt,rel_30_agg_single17->createContext());
CREATE_OP_CONTEXT(rel_372_agg_single18_op_ctxt,rel_372_agg_single18->createContext());
CREATE_OP_CONTEXT(rel_422_agg_single22_op_ctxt,rel_422_agg_single22->createContext());
CREATE_OP_CONTEXT(rel_479_agg_single20_op_ctxt,rel_479_agg_single20->createContext());
CREATE_OP_CONTEXT(rel_496_agg_single19_op_ctxt,rel_496_agg_single19->createContext());
CREATE_OP_CONTEXT(rel_537_agg_single21_op_ctxt,rel_537_agg_single21->createContext());
CREATE_OP_CONTEXT(rel_538_Verbatim_AllVsModeledMLOADs_op_ctxt,rel_538_Verbatim_AllVsModeledMLOADs->createContext());
for(const auto& env0 : *rel_11_agg_single16) {
for(const auto& env1 : *rel_30_agg_single17) {
for(const auto& env2 : *rel_372_agg_single18) {
for(const auto& env3 : *rel_496_agg_single19) {
for(const auto& env4 : *rel_479_agg_single20) {
for(const auto& env5 : *rel_537_agg_single21) {
for(const auto& env6 : *rel_422_agg_single22) {
Tuple<RamDomain,7> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[0]),ramBitCast(env3[0]),ramBitCast(env4[0]),ramBitCast(env5[0]),ramBitCast(env6[0])}};
rel_538_Verbatim_AllVsModeledMLOADs->insert(tuple,READ_OP_CONTEXT(rel_538_Verbatim_AllVsModeledMLOADs_op_ctxt));
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","mloads\tfreeptr\tretRead\tarrLen\tarrloadi\tarrload\tstructload"},{"auxArity","0"},{"name","Verbatim_AllVsModeledMLOADs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"mloads\", \"freeptr\", \"retRead\", \"arrLen\", \"arrloadi\", \"arrload\", \"structload\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_538_Verbatim_AllVsModeledMLOADs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_30_agg_single17->purge();
if (pruneImdtRels) rel_372_agg_single18->purge();
if (pruneImdtRels) rel_496_agg_single19->purge();
if (pruneImdtRels) rel_479_agg_single20->purge();
if (pruneImdtRels) rel_537_agg_single21->purge();
if (pruneImdtRels) rel_422_agg_single22->purge();
if (pruneImdtRels) rel_11_agg_single16->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_290(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SUB(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"SUB"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [58:67-58:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(7))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(7))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_51_SUB->insert(tuple,READ_OP_CONTEXT(rel_51_SUB_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_291(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","constValSigHash\tnormalizedSigHash\tsigText"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","ConstantPossibleSigHash.csv"},{"name","ConstantPossibleSigHash"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"constValSigHash\", \"normalizedSigHash\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Value\", \"s:Value\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_539_ConstantPossibleSigHash);
} catch (std::exception& e) {std::cerr << "Error loading ConstantPossibleSigHash data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_292(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CallToSignature(call,sigText) :- 
   ConstantPossibleSigHash(sigHashVal,_,sigText),
   Variable_Value(sigVar,sigHashVal),
   sigHashVal != "0xffffffff",
   localFlowAnalysis.Flows(sigVar,actual),
   StatementUsesMemory_ActualMemoryArg(call,_,0,actual),
   CALLStatement(call,_).
in file clienthelpers.dl [77:1-83:26])_");
if(!(rel_211_Variable_Value->empty()) && !(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_97_CALLStatement->empty()) && !(rel_539_ConstantPossibleSigHash->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
CREATE_OP_CONTEXT(rel_539_ConstantPossibleSigHash_op_ctxt,rel_539_ConstantPossibleSigHash->createContext());
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
for(const auto& env0 : *rel_539_ConstantPossibleSigHash) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(61)))) {
auto range = rel_211_Variable_Value->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_211_Variable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_0011(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(env2[1])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0)), ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env3 : range) {
if( !rel_97_CALLStatement->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[0]),ramBitCast(env0[2])}};
rel_540_CallToSignature->insert(tuple,READ_OP_CONTEXT(rel_540_CallToSignature_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(CallToSignature(call,sigText) :- 
   CallToSignatureFromSHA3(call,sigText).
in file clienthelpers.dl [85:1-86:42])_");
if(!(rel_520_CallToSignatureFromSHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_520_CallToSignatureFromSHA3_op_ctxt,rel_520_CallToSignatureFromSHA3->createContext());
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
for(const auto& env0 : *rel_520_CallToSignatureFromSHA3) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_540_CallToSignature->insert(tuple,READ_OP_CONTEXT(rel_540_CallToSignature_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call\tsigText"},{"auxArity","0"},{"name","CallToSignature"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"call\", \"sigText\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_540_CallToSignature);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_97_CALLStatement->purge();
if (pruneImdtRels) rel_539_ConstantPossibleSigHash->purge();
if (pruneImdtRels) rel_520_CallToSignatureFromSHA3->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_293(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_CallWithSig(call) :- 
   CallToSignature(call,_).
in file metrics.dl [49:1-50:28])_");
if(!(rel_540_CallToSignature->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
CREATE_OP_CONTEXT(rel_541_Analytics_CallWithSig_op_ctxt,rel_541_Analytics_CallWithSig->createContext());
for(const auto& env0 : *rel_540_CallToSignature) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_541_Analytics_CallWithSig->insert(tuple,READ_OP_CONTEXT(rel_541_Analytics_CallWithSig_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_CallWithSig"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_541_Analytics_CallWithSig);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_294(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ERC20ApproveCall(call,spender,value) :- 
   CallToSignature(call,"approve(address,uint256)"),
   StatementUsesMemory_ActualMemoryArg(call,_,1,spender),
   StatementUsesMemory_ActualMemoryArg(call,_,2,value).
in file clienthelpers.dl [113:1-116:58])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_540_CallToSignature->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
CREATE_OP_CONTEXT(rel_542_ERC20ApproveCall_op_ctxt,rel_542_ERC20ApproveCall->createContext());
auto range = rel_540_CallToSignature->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(62))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(62))}},READ_OP_CONTEXT(rel_540_CallToSignature_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env2[3])}};
rel_542_ERC20ApproveCall->insert(tuple,READ_OP_CONTEXT(rel_542_ERC20ApproveCall_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_295(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_ERC20ApproveCall(call) :- 
   ERC20ApproveCall(call,_,_).
in file metrics.dl [46:1-47:32])_");
if(!(rel_542_ERC20ApproveCall->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_542_ERC20ApproveCall_op_ctxt,rel_542_ERC20ApproveCall->createContext());
CREATE_OP_CONTEXT(rel_543_Analytics_ERC20ApproveCall_op_ctxt,rel_543_Analytics_ERC20ApproveCall->createContext());
for(const auto& env0 : *rel_542_ERC20ApproveCall) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_543_Analytics_ERC20ApproveCall->insert(tuple,READ_OP_CONTEXT(rel_543_Analytics_ERC20ApproveCall_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20ApproveCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_543_Analytics_ERC20ApproveCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_542_ERC20ApproveCall->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_296(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ERC20TransferCall(call,toAddr,value) :- 
   CallToSignature(call,"transfer(address,uint256)"),
   StatementUsesMemory_ActualMemoryArg(call,_,1,toAddr),
   StatementUsesMemory_ActualMemoryArg(call,_,2,value).
in file clienthelpers.dl [102:1-105:58])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_540_CallToSignature->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
CREATE_OP_CONTEXT(rel_544_ERC20TransferCall_op_ctxt,rel_544_ERC20TransferCall->createContext());
auto range = rel_540_CallToSignature->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(63))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(63))}},READ_OP_CONTEXT(rel_540_CallToSignature_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env2[3])}};
rel_544_ERC20TransferCall->insert(tuple,READ_OP_CONTEXT(rel_544_ERC20TransferCall_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_297(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_ERC20TransferCall(call) :- 
   ERC20TransferCall(call,_,_).
in file metrics.dl [40:1-41:33])_");
if(!(rel_544_ERC20TransferCall->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_544_ERC20TransferCall_op_ctxt,rel_544_ERC20TransferCall->createContext());
CREATE_OP_CONTEXT(rel_545_Analytics_ERC20TransferCall_op_ctxt,rel_545_Analytics_ERC20TransferCall->createContext());
for(const auto& env0 : *rel_544_ERC20TransferCall) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_545_Analytics_ERC20TransferCall->insert(tuple,READ_OP_CONTEXT(rel_545_Analytics_ERC20TransferCall_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20TransferCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_545_Analytics_ERC20TransferCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_544_ERC20TransferCall->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_298(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ERC20TransferFromCall(call,from,to,value) :- 
   CallToSignature(call,"transferFrom(address,address,uint256)"),
   StatementUsesMemory_ActualMemoryArg(call,_,1,from),
   StatementUsesMemory_ActualMemoryArg(call,_,2,to),
   StatementUsesMemory_ActualMemoryArg(call,_,3,value).
in file clienthelpers.dl [107:1-111:58])_");
if(!(rel_512_StatementUsesMemory_ActualMemoryArg->empty()) && !(rel_540_CallToSignature->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt,rel_512_StatementUsesMemory_ActualMemoryArg->createContext());
CREATE_OP_CONTEXT(rel_540_CallToSignature_op_ctxt,rel_540_CallToSignature->createContext());
CREATE_OP_CONTEXT(rel_546_ERC20TransferFromCall_op_ctxt,rel_546_ERC20TransferFromCall->createContext());
auto range = rel_540_CallToSignature->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(64))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(64))}},READ_OP_CONTEXT(rel_540_CallToSignature_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_512_StatementUsesMemory_ActualMemoryArg->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_512_StatementUsesMemory_ActualMemoryArg_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env2[3]),ramBitCast(env3[3])}};
rel_546_ERC20TransferFromCall->insert(tuple,READ_OP_CONTEXT(rel_546_ERC20TransferFromCall_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_512_StatementUsesMemory_ActualMemoryArg->purge();
if (pruneImdtRels) rel_540_CallToSignature->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_299(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Analytics_ERC20TransferFromCall(call) :- 
   ERC20TransferFromCall(call,_,_,_).
in file metrics.dl [43:1-44:40])_");
if(!(rel_546_ERC20TransferFromCall->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_546_ERC20TransferFromCall_op_ctxt,rel_546_ERC20TransferFromCall->createContext());
CREATE_OP_CONTEXT(rel_547_Analytics_ERC20TransferFromCall_op_ctxt,rel_547_Analytics_ERC20TransferFromCall->createContext());
for(const auto& env0 : *rel_546_ERC20TransferFromCall) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_547_Analytics_ERC20TransferFromCall->insert(tuple,READ_OP_CONTEXT(rel_547_Analytics_ERC20TransferFromCall_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","call"},{"auxArity","0"},{"name","Analytics_ERC20TransferFromCall"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"call\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_547_Analytics_ERC20TransferFromCall);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_546_ERC20TransferFromCall->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_300(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tchunk_id"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block_CodeChunkAccessed.csv"},{"name","Block_CodeChunkAccessed"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"chunk_id\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:Chunk\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_548_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << "Error loading Block_CodeChunkAccessed data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_301(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ADDFixx(stmt,a,b,aPlusB) :- 
   ADDFix(stmt,a,b,aPlusB).
in file helpers.dl [32:1-35:27])_");
if(!(rel_9_ADDFix->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
CREATE_OP_CONTEXT(rel_52_ADDFixx_op_ctxt,rel_52_ADDFixx->createContext());
for(const auto& env0 : *rel_9_ADDFix) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_52_ADDFixx->insert(tuple,READ_OP_CONTEXT(rel_52_ADDFixx_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ADDFixx(stmt,a,b,aPlusB) :- 
   SUB(stmt,aPlusB,a,b).
in file helpers.dl [32:1-35:27])_");
if(!(rel_51_SUB->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_52_ADDFixx_op_ctxt,rel_52_ADDFixx->createContext());
for(const auto& env0 : *rel_51_SUB) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[1])}};
rel_52_ADDFixx->insert(tuple,READ_OP_CONTEXT(rel_52_ADDFixx_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ADDFixx(stmt,a,b,aPlusB) :- 
   SUB(stmt,aPlusB,b,a).
in file helpers.dl [32:1-35:27])_");
if(!(rel_51_SUB->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_51_SUB_op_ctxt,rel_51_SUB->createContext());
CREATE_OP_CONTEXT(rel_52_ADDFixx_op_ctxt,rel_52_ADDFixx->createContext());
for(const auto& env0 : *rel_51_SUB) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[3]),ramBitCast(env0[2]),ramBitCast(env0[1])}};
rel_52_ADDFixx->insert(tuple,READ_OP_CONTEXT(rel_52_ADDFixx_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_302(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tgas"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block_Gas.csv"},{"name","Block_Gas"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"gas\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_549_Block_Gas);
} catch (std::exception& e) {std::cerr << "Error loading Block_Gas data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_303(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFallthroughEdge.csv"},{"name","FallthroughEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_550_FallthroughEdge);
} catch (std::exception& e) {std::cerr << "Error loading FallthroughEdge data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_304(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","Function.csv"},{"name","IsFunction"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"func\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_551_IsFunction);
} catch (std::exception& e) {std::cerr << "Error loading IsFunction data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_305(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunctionReturnRestriction(fun) :- 
   IsFunction(fun),
   1 < @generator_0,
   !inliner.In_FormalReturnArgs(fun,_,0),
   @generator_0 = count : { inliner.Function_Exit(fun,+underscore_947) }.
in file function_inliner.dl [140:3-143:37])_");
if(!(rel_551_IsFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt,rel_552_inliner_FunctionReturnRestriction->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
if( !(!rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt)).empty())) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_142_inliner_Function_Exit->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamSigned>(RamSigned(1)) < ramBitCast<RamSigned>(env1[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_552_inliner_FunctionReturnRestriction->insert(tuple,READ_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.FunctionReturnRestriction(fun) :- 
   IsFunction(fun),
   1 = count : { inliner.Function_Exit(fun,+underscore_948) }.
in file function_inliner.dl [136:3-138:38])_");
if(!(rel_551_IsFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt,rel_552_inliner_FunctionReturnRestriction->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_142_inliner_Function_Exit->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(1)) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_552_inliner_FunctionReturnRestriction->insert(tuple,READ_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_306(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func\tselector"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","PublicFunction.csv"},{"name","PublicFunctionSelector"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"func\", \"selector\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_553_PublicFunctionSelector);
} catch (std::exception& e) {std::cerr << "Error loading PublicFunctionSelector data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_307(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(IsPublicFunction(func) :- 
   PublicFunctionSelector(func,_).
in file decompiler_imports.dl [104:1-104:59])_");
if(!(rel_553_PublicFunctionSelector->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_553_PublicFunctionSelector_op_ctxt,rel_553_PublicFunctionSelector->createContext());
CREATE_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt,rel_554_IsPublicFunction->createContext());
for(const auto& env0 : *rel_553_PublicFunctionSelector) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_554_IsPublicFunction->insert(tuple,READ_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_553_PublicFunctionSelector->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_308(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   Statement_Opcode(callerOp,"CALLER"),
   Statement_Defines(callerOp,sender,0),
   localFlowAnalysis.Flows(sender,formalRet),
   inliner.In_FormalReturnArgs(fun,formalRet,_).
in file function_inliner.dl [505:3-509:44])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_120_inliner_In_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(65))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(65))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   Statement_Opcode(callerOp,"ORIGIN"),
   Statement_Defines(callerOp,sender,0),
   localFlowAnalysis.Flows(sender,formalRet),
   inliner.In_FormalReturnArgs(fun,formalRet,_).
in file function_inliner.dl [505:3-509:44])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_120_inliner_In_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(66))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(66))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   SHA3(_,_,_,var),
   localFlowAnalysis.Flows(var,actualArg),
   inliner.In_ActualArgs(caller,actualArg,pos),
   CallGraphEdge(caller,fun),
   FormalArgs(fun,formalArg,pos),
   localFlowAnalysis.Flows(formalArg,storeIndex),
   SLOAD(_,storeIndex,_).
in file function_inliner.dl [512:3-519:58])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_108_inliner_In_ActualArgs->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_78_SLOAD->empty()) && !(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt,rel_108_inliner_In_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_63_SHA3) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_108_inliner_In_ActualArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env5 : range) {
if( !rel_78_SLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_78_SLOAD_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   SHA3(_,_,_,var),
   localFlowAnalysis.Flows(var,actualArg),
   inliner.In_ActualArgs(caller,actualArg,pos),
   CallGraphEdge(caller,fun),
   FormalArgs(fun,formalArg,pos),
   localFlowAnalysis.Flows(formalArg,storeIndex),
   SSTORE(_,storeIndex,_).
in file function_inliner.dl [512:3-519:58])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_108_inliner_In_ActualArgs->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_79_SSTORE->empty()) && !(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_79_SSTORE_op_ctxt,rel_79_SSTORE->createContext());
CREATE_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt,rel_108_inliner_In_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_63_SHA3) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_108_inliner_In_ActualArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env5 : range) {
if( !rel_79_SSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_79_SSTORE_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   Variable_Value(var,_),
   localFlowAnalysis.Flows(var,actualArg),
   inliner.In_ActualArgs(caller,actualArg,pos),
   CallGraphEdge(caller,fun),
   FormalArgs(fun,formalArg,pos),
   localFlowAnalysis.Flows(formalArg,storeIndex),
   SLOAD(_,storeIndex,_).
in file function_inliner.dl [512:3-519:58])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_108_inliner_In_ActualArgs->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_78_SLOAD->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
CREATE_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt,rel_108_inliner_In_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_211_Variable_Value) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_108_inliner_In_ActualArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env5 : range) {
if( !rel_78_SLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_78_SLOAD_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   Variable_Value(var,_),
   localFlowAnalysis.Flows(var,actualArg),
   inliner.In_ActualArgs(caller,actualArg,pos),
   CallGraphEdge(caller,fun),
   FormalArgs(fun,formalArg,pos),
   localFlowAnalysis.Flows(formalArg,storeIndex),
   SSTORE(_,storeIndex,_).
in file function_inliner.dl [512:3-519:58])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_108_inliner_In_ActualArgs->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_79_SSTORE->empty()) && !(rel_211_Variable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_79_SSTORE_op_ctxt,rel_79_SSTORE->createContext());
CREATE_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt,rel_108_inliner_In_ActualArgs->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_211_Variable_Value) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_108_inliner_In_ActualArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2])}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env4[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env5 : range) {
if( !rel_79_SSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env5[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_79_SSTORE_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env3[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   FormalArgs(fun,formalArg,_),
   localFlowAnalysis.Flows(formalArg,calldataIndex),
   CALLDATALOAD(_,calldataIndex,_).
in file function_inliner.dl [521:3-527:39])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_92_CALLDATALOAD->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !rel_92_CALLDATALOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   StatementConsumesMemoryNoArgs(memConsStmt),
   Statement_Function(memConsStmt,fun).
in file function_inliner.dl [548:3-550:45])_");
if(!(rel_521_StatementConsumesMemoryNoArgs->empty()) && !(rel_116_Statement_Function->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_521_StatementConsumesMemoryNoArgs_op_ctxt,rel_521_StatementConsumesMemoryNoArgs->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_521_StatementConsumesMemoryNoArgs) {
auto range = rel_116_Statement_Function->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   FormalArgs(fun,formalArg,_),
   localFlowAnalysis.Flows(formalArg,loadAddr),
   MLOAD(_,loadAddr,loaded),
   localFlowAnalysis.Flows(loaded,formalRet),
   inliner.In_FormalReturnArgs(fun,formalRet,_),
   !VarIsArray(formalArg,_).
in file function_inliner.dl [552:3-559:31])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_10_MLOAD->empty()) && !(rel_120_inliner_In_FormalReturnArgs->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
if( !(!rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt)).empty())) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env3 : range) {
if( !rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   FormalArgs(fun,formalArg,_),
   localFlowAnalysis.Flows(formalArg,loadAddr),
   MLOAD(_,loadAddr,_),
   localFlowAnalysis.Flows(formalArg,formalRet),
   inliner.In_FormalReturnArgs(fun,formalRet,_),
   !VarIsArray(formalArg,_).
in file function_inliner.dl [552:3-559:31])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_10_MLOAD->empty()) && !(rel_120_inliner_In_FormalReturnArgs->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
if( !(!rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt)).empty())) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !rel_10_MLOAD->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt)).empty()) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env2 : range) {
if( !rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   MLOADFreePtr_To(_,loadedAddr),
   inliner.In_FormalReturnArgs(fun,loadedAddr,_),
   !VarIsArray(loadedAddr,_).
in file function_inliner.dl [561:3-564:32])_");
if(!(rel_29_MLOADFreePtr_To->empty()) && !(rel_120_inliner_In_FormalReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_29_MLOADFreePtr_To_op_ctxt,rel_29_MLOADFreePtr_To->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_29_MLOADFreePtr_To) {
if( !(!rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt)).empty())) {
auto range = rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   FormalArgs(fun,formalArg,_),
   localFlowAnalysis.Flows(formalArg,storeAddr),
   MSTORE(_,storeAddr,_),
   !VarIsArray(formalArg,_).
in file function_inliner.dl [566:3-570:31])_");
if(!(rel_502_localFlowAnalysis_Flows->empty()) && !(rel_40_MSTORE->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_40_MSTORE_op_ctxt,rel_40_MSTORE->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_489_VarIsArray_op_ctxt,rel_489_VarIsArray->createContext());
CREATE_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt,rel_502_localFlowAnalysis_Flows->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
if( !(!rel_489_VarIsArray->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_489_VarIsArray_op_ctxt)).empty())) {
auto range = rel_502_localFlowAnalysis_Flows->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_502_localFlowAnalysis_Flows_op_ctxt));
for(const auto& env1 : range) {
if( !rel_40_MSTORE->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_40_MSTORE_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   MemoryCopyLoop(memLoop,_,_),
   InFunction(memLoop,fun),
   !inliner.FunctionContainsMemConsStmt(fun).
in file function_inliner.dl [578:3-581:39])_");
if(!(rel_271_MemoryCopyLoop->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_117_inliner_FunctionContainsMemConsStmt_op_ctxt,rel_117_inliner_FunctionContainsMemConsStmt->createContext());
CREATE_OP_CONTEXT(rel_271_MemoryCopyLoop_op_ctxt,rel_271_MemoryCopyLoop->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_271_MemoryCopyLoop) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_117_inliner_FunctionContainsMemConsStmt->contains(Tuple<RamDomain,1>{{ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_117_inliner_FunctionContainsMemConsStmt_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   CallGraphEdge(_,fun),
   !inliner.In_FormalReturnArgs(fun,_,0),
   1 = count : { Statement_Function(+underscore_1011,fun) }.
in file function_inliner.dl [530:3-534:37])_");
if(!(rel_110_CallGraphEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
CREATE_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt,rel_120_inliner_In_FormalReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
if( !(!rel_120_inliner_In_FormalReturnArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_120_inliner_In_FormalReturnArgs_op_ctxt)).empty())) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_116_Statement_Function->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(1)) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   CallGraphEdge(_,fun),
   FormalArgs(fun,_,_),
   @generator_0 <= 3,
   @generator_0 = count : { InFunction(+underscore_1015,fun) }.
in file function_inliner.dl [537:3-541:22])_");
if(!(rel_110_CallGraphEdge->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
if( !rel_111_FormalArgs->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt)).empty()) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamSigned>(env1[0]) <= ramBitCast<RamSigned>(RamSigned(3)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InlineCandidate(fun) :- 
   IsFunction(fun),
   !IsPublicFunction(fun),
   1 = count : { CallGraphEdge(+underscore_1016,fun) }.
in file function_inliner.dl [543:3-546:28])_");
if(!(rel_551_IsFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt,rel_554_IsPublicFunction->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
if( !(rel_554_IsPublicFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt)))) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = false;
shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(1)) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_555_inliner_InlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.InlineCandidate"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_555_inliner_InlineCandidate);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_63_SHA3->purge();
if (pruneImdtRels) rel_92_CALLDATALOAD->purge();
if (pruneImdtRels) rel_10_MLOAD->purge();
if (pruneImdtRels) rel_78_SLOAD->purge();
if (pruneImdtRels) rel_40_MSTORE->purge();
if (pruneImdtRels) rel_79_SSTORE->purge();
if (pruneImdtRels) rel_116_Statement_Function->purge();
if (pruneImdtRels) rel_489_VarIsArray->purge();
if (pruneImdtRels) rel_29_MLOADFreePtr_To->purge();
if (pruneImdtRels) rel_271_MemoryCopyLoop->purge();
if (pruneImdtRels) rel_521_StatementConsumesMemoryNoArgs->purge();
if (pruneImdtRels) rel_502_localFlowAnalysis_Flows->purge();
if (pruneImdtRels) rel_108_inliner_In_ActualArgs->purge();
if (pruneImdtRels) rel_120_inliner_In_FormalReturnArgs->purge();
if (pruneImdtRels) rel_117_inliner_FunctionContainsMemConsStmt->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_309(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.SafelyInlinableFunction(fun) :- 
   IsFunction(fun),
   !IsPublicFunction(fun),
   fun != "0x0",
   inliner.FunctionReturnRestriction(fun),
   !inliner.FunHasArgMismatch(fun),
   !inliner.FunHasRetMismatch(fun),
   !inliner.FunCalledWithImpreciseControlFlow(fun).
in file function_inliner.dl [147:3-154:45])_");
if(!(rel_551_IsFunction->empty()) && !(rel_552_inliner_FunctionReturnRestriction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_113_inliner_FunHasArgMismatch_op_ctxt,rel_113_inliner_FunHasArgMismatch->createContext());
CREATE_OP_CONTEXT(rel_141_inliner_FunCalledWithImpreciseControlFlow_op_ctxt,rel_141_inliner_FunCalledWithImpreciseControlFlow->createContext());
CREATE_OP_CONTEXT(rel_143_inliner_FunHasRetMismatch_op_ctxt,rel_143_inliner_FunHasRetMismatch->createContext());
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt,rel_552_inliner_FunctionReturnRestriction->createContext());
CREATE_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt,rel_554_IsPublicFunction->createContext());
CREATE_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt,rel_556_inliner_SafelyInlinableFunction->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
if( (ramBitCast<RamDomain>(env0[0]) != ramBitCast<RamDomain>(RamSigned(5))) && !(rel_113_inliner_FunHasArgMismatch->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_113_inliner_FunHasArgMismatch_op_ctxt))) && !(rel_554_IsPublicFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt))) && !(rel_141_inliner_FunCalledWithImpreciseControlFlow->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_141_inliner_FunCalledWithImpreciseControlFlow_op_ctxt))) && rel_552_inliner_FunctionReturnRestriction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_552_inliner_FunctionReturnRestriction_op_ctxt)) && !(rel_143_inliner_FunHasRetMismatch->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_143_inliner_FunHasRetMismatch_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_556_inliner_SafelyInlinableFunction->insert(tuple,READ_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.SafelyInlinableFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_556_inliner_SafelyInlinableFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_113_inliner_FunHasArgMismatch->purge();
if (pruneImdtRels) rel_143_inliner_FunHasRetMismatch->purge();
if (pruneImdtRels) rel_141_inliner_FunCalledWithImpreciseControlFlow->purge();
if (pruneImdtRels) rel_552_inliner_FunctionReturnRestriction->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_310(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.CGEToInlineCandidate(caller,callee) :- 
   inliner.InlineCandidate(callee),
   inliner.SafelyInlinableFunction(callee),
   CallGraphEdge(callerBlock,callee),
   InFunction(callerBlock,caller).
in file function_inliner.dl [167:3-171:40])_");
if(!(rel_556_inliner_SafelyInlinableFunction->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_555_inliner_InlineCandidate->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
CREATE_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt,rel_556_inliner_SafelyInlinableFunction->createContext());
CREATE_OP_CONTEXT(rel_557_inliner_CGEToInlineCandidate_op_ctxt,rel_557_inliner_CGEToInlineCandidate->createContext());
for(const auto& env0 : *rel_555_inliner_InlineCandidate) {
if( rel_556_inliner_SafelyInlinableFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt))) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[1]),ramBitCast(env0[0])}};
rel_557_inliner_CGEToInlineCandidate->insert(tuple,READ_OP_CONTEXT(rel_557_inliner_CGEToInlineCandidate_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_311(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunctionToInline(func) :- 
   inliner.InlineCandidate(func),
   inliner.SafelyInlinableFunction(func),
   IsFunction(func),
   !IsPublicFunction(func),
   !inliner.CGEToInlineCandidate(func,_).
in file function_inliner.dl [175:3-180:36])_");
if(!(rel_556_inliner_SafelyInlinableFunction->empty()) && !(rel_551_IsFunction->empty()) && !(rel_555_inliner_InlineCandidate->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt,rel_554_IsPublicFunction->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
CREATE_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt,rel_556_inliner_SafelyInlinableFunction->createContext());
CREATE_OP_CONTEXT(rel_557_inliner_CGEToInlineCandidate_op_ctxt,rel_557_inliner_CGEToInlineCandidate->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
for(const auto& env0 : *rel_555_inliner_InlineCandidate) {
if( !(!rel_557_inliner_CGEToInlineCandidate->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_557_inliner_CGEToInlineCandidate_op_ctxt)).empty()) && rel_551_IsFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_551_IsFunction_op_ctxt)) && rel_556_inliner_SafelyInlinableFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt)) && !(rel_554_IsPublicFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_558_inliner_FunctionToInline->insert(tuple,READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunctionToInline"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_558_inliner_FunctionToInline);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_557_inliner_CGEToInlineCandidate->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_312(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALL(stmt,gas,target,value,data_start,data_length,return_start,return_length,success) :- 
   Statement_Opcode(stmt,"CALL"),
   Statement_Defines(stmt,success,_),
   Statement_Uses(stmt,gas,0),
   Statement_Uses(stmt,target,1),
   Statement_Uses(stmt,value,2),
   Statement_Uses(stmt,data_start,3),
   Statement_Uses(stmt,data_length,4),
   Statement_Uses(stmt,return_start,5),
   Statement_Uses(stmt,return_length,6).
in file tac_instructions.dl [174:1-183:42])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(67))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(67))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(4))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(5))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env7 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(6))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(6))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env8 : range) {
Tuple<RamDomain,9> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env4[1]),ramBitCast(env5[1]),ramBitCast(env6[1]),ramBitCast(env7[1]),ramBitCast(env8[1]),ramBitCast(env1[1])}};
rel_53_CALL->insert(tuple,READ_OP_CONTEXT(rel_53_CALL_op_ctxt));
}
}
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_313(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(NeedsMoreInlining(fun) :- 
   inliner.InlineCandidate(fun),
   inliner.SafelyInlinableFunction(fun),
   !inliner.FunctionToInline(fun),
   !IsPublicFunction(fun).
in file function_inliner.dl [589:1-593:26])_");
if(!(rel_555_inliner_InlineCandidate->empty()) && !(rel_556_inliner_SafelyInlinableFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt,rel_554_IsPublicFunction->createContext());
CREATE_OP_CONTEXT(rel_555_inliner_InlineCandidate_op_ctxt,rel_555_inliner_InlineCandidate->createContext());
CREATE_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt,rel_556_inliner_SafelyInlinableFunction->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_559_NeedsMoreInlining_op_ctxt,rel_559_NeedsMoreInlining->createContext());
for(const auto& env0 : *rel_555_inliner_InlineCandidate) {
if( rel_556_inliner_SafelyInlinableFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_556_inliner_SafelyInlinableFunction_op_ctxt)) && !(rel_554_IsPublicFunction->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_554_IsPublicFunction_op_ctxt))) && !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_559_NeedsMoreInlining->insert(tuple,READ_OP_CONTEXT(rel_559_NeedsMoreInlining_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","NeedsMoreInlining"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_559_NeedsMoreInlining);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_554_IsPublicFunction->purge();
if (pruneImdtRels) rel_555_inliner_InlineCandidate->purge();
if (pruneImdtRels) rel_556_inliner_SafelyInlinableFunction->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_314(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.BlockToClone(block,calleeFun,callerBlock,callerFun,cat(cat(block,"B"),callerBlock)) :- 
   inliner.FunctionToInline(calleeFun),
   CallGraphEdge(callerBlock,calleeFun),
   inliner.In_ValidBlock(callerBlock),
   InFunction(callerBlock,callerFun),
   InFunction(block,calleeFun).
in file function_inliner.dl [209:3-216:50])_");
if(!(rel_144_inliner_In_ValidBlock->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_115_InFunction->empty()) && !(rel_110_CallGraphEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
if( rel_144_inliner_In_ValidBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt))) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[0]),ramBitCast(env0[0]),ramBitCast(env1[0]),ramBitCast(env2[1]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env3[0]) + symTable.decode(RamSigned(68)))) + symTable.decode(env1[0])))}};
rel_560_inliner_BlockToClone->insert(tuple,READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfromFun\tcallerBlock\tcallerFun\tnewBlock"},{"auxArity","0"},{"name","inliner.BlockToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"block\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_560_inliner_BlockToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_315(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.InBlock_OutBlock(block,"",block) :- 
   InFunction(block,_),
   inliner.In_ValidBlock(block),
   !inliner.BlockToClone(block,_,_,_,_).
in file function_inliner.dl [218:3-221:38])_");
if(!(rel_115_InFunction->empty()) && !(rel_144_inliner_In_ValidBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
for(const auto& env0 : *rel_115_InFunction) {
if( rel_144_inliner_In_ValidBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt)) && !(!rel_560_inliner_BlockToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(69)),ramBitCast(env0[0])}};
rel_561_inliner_InBlock_OutBlock->insert(tuple,READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InBlock_OutBlock(block,callerBlock,cat(cat(block,"B"),callerBlock)) :- 
   inliner.FunctionToInline(calleeFun),
   CallGraphEdge(callerBlock,calleeFun),
   inliner.In_ValidBlock(callerBlock),
   InFunction(callerBlock,_),
   InFunction(block,calleeFun).
in file function_inliner.dl [209:3-216:50])_");
if(!(rel_144_inliner_In_ValidBlock->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_115_InFunction->empty()) && !(rel_110_CallGraphEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
if( !rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt)).empty() && rel_144_inliner_In_ValidBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt))) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env2[0]) + symTable.decode(RamSigned(68)))) + symTable.decode(env1[0])))}};
rel_561_inliner_InBlock_OutBlock->insert(tuple,READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_316(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Block_CodeChunkAccessed(outBlock,chunk) :- 
   Block_CodeChunkAccessed(inBlock,chunk),
   inliner.InBlock_OutBlock(inBlock,_,outBlock).
in file function_inliner.dl [279:3-281:44])_");
if(!(rel_548_Block_CodeChunkAccessed->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_548_Block_CodeChunkAccessed_op_ctxt,rel_548_Block_CodeChunkAccessed->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_562_inliner_Out_Block_CodeChunkAccessed_op_ctxt,rel_562_inliner_Out_Block_CodeChunkAccessed->createContext());
for(const auto& env0 : *rel_548_Block_CodeChunkAccessed) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_562_inliner_Out_Block_CodeChunkAccessed->insert(tuple,READ_OP_CONTEXT(rel_562_inliner_Out_Block_CodeChunkAccessed_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tchunk"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block_CodeChunkAccessed.csv"},{"name","inliner.Out_Block_CodeChunkAccessed"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"chunk\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:Chunk\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_562_inliner_Out_Block_CodeChunkAccessed);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_548_Block_CodeChunkAccessed->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_317(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Block_Gas(outBlock,gas) :- 
   Block_Gas(inBlock,gas),
   inliner.InBlock_OutBlock(inBlock,_,outBlock).
in file function_inliner.dl [275:3-277:44])_");
if(!(rel_549_Block_Gas->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_549_Block_Gas_op_ctxt,rel_549_Block_Gas->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_563_inliner_Out_Block_Gas_op_ctxt,rel_563_inliner_Out_Block_Gas->createContext());
for(const auto& env0 : *rel_549_Block_Gas) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_563_inliner_Out_Block_Gas->insert(tuple,READ_OP_CONTEXT(rel_563_inliner_Out_Block_Gas_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tgas"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block_Gas.csv"},{"name","inliner.Out_Block_Gas"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"gas\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_563_inliner_Out_Block_Gas);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_549_Block_Gas->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_318(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_CallGraphEdge(outBlock,fun) :- 
   CallGraphEdge(inBlock,fun),
   inliner.InBlock_OutBlock(inBlock,_,outBlock),
   !inliner.FunctionToInline(fun).
in file function_inliner.dl [264:3-267:28])_");
if(!(rel_110_CallGraphEdge->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_564_inliner_Out_CallGraphEdge_op_ctxt,rel_564_inliner_Out_CallGraphEdge->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
if( !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_564_inliner_Out_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_564_inliner_Out_CallGraphEdge_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionCall.csv"},{"name","inliner.Out_CallGraphEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_564_inliner_Out_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_319(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_FallthroughEdge(outFrom,outTo) :- 
   FallthroughEdge(inFrom,inTo),
   inliner.InBlock_OutBlock(inFrom,same,outFrom),
   inliner.InBlock_OutBlock(inTo,same,outTo).
in file function_inliner.dl [291:3-294:41])_");
if(!(rel_561_inliner_InBlock_OutBlock->empty()) && !(rel_550_FallthroughEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_550_FallthroughEdge_op_ctxt,rel_550_FallthroughEdge->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_565_inliner_Out_FallthroughEdge_op_ctxt,rel_565_inliner_Out_FallthroughEdge->createContext());
for(const auto& env0 : *rel_550_FallthroughEdge) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2])}};
rel_565_inliner_Out_FallthroughEdge->insert(tuple,READ_OP_CONTEXT(rel_565_inliner_Out_FallthroughEdge_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFallthroughEdge.csv"},{"name","inliner.Out_FallthroughEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_565_inliner_Out_FallthroughEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_550_FallthroughEdge->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_320(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_FunctionCallReturn(outBlock,fun,outReturn) :- 
   FunctionCallReturn(inBlock,fun,inReturn),
   inliner.InBlock_OutBlock(inBlock,same,outBlock),
   inliner.InBlock_OutBlock(inReturn,same,outReturn),
   !inliner.FunctionToInline(fun).
in file function_inliner.dl [269:3-273:28])_");
if(!(rel_561_inliner_InBlock_OutBlock->empty()) && !(rel_193_FunctionCallReturn->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_566_inliner_Out_FunctionCallReturn_op_ctxt,rel_566_inliner_Out_FunctionCallReturn->createContext());
for(const auto& env0 : *rel_193_FunctionCallReturn) {
if( !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1]),ramBitCast(env2[2])}};
rel_566_inliner_Out_FunctionCallReturn->insert(tuple,READ_OP_CONTEXT(rel_566_inliner_Out_FunctionCallReturn_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction\treturn"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionCallReturn.csv"},{"name","inliner.Out_FunctionCallReturn"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"block\", \"function\", \"return\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Function\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_566_inliner_Out_FunctionCallReturn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_321(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_LocalBlockEdge(outFrom,outTo) :- 
   LocalBlockEdge(inFrom,inTo),
   inliner.InBlock_OutBlock(inFrom,same,outFrom),
   inliner.InBlock_OutBlock(inTo,same,outTo),
   !inliner.BlockToClone(_,_,inFrom,_,_).
in file function_inliner.dl [303:3-307:39])_");
if(!(rel_561_inliner_InBlock_OutBlock->empty()) && !(rel_121_LocalBlockEdge->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_121_LocalBlockEdge_op_ctxt,rel_121_LocalBlockEdge->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt,rel_567_inliner_Out_LocalBlockEdge->createContext());
for(const auto& env0 : *rel_121_LocalBlockEdge) {
if( !(!rel_560_inliner_BlockToClone->lowerUpperRange_00100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt)).empty())) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2])}};
rel_567_inliner_Out_LocalBlockEdge->insert(tuple,READ_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_LocalBlockEdge(outFrom,outTo) :- 
   inliner.FunctionToInline(fun),
   FunctionCallReturn(inFrom,fun,_),
   inliner.In_ValidBlock(inFrom),
   InFunction(inEntry,fun),
   FunctionEntry(inEntry),
   inliner.InBlock_OutBlock(inFrom,"",outFrom),
   inliner.InBlock_OutBlock(inEntry,inFrom,outTo).
in file function_inliner.dl [309:3-316:46])_");
if(!(rel_114_FunctionEntry->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_115_InFunction->empty()) && !(rel_144_inliner_In_ValidBlock->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty()) && !(rel_193_FunctionCallReturn->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt,rel_114_FunctionEntry->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt,rel_567_inliner_Out_LocalBlockEdge->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_144_inliner_In_ValidBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt))) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env2 : range) {
if( rel_114_FunctionEntry->contains(Tuple<RamDomain,1>{{ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt))) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[2]),ramBitCast(env4[2])}};
rel_567_inliner_Out_LocalBlockEdge->insert(tuple,READ_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_LocalBlockEdge(outExitBlock,outRet) :- 
   inliner.FunctionToInline(fun),
   FunctionCallReturn(inFrom,fun,inRet),
   inliner.In_ValidBlock(inFrom),
   inliner.Function_Exit(fun,exitBlock),
   inliner.InBlock_OutBlock(inRet,"",outRet),
   inliner.InBlock_OutBlock(exitBlock,inFrom,outExitBlock).
in file function_inliner.dl [318:3-324:55])_");
if(!(rel_142_inliner_Function_Exit->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_144_inliner_In_ValidBlock->empty()) && !(rel_193_FunctionCallReturn->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
CREATE_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt,rel_144_inliner_In_ValidBlock->createContext());
CREATE_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt,rel_193_FunctionCallReturn->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt,rel_567_inliner_Out_LocalBlockEdge->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_193_FunctionCallReturn->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_193_FunctionCallReturn_op_ctxt));
for(const auto& env1 : range) {
if( rel_144_inliner_In_ValidBlock->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_144_inliner_In_ValidBlock_op_ctxt))) {
auto range = rel_142_inliner_Function_Exit->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env4[2]),ramBitCast(env3[2])}};
rel_567_inliner_Out_LocalBlockEdge->insert(tuple,READ_OP_CONTEXT(rel_567_inliner_Out_LocalBlockEdge_op_ctxt));
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tnextBlock"},{"auxArity","0"},{"delimiter","\t"},{"filename","LocalBlockEdge.csv"},{"name","inliner.Out_LocalBlockEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"nextBlock\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_567_inliner_Out_LocalBlockEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_121_LocalBlockEdge->purge();
if (pruneImdtRels) rel_193_FunctionCallReturn->purge();
if (pruneImdtRels) rel_144_inliner_In_ValidBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_322(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.StatementToClone(stmt,func,callerBlock,callerFun,cat(cat(stmt,""),callerBlock)) :- 
   inliner.BlockToClone(block,func,callerBlock,callerFun,_),
   Statement_Block(stmt,block).
in file function_inliner.dl [223:3-227:47])_");
if(!(rel_560_inliner_BlockToClone->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
for(const auto& env0 : *rel_560_inliner_BlockToClone) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env1[0]) + symTable.decode(RamSigned(69)))) + symTable.decode(env0[2])))}};
rel_568_inliner_StatementToClone->insert(tuple,READ_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tfromFun\tcallerBlock\tcallerFun\tnewStmt"},{"auxArity","0"},{"name","inliner.StatementToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"stmt\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Statement\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_568_inliner_StatementToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_323(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(DELEGATECALL(stmt,gas,target,data_start,data_length,return_start,return_length,success) :- 
   Statement_Opcode(stmt,"DELEGATECALL"),
   Statement_Defines(stmt,success,_),
   Statement_Uses(stmt,gas,0),
   Statement_Uses(stmt,target,1),
   Statement_Uses(stmt,data_start,2),
   Statement_Uses(stmt,data_length,3),
   Statement_Uses(stmt,return_start,4),
   Statement_Uses(stmt,return_length,5).
in file tac_instructions.dl [205:1-213:42])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(70))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(70))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(4))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(5))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env7 : range) {
Tuple<RamDomain,8> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env4[1]),ramBitCast(env5[1]),ramBitCast(env6[1]),ramBitCast(env7[1]),ramBitCast(env1[1])}};
rel_54_DELEGATECALL->insert(tuple,READ_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_324(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.InStatement_OutStatement(stmt,"",stmt) :- 
   Statement_Block(stmt,_),
   !inliner.StatementToClone(stmt,_,_,_,_).
in file function_inliner.dl [229:3-231:41])_");
if(!(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
if( !(!rel_568_inliner_StatementToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(69)),ramBitCast(env0[0])}};
rel_569_inliner_InStatement_OutStatement->insert(tuple,READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InStatement_OutStatement(stmt,callerBlock,cat(cat(stmt,""),callerBlock)) :- 
   inliner.BlockToClone(block,_,callerBlock,_,_),
   Statement_Block(stmt,block).
in file function_inliner.dl [223:3-227:47])_");
if(!(rel_560_inliner_BlockToClone->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
for(const auto& env0 : *rel_560_inliner_BlockToClone) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env0[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env1[0]) + symTable.decode(RamSigned(69)))) + symTable.decode(env0[2])))}};
rel_569_inliner_InStatement_OutStatement->insert(tuple,READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_325(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_IsStatement(outStmt) :- 
   inliner.InStatement_OutStatement(_,_,outStmt).
in file function_inliner.dl [363:3-364:45])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_570_inliner_Out_IsStatement_op_ctxt,rel_570_inliner_Out_IsStatement->createContext());
for(const auto& env0 : *rel_569_inliner_InStatement_OutStatement) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[2])}};
rel_570_inliner_Out_IsStatement->insert(tuple,READ_OP_CONTEXT(rel_570_inliner_Out_IsStatement_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Stmt.csv"},{"name","inliner.Out_IsStatement"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"stmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_570_inliner_Out_IsStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_326(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_Block(stmt,block) :- 
   Statement_Block(stmt,block),
   !inliner.BlockToClone(block,_,_,_,_).
in file function_inliner.dl [233:3-235:38])_");
if(!(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_571_inliner_Out_Statement_Block_op_ctxt,rel_571_inliner_Out_Statement_Block->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
if( !(!rel_560_inliner_BlockToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_571_inliner_Out_Statement_Block->insert(tuple,READ_OP_CONTEXT(rel_571_inliner_Out_Statement_Block_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Block(newStmt,newBlock) :- 
   Statement_Block(stmt,block),
   inliner.BlockToClone(block,_,callerBlock,_,newBlock),
   inliner.StatementToClone(stmt,_,callerBlock,_,newStmt).
in file function_inliner.dl [237:3-240:56])_");
if(!(rel_560_inliner_BlockToClone->empty()) && !(rel_568_inliner_StatementToClone->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_571_inliner_Out_Statement_Block_op_ctxt,rel_571_inliner_Out_Statement_Block->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
auto range = rel_560_inliner_BlockToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_568_inliner_StatementToClone->lowerUpperRange_10100(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[4]),ramBitCast(env1[4])}};
rel_571_inliner_Out_Statement_Block->insert(tuple,READ_OP_CONTEXT(rel_571_inliner_Out_Statement_Block_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Block.csv"},{"name","inliner.Out_Statement_Block"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_571_inliner_Out_Statement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_327(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.VariableToClone(inVar,fromFun,callerBlock,callerFun,cat(cat(inVar,"V"),callerBlock)) :- 
   inliner.StatementToClone(inStmt,fromFun,callerBlock,callerFun,_),
   Statement_Defines(inStmt,inVar,_).
in file function_inliner.dl [394:3-399:48])_");
if(!(rel_568_inliner_StatementToClone->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_572_inliner_VariableToClone_op_ctxt,rel_572_inliner_VariableToClone->createContext());
for(const auto& env0 : *rel_568_inliner_StatementToClone) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(71)))) + symTable.decode(env0[2])))}};
rel_572_inliner_VariableToClone->insert(tuple,READ_OP_CONTEXT(rel_572_inliner_VariableToClone_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tfromFun\tcallerBlock\tcallerFun\tnewVar"},{"auxArity","0"},{"name","inliner.VariableToClone"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"var\", \"fromFun\", \"callerBlock\", \"callerFun\", \"newVar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Variable\", \"s:Function\", \"s:Block\", \"s:Function\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_572_inliner_VariableToClone);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_328(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_FunctionEntry(block) :- 
   FunctionEntry(block),
   !inliner.BlockToClone(block,_,_,_,_).
in file function_inliner.dl [251:3-253:38])_");
if(!(rel_114_FunctionEntry->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt,rel_114_FunctionEntry->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_573_inliner_Out_FunctionEntry_op_ctxt,rel_573_inliner_Out_FunctionEntry->createContext());
for(const auto& env0 : *rel_114_FunctionEntry) {
if( !(!rel_560_inliner_BlockToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_573_inliner_Out_FunctionEntry->insert(tuple,READ_OP_CONTEXT(rel_573_inliner_Out_FunctionEntry_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block"},{"auxArity","0"},{"delimiter","\t"},{"filename","IRFunctionEntry.csv"},{"name","inliner.Out_FunctionEntry"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_573_inliner_Out_FunctionEntry);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_329(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_InFunction(block,function) :- 
   InFunction(block,function),
   !inliner.BlockToClone(block,_,_,_,_).
in file function_inliner.dl [243:3-245:38])_");
if(!(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_574_inliner_Out_InFunction_op_ctxt,rel_574_inliner_Out_InFunction->createContext());
for(const auto& env0 : *rel_115_InFunction) {
if( !(!rel_560_inliner_BlockToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt)).empty())) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_574_inliner_Out_InFunction->insert(tuple,READ_OP_CONTEXT(rel_574_inliner_Out_InFunction_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_InFunction(newBlock,callerFun) :- 
   inliner.BlockToClone(block,inlinedFun,_,callerFun,newBlock),
   InFunction(block,inlinedFun).
in file function_inliner.dl [247:3-249:38])_");
if(!(rel_560_inliner_BlockToClone->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_560_inliner_BlockToClone_op_ctxt,rel_560_inliner_BlockToClone->createContext());
CREATE_OP_CONTEXT(rel_574_inliner_Out_InFunction_op_ctxt,rel_574_inliner_Out_InFunction->createContext());
for(const auto& env0 : *rel_560_inliner_BlockToClone) {
if( rel_115_InFunction->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[4]),ramBitCast(env0[3])}};
rel_574_inliner_Out_InFunction->insert(tuple,READ_OP_CONTEXT(rel_574_inliner_Out_InFunction_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"filename","InFunction.csv"},{"name","inliner.Out_InFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_574_inliner_Out_InFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_560_inliner_BlockToClone->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_330(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.CallToClonedFunction(callerBlock,callStmt,callee) :- 
   inliner.FunctionToInline(callee),
   CallGraphEdge(callerBlock,callee),
   Statement_Block(callStmt,callerBlock),
   Statement_Opcode(callStmt,"CALLPRIVATE").
in file function_inliner.dl [366:3-370:50])_");
if(!(rel_110_CallGraphEdge->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt,rel_575_inliner_CallToClonedFunction->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_110_CallGraphEdge->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(21))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[0]),ramBitCast(env2[0]),ramBitCast(env0[0])}};
rel_575_inliner_CallToClonedFunction->insert(tuple,READ_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun"},{"auxArity","0"},{"name","inliner.CallToClonedFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_575_inliner_CallToClonedFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_110_CallGraphEdge->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_331(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.ClonedCallArgs(callerBlock,callStmt,callee,actualArg,formalArg) :- 
   inliner.CallToClonedFunction(callerBlock,callStmt,callee),
   Statement_Uses(callStmt,actualArg,i),
   i > 0,
   FormalArgs(callee,formalArg, _tmp_3),
    _tmp_3 = (i-1).
in file function_inliner.dl [373:3-377:43])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_111_FormalArgs->empty()) && !(rel_575_inliner_CallToClonedFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt,rel_575_inliner_CallToClonedFunction->createContext());
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
for(const auto& env0 : *rel_575_inliner_CallToClonedFunction) {
auto range = rel_7_Statement_Uses->lowerUpperRange_102(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(RamSigned(0)))) {
auto range = rel_111_FormalArgs->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) - ramBitCast<RamSigned>(RamSigned(1))))}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) - ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_576_inliner_ClonedCallArgs->insert(tuple,READ_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun\tactualArg\tformalArg"},{"auxArity","0"},{"name","inliner.ClonedCallArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\", \"actualArg\", \"formalArg\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Variable\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_576_inliner_ClonedCallArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_332(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunctionToInline_RetStmt(callee,retStmt) :- 
   inliner.FunctionToInline(callee),
   inliner.Function_Exit(callee,retBlock),
   Statement_Block(retStmt,retBlock),
   Statement_Opcode(retStmt,"RETURNPRIVATE").
in file function_inliner.dl [379:3-383:51])_");
if(!(rel_142_inliner_Function_Exit->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_558_inliner_FunctionToInline->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt,rel_142_inliner_Function_Exit->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt,rel_577_inliner_FunctionToInline_RetStmt->createContext());
for(const auto& env0 : *rel_558_inliner_FunctionToInline) {
auto range = rel_142_inliner_Function_Exit->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_142_inliner_Function_Exit_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env2[0])}};
rel_577_inliner_FunctionToInline_RetStmt->insert(tuple,READ_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun\tretStmt"},{"auxArity","0"},{"name","inliner.FunctionToInline_RetStmt"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"fun\", \"retStmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Function\", \"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_577_inliner_FunctionToInline_RetStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_142_inliner_Function_Exit->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_333(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.ClonedCallRets(callerBlock,callStmt,callee,retStmt,actualRet,formalRet) :- 
   inliner.CallToClonedFunction(callerBlock,callStmt,callee),
   Statement_Defines(callStmt,actualRet,i),
   inliner.FunctionToInline_RetStmt(callee,retStmt),
   Statement_Uses(retStmt,formalRet, _tmp_4),
    _tmp_4 = (i+1).
in file function_inliner.dl [386:3-390:50])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_577_inliner_FunctionToInline_RetStmt->empty()) && !(rel_575_inliner_CallToClonedFunction->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt,rel_575_inliner_CallToClonedFunction->createContext());
CREATE_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt,rel_577_inliner_FunctionToInline_RetStmt->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
for(const auto& env0 : *rel_575_inliner_CallToClonedFunction) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_577_inliner_FunctionToInline_RetStmt->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,6> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env2[1]),ramBitCast(env1[1]),ramBitCast(env3[1])}};
rel_578_inliner_ClonedCallRets->insert(tuple,READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","cloneBlock\tcallStmt\tfun\tretStmt\tactualRet\tformalRet"},{"auxArity","0"},{"name","inliner.ClonedCallRets"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"cloneBlock\", \"callStmt\", \"fun\", \"retStmt\", \"actualRet\", \"formalRet\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Block\", \"s:Statement\", \"s:Function\", \"s:Statement\", \"s:Variable\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_578_inliner_ClonedCallRets);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_334(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNDATASIZE(stmt,f) :- 
   Statement_Opcode(stmt,"RETURNDATASIZE"),
   Statement_Defines(stmt,f,_).
in file tac_instructions.dl [230:1-232:34])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt,rel_5_RETURNDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(72))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(72))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_5_RETURNDATASIZE->insert(tuple,READ_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_335(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(STATICCALL(stmt,gas,target,data_start,data_length,return_start,return_length,success) :- 
   Statement_Opcode(stmt,"STATICCALL"),
   Statement_Defines(stmt,success,_),
   Statement_Uses(stmt,gas,0),
   Statement_Uses(stmt,target,1),
   Statement_Uses(stmt,data_start,2),
   Statement_Uses(stmt,data_length,3),
   Statement_Uses(stmt,return_start,4),
   Statement_Uses(stmt,return_length,5).
in file tac_instructions.dl [189:1-197:42])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(73))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(73))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(4))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(5))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env7 : range) {
Tuple<RamDomain,8> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env4[1]),ramBitCast(env5[1]),ramBitCast(env6[1]),ramBitCast(env7[1]),ramBitCast(env1[1])}};
rel_55_STATICCALL->insert(tuple,READ_OP_CONTEXT(rel_55_STATICCALL_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_336(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.InVar_OutVar(inVar,"",inVar) :- 
   Statement_Defines(inStmt,inVar,_),
   !inliner.StatementToClone(inStmt,_,_,_,_),
   !inliner.ClonedCallRets(_,inStmt,_,_,_,_).
in file function_inliner.dl [401:3-405:44])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
if( !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_010000(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty()) && !(!rel_568_inliner_StatementToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(69)),ramBitCast(env0[1])}};
rel_579_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InVar_OutVar(formalArg,"",formalArg) :- 
   IsFunction(fun),
   FormalArgs(fun,formalArg,_),
   !inliner.FunctionToInline(fun).
in file function_inliner.dl [408:3-411:28])_");
if(!(rel_551_IsFunction->empty()) && !(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
if( !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
auto range = rel_111_FormalArgs->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(RamSigned(69)),ramBitCast(env1[1])}};
rel_579_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InVar_OutVar(inVar,callerBlock,cat(cat(inVar,"V"),callerBlock)) :- 
   inliner.StatementToClone(inStmt,_,callerBlock,_,_),
   Statement_Defines(inStmt,inVar,_).
in file function_inliner.dl [394:3-399:48])_");
if(!(rel_568_inliner_StatementToClone->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_568_inliner_StatementToClone) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(71)))) + symTable.decode(env0[2])))}};
rel_579_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt,rel_580_delta_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_579_inliner_InVar_OutVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_580_delta_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(inliner.InVar_OutVar(formalArg,callerBlock,actualArgExt) :- 
   inliner.ClonedCallArgs(callerBlock,_,_,actualArg,formalArg),
   inliner.InVar_OutVar(actualArg,"",actualArgExt).
in file function_inliner.dl [413:3-415:47])_");
if(!(rel_576_inliner_ClonedCallArgs->empty()) && !(rel_580_delta_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt,rel_580_delta_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt,rel_581_new_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_576_inliner_ClonedCallArgs) {
auto range = rel_580_delta_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_579_inliner_InVar_OutVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[4]),ramBitCast(env0[0]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[4]),ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_581_new_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InVar_OutVar(actualRet,"",formalRett) :- 
   inliner.ClonedCallRets(callerBlock,_,_,_,actualRet,formalRet),
   inliner.InVar_OutVar(formalRet,callerBlock,formalRett),
   !inliner.ClonedCallArgs(_,_,_,_,formalRet).
in file function_inliner.dl [417:3-420:44])_");
if(!(rel_578_inliner_ClonedCallRets->empty()) && !(rel_580_delta_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt,rel_580_delta_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt,rel_581_new_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_578_inliner_ClonedCallRets) {
if( !(!rel_576_inliner_ClonedCallArgs->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[5])}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[5])}},READ_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt)).empty())) {
auto range = rel_580_delta_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[5]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[5]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_579_inliner_InVar_OutVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[4]),ramBitCast(RamSigned(69)),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[4]),ramBitCast(RamSigned(69)),ramBitCast(env1[2])}};
rel_581_new_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.InVar_OutVar(actualRet,"",actualArgg) :- 
   inliner.ClonedCallRets(caller,_,_,_,actualRet,formalRet),
   inliner.ClonedCallArgs(caller,_,_,actualArg,formalRet),
   inliner.InVar_OutVar(actualArg,"",actualArgg).
in file function_inliner.dl [422:3-425:45])_");
if(!(rel_576_inliner_ClonedCallArgs->empty()) && !(rel_580_delta_inliner_InVar_OutVar->empty()) && !(rel_578_inliner_ClonedCallRets->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt,rel_580_delta_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt,rel_581_new_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_578_inliner_ClonedCallRets) {
auto range = rel_576_inliner_ClonedCallArgs->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[5])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[5])}},READ_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_580_delta_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[3]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[3]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_580_delta_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_579_inliner_InVar_OutVar->contains(Tuple<RamDomain,3>{{ramBitCast(env0[4]),ramBitCast(RamSigned(69)),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[4]),ramBitCast(RamSigned(69)),ramBitCast(env2[2])}};
rel_581_new_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt));
}
}
}
}
}
();}
if(rel_581_new_inliner_InVar_OutVar->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_581_new_inliner_InVar_OutVar_op_ctxt,rel_581_new_inliner_InVar_OutVar->createContext());
for(const auto& env0 : *rel_581_new_inliner_InVar_OutVar) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_579_inliner_InVar_OutVar->insert(tuple,READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
}
}
();std::swap(rel_580_delta_inliner_InVar_OutVar, rel_581_new_inliner_InVar_OutVar);
rel_581_new_inliner_InVar_OutVar->purge();
iter++;
}
iter = 0;
rel_580_delta_inliner_InVar_OutVar->purge();
rel_581_new_inliner_InVar_OutVar->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","inVar\tcallBlock\toutVar"},{"auxArity","0"},{"name","inliner.InVar_OutVar"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"inVar\", \"callBlock\", \"outVar\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Variable\", \"s:Block\", \"s:Variable\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_579_inliner_InVar_OutVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_337(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_ActualReturnArgs(outCaller,outVar,pos) :- 
   ActualReturnArgs(caller,inVar,pos),
   inliner.InBlock_OutBlock(caller,same,outCaller),
   inliner.InVar_OutVar(inVar,same,outVar).
in file function_inliner.dl [479:3-482:39])_");
if(!(rel_561_inliner_InBlock_OutBlock->empty()) && !(rel_579_inliner_InVar_OutVar->empty()) && !(rel_192_ActualReturnArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_192_ActualReturnArgs_op_ctxt,rel_192_ActualReturnArgs->createContext());
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_582_inliner_Out_ActualReturnArgs_op_ctxt,rel_582_inliner_Out_ActualReturnArgs->createContext());
for(const auto& env0 : *rel_192_ActualReturnArgs) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2]),ramBitCast(env0[2])}};
rel_582_inliner_Out_ActualReturnArgs->insert(tuple,READ_OP_CONTEXT(rel_582_inliner_Out_ActualReturnArgs_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","caller\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"filename","ActualReturnArgs.csv"},{"name","inliner.Out_ActualReturnArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"caller\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Block\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_582_inliner_Out_ActualReturnArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_192_ActualReturnArgs->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_338(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_Uses(outStmt,outVar,i) :- 
   Statement_Uses(inStmt,inVar,i),
   inliner.InStatement_OutStatement(inStmt,same,outStmt),
   inliner.InVar_OutVar(inVar,same,outVar),
   !inliner.ClonedCallRets(_,_,_,_,inVar,_),
   !inliner.ClonedCallRets(_,inStmt,_,_,_,_),
   !inliner.ClonedCallRets(_,_,_,inStmt,_,_).
in file function_inliner.dl [427:3-433:44])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_579_inliner_InVar_OutVar->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt,rel_583_inliner_Out_Statement_Uses->createContext());
for(const auto& env0 : *rel_7_Statement_Uses) {
if( !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_000010(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty()) && !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_000100(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty()) && !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_010000(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty())) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2]),ramBitCast(env0[2])}};
rel_583_inliner_Out_Statement_Uses->insert(tuple,READ_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Uses(outStmt,outVar,i) :- 
   Statement_Uses(inStmt,actualRet,i),
   inliner.InStatement_OutStatement(inStmt,"",outStmt),
   inliner.ClonedCallRets(callerBlock,_,_,_,actualRet,formalRet),
   inliner.InVar_OutVar(formalRet,callerBlock,outVar),
   !inliner.ClonedCallRets(_,inStmt,_,_,_,_).
in file function_inliner.dl [435:3-440:44])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_578_inliner_ClonedCallRets->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt,rel_583_inliner_Out_Statement_Uses->createContext());
for(const auto& env0 : *rel_7_Statement_Uses) {
if( !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_010000(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty())) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_578_inliner_ClonedCallRets->lowerUpperRange_000010(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[5]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[5]), ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[2]),ramBitCast(env3[2]),ramBitCast(env0[2])}};
rel_583_inliner_Out_Statement_Uses->insert(tuple,READ_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Uses(outCall,outJumpTargetVar,0) :- 
   inliner.ClonedCallRets(_,inCall,_,_,_,_),
   Statement_Uses(inCall,jumpTargetVar,0),
   inliner.InStatement_OutStatement(inCall,"",outCall),
   inliner.InVar_OutVar(jumpTargetVar,"",outJumpTargetVar).
in file function_inliner.dl [444:3-448:55])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_578_inliner_ClonedCallRets->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt,rel_583_inliner_Out_Statement_Uses->createContext());
for(const auto& env0 : *rel_578_inliner_ClonedCallRets) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[2]),ramBitCast(env3[2]),ramBitCast(RamSigned(0))}};
rel_583_inliner_Out_Statement_Uses->insert(tuple,READ_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Uses(outRetJump,outJumpTargetVar,0) :- 
   inliner.ClonedCallRets(callerBlock,_,_,retJump,_,_),
   Statement_Uses(retJump,jumpTargetVar,0),
   inliner.InStatement_OutStatement(retJump,callerBlock,outRetJump),
   inliner.InVar_OutVar(jumpTargetVar,callerBlock,outJumpTargetVar).
in file function_inliner.dl [450:3-454:64])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_578_inliner_ClonedCallRets->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt,rel_583_inliner_Out_Statement_Uses->createContext());
for(const auto& env0 : *rel_578_inliner_ClonedCallRets) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[2]),ramBitCast(env3[2]),ramBitCast(RamSigned(0))}};
rel_583_inliner_Out_Statement_Uses->insert(tuple,READ_OP_CONTEXT(rel_583_inliner_Out_Statement_Uses_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\ti"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Use.csv"},{"name","inliner.Out_Statement_Uses"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"i\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_583_inliner_Out_Statement_Uses);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_339(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Variable_Value(outVar,val) :- 
   Variable_Value(inVar,val),
   inliner.InVar_OutVar(inVar,_,outVar).
in file function_inliner.dl [475:3-477:36])_");
if(!(rel_211_Variable_Value->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_211_Variable_Value_op_ctxt,rel_211_Variable_Value->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_584_inliner_Out_Variable_Value_op_ctxt,rel_584_inliner_Out_Variable_Value->createContext());
for(const auto& env0 : *rel_211_Variable_Value) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_584_inliner_Out_Variable_Value->insert(tuple,READ_OP_CONTEXT(rel_584_inliner_Out_Variable_Value_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Variable_Value.csv"},{"name","inliner.Out_Variable_Value"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_584_inliner_Out_Variable_Value);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_211_Variable_Value->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_340(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_Defines(inStmt,inVar,i) :- 
   Statement_Defines(inStmt,inVar,i),
   !inliner.StatementToClone(inStmt,_,_,_,_),
   !inliner.ClonedCallRets(_,inStmt,_,_,_,_).
in file function_inliner.dl [401:3-405:44])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_585_inliner_Out_Statement_Defines_op_ctxt,rel_585_inliner_Out_Statement_Defines->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
if( !(!rel_578_inliner_ClonedCallRets->lowerUpperRange_010000(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt)).empty()) && !(!rel_568_inliner_StatementToClone->lowerUpperRange_10000(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt)).empty())) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_585_inliner_Out_Statement_Defines->insert(tuple,READ_OP_CONTEXT(rel_585_inliner_Out_Statement_Defines_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Defines(outStmt,cat(cat(inVar,"V"),callerBlock),i) :- 
   inliner.StatementToClone(inStmt,_,callerBlock,_,outStmt),
   Statement_Defines(inStmt,inVar,i).
in file function_inliner.dl [394:3-399:48])_");
if(!(rel_568_inliner_StatementToClone->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_568_inliner_StatementToClone_op_ctxt,rel_568_inliner_StatementToClone->createContext());
CREATE_OP_CONTEXT(rel_585_inliner_Out_Statement_Defines_op_ctxt,rel_585_inliner_Out_Statement_Defines->createContext());
for(const auto& env0 : *rel_568_inliner_StatementToClone) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[4]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env1[1]) + symTable.decode(RamSigned(71)))) + symTable.decode(env0[2]))),ramBitCast(env1[2])}};
rel_585_inliner_Out_Statement_Defines->insert(tuple,READ_OP_CONTEXT(rel_585_inliner_Out_Statement_Defines_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\tn"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Def.csv"},{"name","inliner.Out_Statement_Defines"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"n\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_585_inliner_Out_Statement_Defines);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_1_Statement_Defines->purge();
if (pruneImdtRels) rel_568_inliner_StatementToClone->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_341(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_Next(outStmt,outNext) :- 
   Statement_Next(inStmt,inNext),
   inliner.InStatement_OutStatement(inStmt,same,outStmt),
   inliner.InStatement_OutStatement(inNext,same,outNext),
   !inliner.ClonedCallArgs(_,inStmt,_,_,_).
in file function_inliner.dl [327:3-331:41])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_145_Statement_Next->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_145_Statement_Next_op_ctxt,rel_145_Statement_Next->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
CREATE_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt,rel_586_inliner_Out_Statement_Next->createContext());
for(const auto& env0 : *rel_145_Statement_Next) {
if( !(!rel_576_inliner_ClonedCallArgs->lowerUpperRange_01000(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt)).empty())) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2])}};
rel_586_inliner_Out_Statement_Next->insert(tuple,READ_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Next(clonedRet,outNext) :- 
   inliner.ClonedCallRets(callerBlock,callStmt,_,retStmt,_,_),
   Statement_Next(callStmt,inNext),
   inliner.InStatement_OutStatement(retStmt,callerBlock,clonedRet),
   inliner.InStatement_OutStatement(inNext,"",outNext).
in file function_inliner.dl [335:3-339:51])_");
if(!(rel_578_inliner_ClonedCallRets->empty()) && !(rel_145_Statement_Next->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_145_Statement_Next_op_ctxt,rel_145_Statement_Next->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_578_inliner_ClonedCallRets_op_ctxt,rel_578_inliner_ClonedCallRets->createContext());
CREATE_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt,rel_586_inliner_Out_Statement_Next->createContext());
for(const auto& env0 : *rel_578_inliner_ClonedCallRets) {
auto range = rel_145_Statement_Next->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_145_Statement_Next_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env3[2])}};
rel_586_inliner_Out_Statement_Next->insert(tuple,READ_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Next(outCall,outFirstStmt) :- 
   inliner.ClonedCallArgs(callerBlock,callStmt,callee,_,_),
   InFunction(inEntryBlock,callee),
   FunctionEntry(inEntryBlock),
   Statement_Block(inFirstStmt,inEntryBlock),
   !Statement_Next(_,inFirstStmt),
   inliner.InStatement_OutStatement(callStmt,"",outCall),
   inliner.InStatement_OutStatement(inFirstStmt,callerBlock,outFirstStmt).
in file function_inliner.dl [343:3-350:70])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_576_inliner_ClonedCallArgs->empty()) && !(rel_114_FunctionEntry->empty()) && !(rel_115_InFunction->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt,rel_114_FunctionEntry->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_145_Statement_Next_op_ctxt,rel_145_Statement_Next->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_576_inliner_ClonedCallArgs_op_ctxt,rel_576_inliner_ClonedCallArgs->createContext());
CREATE_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt,rel_586_inliner_Out_Statement_Next->createContext());
for(const auto& env0 : *rel_576_inliner_ClonedCallArgs) {
auto range = rel_115_InFunction->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
if( rel_114_FunctionEntry->contains(Tuple<RamDomain,1>{{ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_114_FunctionEntry_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_145_Statement_Next->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_145_Statement_Next_op_ctxt)).empty())) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env3[2]),ramBitCast(env4[2])}};
rel_586_inliner_Out_Statement_Next->insert(tuple,READ_OP_CONTEXT(rel_586_inliner_Out_Statement_Next_op_ctxt));
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tnext"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Statement_Next.csv"},{"name","inliner.Out_Statement_Next"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"next\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Statement\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_586_inliner_Out_Statement_Next);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_99_Statement_Block->purge();
if (pruneImdtRels) rel_145_Statement_Next->purge();
if (pruneImdtRels) rel_114_FunctionEntry->purge();
if (pruneImdtRels) rel_115_InFunction->purge();
if (pruneImdtRels) rel_576_inliner_ClonedCallArgs->purge();
if (pruneImdtRels) rel_578_inliner_ClonedCallRets->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_342(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_Opcode(outStmt,opcode) :- 
   Statement_Opcode(inStmt,opcode),
   inliner.InStatement_OutStatement(inStmt,_,outStmt),
   !inliner.CallToClonedFunction(_,inStmt,_),
   !inliner.FunctionToInline_RetStmt(_,inStmt).
in file function_inliner.dl [353:3-357:42])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt,rel_575_inliner_CallToClonedFunction->createContext());
CREATE_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt,rel_577_inliner_FunctionToInline_RetStmt->createContext());
CREATE_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt,rel_587_inliner_Out_Statement_Opcode->createContext());
for(const auto& env0 : *rel_2_Statement_Opcode) {
if( !(!rel_577_inliner_FunctionToInline_RetStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt)).empty()) && !(!rel_575_inliner_CallToClonedFunction->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt)).empty())) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_587_inliner_Out_Statement_Opcode->insert(tuple,READ_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Opcode(outStmt,"JUMP") :- 
   inliner.InStatement_OutStatement(inStmt,_,outStmt),
   inliner.CallToClonedFunction(_,inStmt,_).
in file function_inliner.dl [359:3-361:79])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_575_inliner_CallToClonedFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt,rel_575_inliner_CallToClonedFunction->createContext());
CREATE_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt,rel_587_inliner_Out_Statement_Opcode->createContext());
for(const auto& env0 : *rel_569_inliner_InStatement_OutStatement) {
if( !rel_575_inliner_CallToClonedFunction->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_575_inliner_CallToClonedFunction_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(RamSigned(74))}};
rel_587_inliner_Out_Statement_Opcode->insert(tuple,READ_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Statement_Opcode(outStmt,"JUMP") :- 
   inliner.InStatement_OutStatement(inStmt,_,outStmt),
   inliner.FunctionToInline_RetStmt(_,inStmt).
in file function_inliner.dl [359:3-361:79])_");
if(!(rel_569_inliner_InStatement_OutStatement->empty()) && !(rel_577_inliner_FunctionToInline_RetStmt->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt,rel_577_inliner_FunctionToInline_RetStmt->createContext());
CREATE_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt,rel_587_inliner_Out_Statement_Opcode->createContext());
for(const auto& env0 : *rel_569_inliner_InStatement_OutStatement) {
if( !rel_577_inliner_FunctionToInline_RetStmt->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_577_inliner_FunctionToInline_RetStmt_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[2]),ramBitCast(RamSigned(74))}};
rel_587_inliner_Out_Statement_Opcode->insert(tuple,READ_OP_CONTEXT(rel_587_inliner_Out_Statement_Opcode_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\topcode"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Op.csv"},{"name","inliner.Out_Statement_Opcode"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"opcode\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Opcode\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_587_inliner_Out_Statement_Opcode);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_577_inliner_FunctionToInline_RetStmt->purge();
if (pruneImdtRels) rel_575_inliner_CallToClonedFunction->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_343(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_FormalArgs(fun,a,pos) :- 
   FormalArgs(fun,a,pos),
   !inliner.FunctionToInline(fun).
in file function_inliner.dl [256:3-258:28])_");
if(!(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_588_inliner_Out_FormalArgs_op_ctxt,rel_588_inliner_Out_FormalArgs->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
if( !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_588_inliner_Out_FormalArgs->insert(tuple,READ_OP_CONTEXT(rel_588_inliner_Out_FormalArgs_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fn\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"filename","FormalArgs.csv"},{"name","inliner.Out_FormalArgs"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fn\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_588_inliner_Out_FormalArgs);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_111_FormalArgs->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_344(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_IsFunction(fun) :- 
   IsFunction(fun),
   !inliner.FunctionToInline(fun).
in file function_inliner.dl [260:3-262:28])_");
if(!(rel_551_IsFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_551_IsFunction_op_ctxt,rel_551_IsFunction->createContext());
CREATE_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt,rel_558_inliner_FunctionToInline->createContext());
CREATE_OP_CONTEXT(rel_589_inliner_Out_IsFunction_op_ctxt,rel_589_inliner_Out_IsFunction->createContext());
for(const auto& env0 : *rel_551_IsFunction) {
if( !(rel_558_inliner_FunctionToInline->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_558_inliner_FunctionToInline_op_ctxt)))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_589_inliner_Out_IsFunction->insert(tuple,READ_OP_CONTEXT(rel_589_inliner_Out_IsFunction_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","func"},{"auxArity","0"},{"delimiter","\t"},{"filename","Function.csv"},{"name","inliner.Out_IsFunction"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"func\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_589_inliner_Out_IsFunction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_551_IsFunction->purge();
if (pruneImdtRels) rel_558_inliner_FunctionToInline->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_345(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_OriginalStatement_Block.csv"},{"name","OriginalStatement_Block"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:OriginalStatement\", \"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_590_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << "Error loading OriginalStatement_Block data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_346(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLReturnDataStartVar(call,startVar) :- 
   CALL(call,_,_,_,_,_,startVar,_,_).
in file uses_defs_abstractions.dl [443:1-446:48])_");
if(!(rel_53_CALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
for(const auto& env0 : *rel_53_CALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[6])}};
rel_56_CALLReturnDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLReturnDataStartVar(call,startVar) :- 
   DELEGATECALL(call,_,_,_,_,startVar,_,_).
in file uses_defs_abstractions.dl [443:1-446:48])_");
if(!(rel_54_DELEGATECALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
for(const auto& env0 : *rel_54_DELEGATECALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[5])}};
rel_56_CALLReturnDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLReturnDataStartVar(call,startVar) :- 
   STATICCALL(call,_,_,_,_,startVar,_,_).
in file uses_defs_abstractions.dl [443:1-446:48])_");
if(!(rel_55_STATICCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
for(const auto& env0 : *rel_55_STATICCALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[5])}};
rel_56_CALLReturnDataStartVar->insert(tuple,READ_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_347(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_OriginalStatement_Block(stmt,outBlock) :- 
   OriginalStatement_Block(stmt,inBlock),
   inliner.InBlock_OutBlock(inBlock,_,outBlock).
in file function_inliner.dl [287:3-289:44])_");
if(!(rel_590_OriginalStatement_Block->empty()) && !(rel_561_inliner_InBlock_OutBlock->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt,rel_561_inliner_InBlock_OutBlock->createContext());
CREATE_OP_CONTEXT(rel_590_OriginalStatement_Block_op_ctxt,rel_590_OriginalStatement_Block->createContext());
CREATE_OP_CONTEXT(rel_591_inliner_Out_OriginalStatement_Block_op_ctxt,rel_591_inliner_Out_OriginalStatement_Block->createContext());
for(const auto& env0 : *rel_590_OriginalStatement_Block) {
auto range = rel_561_inliner_InBlock_OutBlock->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_561_inliner_InBlock_OutBlock_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[2])}};
rel_591_inliner_Out_OriginalStatement_Block->insert(tuple,READ_OP_CONTEXT(rel_591_inliner_Out_OriginalStatement_Block_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_OriginalStatement_Block.csv"},{"name","inliner.Out_OriginalStatement_Block"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"s:Block\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_591_inliner_Out_OriginalStatement_Block);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_590_OriginalStatement_Block->purge();
if (pruneImdtRels) rel_561_inliner_InBlock_OutBlock->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_348(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\toriginalStatement"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Statement_OriginalStatement.csv"},{"name","Statement_OriginalStatement"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"originalStatement\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:OriginalStatement\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_592_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << "Error loading Statement_OriginalStatement data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_349(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Statement_OriginalStatement(outStmt,stmt) :- 
   Statement_OriginalStatement(inStmt,stmt),
   inliner.InStatement_OutStatement(inStmt,_,outStmt).
in file function_inliner.dl [283:3-285:50])_");
if(!(rel_592_Statement_OriginalStatement->empty()) && !(rel_569_inliner_InStatement_OutStatement->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt,rel_569_inliner_InStatement_OutStatement->createContext());
CREATE_OP_CONTEXT(rel_592_Statement_OriginalStatement_op_ctxt,rel_592_Statement_OriginalStatement->createContext());
CREATE_OP_CONTEXT(rel_593_inliner_Out_Statement_OriginalStatement_op_ctxt,rel_593_inliner_Out_Statement_OriginalStatement->createContext());
for(const auto& env0 : *rel_592_Statement_OriginalStatement) {
auto range = rel_569_inliner_InStatement_OutStatement->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_569_inliner_InStatement_OutStatement_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[2]),ramBitCast(env0[1])}};
rel_593_inliner_Out_Statement_OriginalStatement->insert(tuple,READ_OP_CONTEXT(rel_593_inliner_Out_Statement_OriginalStatement_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","irstmt\tstmt"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Statement_OriginalStatement.csv"},{"name","inliner.Out_Statement_OriginalStatement"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"irstmt\", \"stmt\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:symbol\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_593_inliner_Out_Statement_OriginalStatement);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_592_Statement_OriginalStatement->purge();
if (pruneImdtRels) rel_569_inliner_InStatement_OutStatement->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_350(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Variable_BlockValue.csv"},{"name","Variable_BlockValue"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_594_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << "Error loading Variable_BlockValue data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_351(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.Out_Variable_BlockValue(outVar,inVal) :- 
   Variable_BlockValue(inVar,inVal),
   Statement_Uses(inJump,inVar,0),
   Statement_Opcode(inJump,opcode),
   opcode = "JUMP",
   inliner.InVar_OutVar(inVar,"",outVar).
in file function_inliner.dl [465:3-470:37])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_594_Variable_BlockValue->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_594_Variable_BlockValue_op_ctxt,rel_594_Variable_BlockValue->createContext());
CREATE_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt,rel_595_inliner_Out_Variable_BlockValue->createContext());
for(const auto& env0 : *rel_594_Variable_BlockValue) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(74))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1])}};
rel_595_inliner_Out_Variable_BlockValue->insert(tuple,READ_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt));
}
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Variable_BlockValue(outVar,inVal) :- 
   Variable_BlockValue(inVar,inVal),
   Statement_Uses(inJump,inVar,0),
   Statement_Opcode(inJump,opcode),
   opcode = "JUMPI",
   inliner.InVar_OutVar(inVar,"",outVar).
in file function_inliner.dl [465:3-470:37])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_594_Variable_BlockValue->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_594_Variable_BlockValue_op_ctxt,rel_594_Variable_BlockValue->createContext());
CREATE_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt,rel_595_inliner_Out_Variable_BlockValue->createContext());
for(const auto& env0 : *rel_594_Variable_BlockValue) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(75))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(RamSigned(69)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1])}};
rel_595_inliner_Out_Variable_BlockValue->insert(tuple,READ_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt));
}
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Variable_BlockValue(outVar,cat(cat(inVal,"B"),callerBlock)) :- 
   Variable_BlockValue(inVar,inVal),
   Statement_Uses(inJump,inVar,0),
   Statement_Opcode(inJump,opcode),
   opcode = "JUMP",
   inliner.InVar_OutVar(inVar,callerBlock,outVar),
   callerBlock != "".
in file function_inliner.dl [456:3-463:48])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_594_Variable_BlockValue->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_594_Variable_BlockValue_op_ctxt,rel_594_Variable_BlockValue->createContext());
CREATE_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt,rel_595_inliner_Out_Variable_BlockValue->createContext());
for(const auto& env0 : *rel_594_Variable_BlockValue) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(74))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(69)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[1]) + symTable.decode(RamSigned(68)))) + symTable.decode(env2[1])))}};
rel_595_inliner_Out_Variable_BlockValue->insert(tuple,READ_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt));
}
}
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(inliner.Out_Variable_BlockValue(outVar,cat(cat(inVal,"B"),callerBlock)) :- 
   Variable_BlockValue(inVar,inVal),
   Statement_Uses(inJump,inVar,0),
   Statement_Opcode(inJump,opcode),
   opcode = "JUMPI",
   inliner.InVar_OutVar(inVar,callerBlock,outVar),
   callerBlock != "".
in file function_inliner.dl [456:3-463:48])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty()) && !(rel_594_Variable_BlockValue->empty()) && !(rel_579_inliner_InVar_OutVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt,rel_579_inliner_InVar_OutVar->createContext());
CREATE_OP_CONTEXT(rel_594_Variable_BlockValue_op_ctxt,rel_594_Variable_BlockValue->createContext());
CREATE_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt,rel_595_inliner_Out_Variable_BlockValue->createContext());
for(const auto& env0 : *rel_594_Variable_BlockValue) {
auto range = rel_7_Statement_Uses->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env1[0]),ramBitCast(RamSigned(75))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_579_inliner_InVar_OutVar->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_579_inliner_InVar_OutVar_op_ctxt));
for(const auto& env2 : range) {
if( (ramBitCast<RamDomain>(env2[1]) != ramBitCast<RamDomain>(RamSigned(69)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[1]) + symTable.decode(RamSigned(68)))) + symTable.decode(env2[1])))}};
rel_595_inliner_Out_Variable_BlockValue->insert(tuple,READ_OP_CONTEXT(rel_595_inliner_Out_Variable_BlockValue_op_ctxt));
}
}
break;
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue"},{"auxArity","0"},{"delimiter","\t"},{"filename","TAC_Variable_BlockValue.csv"},{"name","inliner.Out_Variable_BlockValue"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"value\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Value\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_595_inliner_Out_Variable_BlockValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_2_Statement_Opcode->purge();
if (pruneImdtRels) rel_594_Variable_BlockValue->purge();
if (pruneImdtRels) rel_7_Statement_Uses->purge();
if (pruneImdtRels) rel_579_inliner_InVar_OutVar->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_352(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.Bypassing(call) :- 
   CALLReturnDataStartVar(call,_).
in file uses_defs_abstractions.dl [499:1-499:71])_");
if(!(rel_56_CALLReturnDataStartVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_57_callToReturnDataOp_Bypassing_op_ctxt,rel_57_callToReturnDataOp_Bypassing->createContext());
for(const auto& env0 : *rel_56_CALLReturnDataStartVar) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_57_callToReturnDataOp_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_57_callToReturnDataOp_Bypassing_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_353(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single(@generator_0) :- 
   @generator_0 = count : { CALLReturnDataStartVar(+underscore_887,+underscore_888) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_56_CALLReturnDataStartVar_op_ctxt,rel_56_CALLReturnDataStartVar->createContext());
CREATE_OP_CONTEXT(rel_58_agg_single_op_ctxt,rel_58_agg_single->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_56_CALLReturnDataStartVar->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_58_agg_single->insert(tuple,READ_OP_CONTEXT(rel_58_agg_single_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_354(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLReturnDataLengthVar(call,lenVar) :- 
   CALL(call,_,_,_,_,_,_,lenVar,_).
in file uses_defs_abstractions.dl [448:1-451:46])_");
if(!(rel_53_CALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt,rel_59_CALLReturnDataLengthVar->createContext());
for(const auto& env0 : *rel_53_CALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[7])}};
rel_59_CALLReturnDataLengthVar->insert(tuple,READ_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLReturnDataLengthVar(call,lenVar) :- 
   DELEGATECALL(call,_,_,_,_,_,lenVar,_).
in file uses_defs_abstractions.dl [448:1-451:46])_");
if(!(rel_54_DELEGATECALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
CREATE_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt,rel_59_CALLReturnDataLengthVar->createContext());
for(const auto& env0 : *rel_54_DELEGATECALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[6])}};
rel_59_CALLReturnDataLengthVar->insert(tuple,READ_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLReturnDataLengthVar(call,lenVar) :- 
   STATICCALL(call,_,_,_,_,_,lenVar,_).
in file uses_defs_abstractions.dl [448:1-451:46])_");
if(!(rel_55_STATICCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
CREATE_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt,rel_59_CALLReturnDataLengthVar->createContext());
for(const auto& env0 : *rel_55_STATICCALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[6])}};
rel_59_CALLReturnDataLengthVar->insert(tuple,READ_OP_CONTEXT(rel_59_CALLReturnDataLengthVar_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_355(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MSTORE8(stmt,index,from) :- 
   Statement_Opcode(stmt,"MSTORE8"),
   Statement_Uses(stmt,index,0),
   Statement_Uses(stmt,from,1).
in file tac_instructions.dl [152:1-155:33])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_60_MSTORE8_op_ctxt,rel_60_MSTORE8->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(76))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(76))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_60_MSTORE8->insert(tuple,READ_OP_CONTEXT(rel_60_MSTORE8_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_356(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURN(stmt,start,length) :- 
   Statement_Opcode(stmt,"RETURN"),
   Statement_Uses(stmt,start,0),
   Statement_Uses(stmt,length,1).
in file tac_instructions.dl [288:1-291:35])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_61_RETURN_op_ctxt,rel_61_RETURN->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(77))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(77))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_61_RETURN->insert(tuple,READ_OP_CONTEXT(rel_61_RETURN_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_357(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(REVERT(stmt,memStart,memLength) :- 
   Statement_Opcode(stmt,"REVERT"),
   Statement_Uses(stmt,memStart,0),
   Statement_Uses(stmt,memLength,1).
in file tac_instructions.dl [272:1-275:38])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_62_REVERT_op_ctxt,rel_62_REVERT->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(60))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(60))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_62_REVERT->insert(tuple,READ_OP_CONTEXT(rel_62_REVERT_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_358(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHA3(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"SHA3"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [52:68-52:212])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(78))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(78))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_63_SHA3->insert(tuple,READ_OP_CONTEXT(rel_63_SHA3_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_359(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"SHA3",startVar) :- 
   SHA3(stmt,startVar,_,_).
in file core.dl [75:1-82:62])_");
if(!(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_63_SHA3) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(78)),ramBitCast(env0[1])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"LOG",startVar) :- 
   LOGStatement(stmt,_),
   Statement_Uses(stmt,startVar,0).
in file core.dl [75:1-82:62])_");
if(!(rel_4_LOGStatement->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_4_LOGStatement) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(79)),ramBitCast(env1[1])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"REVERT",startVar) :- 
   REVERT(stmt,startVar,_).
in file core.dl [75:1-82:62])_");
if(!(rel_62_REVERT->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_62_REVERT_op_ctxt,rel_62_REVERT->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_62_REVERT) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(60)),ramBitCast(env0[1])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"RETURN",startVar) :- 
   RETURN(stmt,startVar,_).
in file core.dl [75:1-82:62])_");
if(!(rel_61_RETURN->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_61_RETURN_op_ctxt,rel_61_RETURN->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_61_RETURN) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(77)),ramBitCast(env0[1])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"STATICCALL",startVar) :- 
   STATICCALL(stmt,_,_,startVar,_,_,_,_).
in file core.dl [75:1-82:62])_");
if(!(rel_55_STATICCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_55_STATICCALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(73)),ramBitCast(env0[3])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"DELEGATECALL",startVar) :- 
   DELEGATECALL(stmt,_,_,startVar,_,_,_,_).
in file core.dl [75:1-82:62])_");
if(!(rel_54_DELEGATECALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_54_DELEGATECALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(70)),ramBitCast(env0[3])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_StartVar(stmt,"CALL",startVar) :- 
   CALL(stmt,_,_,_,startVar,_,_,_,_).
in file core.dl [75:1-82:62])_");
if(!(rel_53_CALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
for(const auto& env0 : *rel_53_CALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(67)),ramBitCast(env0[4])}};
rel_64_StatementUsesMemory_StartVar->insert(tuple,READ_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_360(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATASIZE(stmt,to) :- 
   Statement_Opcode(stmt,"CALLDATASIZE"),
   Statement_Defines(stmt,to,_).
in file tac_instructions.dl [99:50-99:148])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt,rel_6_CALLDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(44))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(44))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_6_CALLDATASIZE->insert(tuple,READ_OP_CONTEXT(rel_6_CALLDATASIZE_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_361(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryReadsFromZero(stmt,kind) :- 
   StatementUsesMemory_StartVar(stmt,kind,start),
   BasicVariable_Value(start,"0x0").
in file memory_addresses.dl [155:1-157:37])_");
if(!(rel_64_StatementUsesMemory_StartVar->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_64_StatementUsesMemory_StartVar_op_ctxt,rel_64_StatementUsesMemory_StartVar->createContext());
CREATE_OP_CONTEXT(rel_65_StatementUsesMemoryReadsFromZero_op_ctxt,rel_65_StatementUsesMemoryReadsFromZero->createContext());
for(const auto& env0 : *rel_64_StatementUsesMemory_StartVar) {
if( rel_13_BasicVariable_Value->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_65_StatementUsesMemoryReadsFromZero->insert(tuple,READ_OP_CONTEXT(rel_65_StatementUsesMemoryReadsFromZero_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_362(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"SHA3",lenvar) :- 
   SHA3(stmt,_,lenvar,_).
in file core.dl [84:1-91:73])_");
if(!(rel_63_SHA3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_63_SHA3_op_ctxt,rel_63_SHA3->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_63_SHA3) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(78)),ramBitCast(env0[2])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"LOG",lenvar) :- 
   LOGStatement(stmt,_),
   Statement_Uses(stmt,lenvar,1).
in file core.dl [84:1-91:73])_");
if(!(rel_4_LOGStatement->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_4_LOGStatement) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(79)),ramBitCast(env1[1])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"REVERT",lenvar) :- 
   REVERT(stmt,_,lenvar).
in file core.dl [84:1-91:73])_");
if(!(rel_62_REVERT->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_62_REVERT_op_ctxt,rel_62_REVERT->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_62_REVERT) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(60)),ramBitCast(env0[2])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"RETURN",lenvar) :- 
   RETURN(stmt,_,lenvar).
in file core.dl [84:1-91:73])_");
if(!(rel_61_RETURN->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_61_RETURN_op_ctxt,rel_61_RETURN->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_61_RETURN) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(77)),ramBitCast(env0[2])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"CALL",lenvar) :- 
   CALL(stmt,_,_,_,_,lenvar,_,_,_).
in file core.dl [84:1-91:73])_");
if(!(rel_53_CALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_53_CALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(67)),ramBitCast(env0[5])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"STATICCALL",lenvar) :- 
   STATICCALL(stmt,_,_,_,lenvar,_,_,_).
in file core.dl [84:1-91:73])_");
if(!(rel_55_STATICCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_55_STATICCALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(73)),ramBitCast(env0[4])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemory_LengthVar(stmt,"DELEGATECALL",lenvar) :- 
   DELEGATECALL(stmt,_,_,_,lenvar,_,_,_).
in file core.dl [84:1-91:73])_");
if(!(rel_54_DELEGATECALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
for(const auto& env0 : *rel_54_DELEGATECALL) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(70)),ramBitCast(env0[4])}};
rel_66_StatementUsesMemory_LengthVar->insert(tuple,READ_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_62_REVERT->purge();
if (pruneImdtRels) rel_61_RETURN->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_363(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemory(stmt,kind) :- 
   StatementUsesMemory_LengthVar(stmt,kind,_).
in file core.dl [72:1-73:48])_");
if(!(rel_66_StatementUsesMemory_LengthVar->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_67_StatementUsesMemory->insert(tuple,READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_364(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.Bypassing(stmt) :- 
   MSTOREFreePtr(stmt).
in file memory_addresses.dl [139:1-141:77])_");
if(!(rel_41_MSTOREFreePtr->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_68_mloadAliasesPrecise_Bypassing_op_ctxt,rel_68_mloadAliasesPrecise_Bypassing->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_68_mloadAliasesPrecise_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_68_mloadAliasesPrecise_Bypassing_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(mloadAliasesPrecise.Bypassing(stmt) :- 
   StatementUsesMemory(stmt,_),
   !StatementUsesMemoryReadsFromZero(stmt,_).
in file memory_addresses.dl [139:1-141:77])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_65_StatementUsesMemoryReadsFromZero_op_ctxt,rel_65_StatementUsesMemoryReadsFromZero->createContext());
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_68_mloadAliasesPrecise_Bypassing_op_ctxt,rel_68_mloadAliasesPrecise_Bypassing->createContext());
for(const auto& env0 : *rel_67_StatementUsesMemory) {
if( !(!rel_65_StatementUsesMemoryReadsFromZero->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_65_StatementUsesMemoryReadsFromZero_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_68_mloadAliasesPrecise_Bypassing->insert(tuple,READ_OP_CONTEXT(rel_68_mloadAliasesPrecise_Bypassing_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_65_StatementUsesMemoryReadsFromZero->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_365(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEnc(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "LOG".
in file core.dl [93:1-95:36])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt,rel_69_StatementUsesMemoryReadsABIEnc->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(79))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(79))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_69_StatementUsesMemoryReadsABIEnc->insert(tuple,READ_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEnc(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "RETURN".
in file core.dl [93:1-95:36])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt,rel_69_StatementUsesMemoryReadsABIEnc->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(77))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(77))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_69_StatementUsesMemoryReadsABIEnc->insert(tuple,READ_OP_CONTEXT(rel_69_StatementUsesMemoryReadsABIEnc_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_366(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEncWSelector(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "CALL".
in file core.dl [97:1-99:83])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(67))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(67))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_70_StatementUsesMemoryReadsABIEncWSelector->insert(tuple,READ_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEncWSelector(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "STATICCALL".
in file core.dl [97:1-99:83])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(73))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(73))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_70_StatementUsesMemoryReadsABIEncWSelector->insert(tuple,READ_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEncWSelector(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "DELEGATECALL".
in file core.dl [97:1-99:83])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(70))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(70))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_70_StatementUsesMemoryReadsABIEncWSelector->insert(tuple,READ_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(StatementUsesMemoryReadsABIEncWSelector(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "REVERT".
in file core.dl [97:1-99:83])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt,rel_70_StatementUsesMemoryReadsABIEncWSelector->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(60))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(60))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_70_StatementUsesMemoryReadsABIEncWSelector->insert(tuple,READ_OP_CONTEXT(rel_70_StatementUsesMemoryReadsABIEncWSelector_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_367(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryReadsRawData(stmt,kind) :- 
   StatementUsesMemory(stmt,kind),
   kind = "SHA3".
in file core.dl [101:1-103:19])_");
if(!(rel_67_StatementUsesMemory->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt,rel_67_StatementUsesMemory->createContext());
CREATE_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt,rel_71_StatementUsesMemoryReadsRawData->createContext());
auto range = rel_67_StatementUsesMemory->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(78))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(78))}},READ_OP_CONTEXT(rel_67_StatementUsesMemory_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_71_StatementUsesMemoryReadsRawData->insert(tuple,READ_OP_CONTEXT(rel_71_StatementUsesMemoryReadsRawData_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_368(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(StatementUsesMemoryOfInitiallyComputableLength(stmt,lenvar,@hex_to_number(val)) :- 
   StatementUsesMemory_LengthVar(stmt,_,lenvar),
   BasicVariable_Value(lenvar,val).
in file core.dl [107:1-110:32])_");
if(!(rel_66_StatementUsesMemory_LengthVar->empty()) && !(rel_13_BasicVariable_Value->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_72_StatementUsesMemoryOfInitiallyComputableLength_op_ctxt,rel_72_StatementUsesMemoryOfInitiallyComputableLength->createContext());
for(const auto& env0 : *rel_66_StatementUsesMemory_LengthVar) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(functors::hex_to_number(symTable.decode(env1[1]).c_str()))}};
rel_72_StatementUsesMemoryOfInitiallyComputableLength->insert(tuple,READ_OP_CONTEXT(rel_72_StatementUsesMemoryOfInitiallyComputableLength_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_369(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single4(@generator_0) :- 
   @generator_0 = count : { StatementUsesMemoryOfInitiallyComputableLength(+underscore_915,+underscore_916,+underscore_917) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_72_StatementUsesMemoryOfInitiallyComputableLength_op_ctxt,rel_72_StatementUsesMemoryOfInitiallyComputableLength->createContext());
CREATE_OP_CONTEXT(rel_73_agg_single4_op_ctxt,rel_73_agg_single4->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_72_StatementUsesMemoryOfInitiallyComputableLength->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_73_agg_single4->insert(tuple,READ_OP_CONTEXT(rel_73_agg_single4_op_ctxt));
}
}
();if (pruneImdtRels) rel_72_StatementUsesMemoryOfInitiallyComputableLength->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_370(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single5(@generator_0) :- 
   @generator_0 = count : { StatementUsesMemory_LengthVar(+underscore_918,+underscore_919,+underscore_920) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_66_StatementUsesMemory_LengthVar_op_ctxt,rel_66_StatementUsesMemory_LengthVar->createContext());
CREATE_OP_CONTEXT(rel_74_agg_single5_op_ctxt,rel_74_agg_single5->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_66_StatementUsesMemory_LengthVar->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_74_agg_single5->insert(tuple,READ_OP_CONTEXT(rel_74_agg_single5_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_371(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tvar\ti"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Use.csv"},{"name","Statement_Uses"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"stmt\", \"var\", \"i\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Statement\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_7_Statement_Uses);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Uses data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_372(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(VariableLengthMemoryCopyStatement(stmt,memAddrVar,lenVar) :- 
   Statement_Opcode(stmt,"CALLDATACOPY"),
   Statement_Uses(stmt,memAddrVar,0),
   Statement_Uses(stmt,lenVar,2).
in file core.dl [14:1-19:35])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(51))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(51))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_75_VariableLengthMemoryCopyStatement->insert(tuple,READ_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VariableLengthMemoryCopyStatement(stmt,memAddrVar,lenVar) :- 
   Statement_Opcode(stmt,"RETURNDATACOPY"),
   Statement_Uses(stmt,memAddrVar,0),
   Statement_Uses(stmt,lenVar,2).
in file core.dl [14:1-19:35])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(80))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(80))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_75_VariableLengthMemoryCopyStatement->insert(tuple,READ_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VariableLengthMemoryCopyStatement(stmt,memAddrVar,lenVar) :- 
   Statement_Opcode(stmt,"CODECOPY"),
   Statement_Uses(stmt,memAddrVar,0),
   Statement_Uses(stmt,lenVar,2).
in file core.dl [14:1-19:35])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(81))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(81))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_75_VariableLengthMemoryCopyStatement->insert(tuple,READ_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VariableLengthMemoryCopyStatement(stmt,memAddrVar,lenVar) :- 
   Statement_Opcode(stmt,"EXTCODECOPY"),
   Statement_Uses(stmt,memAddrVar,1),
   Statement_Uses(stmt,lenVar,3).
in file core.dl [21:1-24:35])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt,rel_75_VariableLengthMemoryCopyStatement->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(82))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(82))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_75_VariableLengthMemoryCopyStatement->insert(tuple,READ_OP_CONTEXT(rel_75_VariableLengthMemoryCopyStatement_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_373(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LT(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"LT"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [67:66-67:206])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_76_LT_op_ctxt,rel_76_LT->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(14))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(14))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_76_LT->insert(tuple,READ_OP_CONTEXT(rel_76_LT_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_374(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(JUMPI(stmt,dest,condVar) :- 
   Statement_Opcode(stmt,"JUMPI"),
   Statement_Uses(stmt,dest,0),
   Statement_Uses(stmt,condVar,1).
in file tac_instructions.dl [262:1-265:36])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_77_JUMPI_op_ctxt,rel_77_JUMPI->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(75))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(75))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_77_JUMPI->insert(tuple,READ_OP_CONTEXT(rel_77_JUMPI_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_375(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SLOAD(stmt,a,to) :- 
   Statement_Opcode(stmt,"SLOAD"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0).
in file tac_instructions.dl [84:56-84:171])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_78_SLOAD_op_ctxt,rel_78_SLOAD->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(83))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(83))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_78_SLOAD->insert(tuple,READ_OP_CONTEXT(rel_78_SLOAD_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_376(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SSTORE(stmt,index,var) :- 
   Statement_Opcode(stmt,"SSTORE"),
   Statement_Uses(stmt,index,0),
   Statement_Uses(stmt,var,1).
in file tac_instructions.dl [165:1-168:32])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_79_SSTORE_op_ctxt,rel_79_SSTORE->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(84))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(84))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1])}};
rel_79_SSTORE->insert(tuple,READ_OP_CONTEXT(rel_79_SSTORE_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_377(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNPRIVATE(stmt,b) :- 
   Statement_Opcode(stmt,"RETURNPRIVATE"),
   Statement_Uses(stmt,b,0).
in file tac_instructions.dl [377:1-379:31])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_80_RETURNPRIVATE_op_ctxt,rel_80_RETURNPRIVATE->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_80_RETURNPRIVATE->insert(tuple,READ_OP_CONTEXT(rel_80_RETURNPRIVATE_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_378(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(GT(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"GT"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [68:66-68:206])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_81_GT_op_ctxt,rel_81_GT->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(12))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(12))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_81_GT->insert(tuple,READ_OP_CONTEXT(rel_81_GT_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_379(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ISZERO(stmt,a,to) :- 
   Statement_Opcode(stmt,"ISZERO"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0).
in file tac_instructions.dl [86:57-86:174])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_82_ISZERO_op_ctxt,rel_82_ISZERO->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(49))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(49))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_82_ISZERO->insert(tuple,READ_OP_CONTEXT(rel_82_ISZERO_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_380(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MUL(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"MUL"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [61:67-61:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_83_MUL_op_ctxt,rel_83_MUL->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(8))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(8))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_83_MUL->insert(tuple,READ_OP_CONTEXT(rel_83_MUL_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_381(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(SHL(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"SHL"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [73:67-73:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_84_SHL_op_ctxt,rel_84_SHL->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(18))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(18))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_84_SHL->insert(tuple,READ_OP_CONTEXT(rel_84_SHL_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_382(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ADD(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"ADD"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [56:67-56:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(6))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(6))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_8_ADD->insert(tuple,READ_OP_CONTEXT(rel_8_ADD_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_383(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AND(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"AND"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [59:67-59:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(9))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(9))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_85_AND->insert(tuple,READ_OP_CONTEXT(rel_85_AND_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_384(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(AntiMaskOp(originVar,to,byteLow,byteHigh) :- 
   AND(_,antiMaskVar,originVar,to),
   BasicVariable_Value(antiMaskVar,antiMask),
   AntiByteMask(antiMask,byteLow,byteHigh).
in file casts_shifts.dl [67:1-70:45])_");
if(!(rel_13_BasicVariable_Value->empty()) && !(rel_37_AntiByteMask->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt,rel_37_AntiByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
for(const auto& env0 : *rel_85_AND) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_37_AntiByteMask->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env2[1]),ramBitCast(env2[2])}};
rel_86_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(AntiMaskOp(originVar,to,byteLow,byteHigh) :- 
   AND(_,originVar,antiMaskVar,to),
   BasicVariable_Value(antiMaskVar,antiMask),
   AntiByteMask(antiMask,byteLow,byteHigh).
in file casts_shifts.dl [67:1-70:45])_");
if(!(rel_13_BasicVariable_Value->empty()) && !(rel_37_AntiByteMask->empty()) && !(rel_85_AND->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt,rel_37_AntiByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
for(const auto& env0 : *rel_85_AND) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_37_AntiByteMask->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[3]),ramBitCast(env2[1]),ramBitCast(env2[2])}};
rel_86_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_87_delta_AntiMaskOp_op_ctxt,rel_87_delta_AntiMaskOp->createContext());
for(const auto& env0 : *rel_86_AntiMaskOp) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_87_delta_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_87_delta_AntiMaskOp_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(AntiMaskOp(originVar,to,byteLow,byteHigh) :- 
   AntiMaskOp(originVar,mid,byteLow,byteHigh),
   AND(_,antiMaskVar,mid,to),
   BasicVariable_Value(antiMaskVar,antiMask),
   AntiByteMask(antiMask,byteLow,byteHigh).
in file casts_shifts.dl [72:1-76:45])_");
if(!(rel_85_AND->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_87_delta_AntiMaskOp->empty()) && !(rel_37_AntiByteMask->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt,rel_37_AntiByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_87_delta_AntiMaskOp_op_ctxt,rel_87_delta_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_88_new_AntiMaskOp_op_ctxt,rel_88_new_AntiMaskOp->createContext());
for(const auto& env0 : *rel_87_delta_AntiMaskOp) {
auto range = rel_85_AND->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_86_AntiMaskOp->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt)))) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
if( rel_37_AntiByteMask->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_88_new_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_88_new_AntiMaskOp_op_ctxt));
break;
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(AntiMaskOp(originVar,to,byteLow,byteHigh) :- 
   AntiMaskOp(originVar,mid,byteLow,byteHigh),
   AND(_,mid,antiMaskVar,to),
   BasicVariable_Value(antiMaskVar,antiMask),
   AntiByteMask(antiMask,byteLow,byteHigh).
in file casts_shifts.dl [72:1-76:45])_");
if(!(rel_85_AND->empty()) && !(rel_13_BasicVariable_Value->empty()) && !(rel_87_delta_AntiMaskOp->empty()) && !(rel_37_AntiByteMask->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt,rel_13_BasicVariable_Value->createContext());
CREATE_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt,rel_37_AntiByteMask->createContext());
CREATE_OP_CONTEXT(rel_85_AND_op_ctxt,rel_85_AND->createContext());
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_87_delta_AntiMaskOp_op_ctxt,rel_87_delta_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_88_new_AntiMaskOp_op_ctxt,rel_88_new_AntiMaskOp->createContext());
for(const auto& env0 : *rel_87_delta_AntiMaskOp) {
auto range = rel_85_AND->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_85_AND_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_86_AntiMaskOp->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt)))) {
auto range = rel_13_BasicVariable_Value->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_13_BasicVariable_Value_op_ctxt));
for(const auto& env2 : range) {
if( rel_37_AntiByteMask->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_37_AntiByteMask_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_88_new_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_88_new_AntiMaskOp_op_ctxt));
break;
}
}
}
}
}
}
();}
if(rel_88_new_AntiMaskOp->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt,rel_86_AntiMaskOp->createContext());
CREATE_OP_CONTEXT(rel_88_new_AntiMaskOp_op_ctxt,rel_88_new_AntiMaskOp->createContext());
for(const auto& env0 : *rel_88_new_AntiMaskOp) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_86_AntiMaskOp->insert(tuple,READ_OP_CONTEXT(rel_86_AntiMaskOp_op_ctxt));
}
}
();std::swap(rel_87_delta_AntiMaskOp, rel_88_new_AntiMaskOp);
rel_88_new_AntiMaskOp->purge();
iter++;
}
iter = 0;
rel_87_delta_AntiMaskOp->purge();
rel_88_new_AntiMaskOp->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fromVar\ttoVar\tbyteLow\tbyteHigh"},{"auxArity","0"},{"name","AntiMaskOp"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"fromVar\", \"toVar\", \"byteLow\", \"byteHigh\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Variable\", \"s:Variable\", \"i:number\", \"i:number\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_86_AntiMaskOp);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_37_AntiByteMask->purge();
if (pruneImdtRels) rel_86_AntiMaskOp->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_385(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(OR(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"OR"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [57:66-57:206])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_89_OR_op_ctxt,rel_89_OR->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_89_OR->insert(tuple,READ_OP_CONTEXT(rel_89_OR_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_386(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(RETURNDATACOPY(stmt,a,b,c) :- 
   Statement_Opcode(stmt,"RETURNDATACOPY"),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1),
   Statement_Uses(stmt,c,2).
in file tac_instructions.dl [235:1-239:31])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt,rel_90_RETURNDATACOPY->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(80))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(80))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env3[1])}};
rel_90_RETURNDATACOPY->insert(tuple,READ_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_387(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.To(stmt) :- 
   RETURNDATASIZE(stmt,_).
in file uses_defs_abstractions.dl [500:1-500:87])_");
if(!(rel_5_RETURNDATASIZE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_5_RETURNDATASIZE_op_ctxt,rel_5_RETURNDATASIZE->createContext());
CREATE_OP_CONTEXT(rel_91_callToReturnDataOp_To_op_ctxt,rel_91_callToReturnDataOp_To->createContext());
for(const auto& env0 : *rel_5_RETURNDATASIZE) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_91_callToReturnDataOp_To->insert(tuple,READ_OP_CONTEXT(rel_91_callToReturnDataOp_To_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(callToReturnDataOp.To(stmt) :- 
   RETURNDATACOPY(stmt,_,_,_).
in file uses_defs_abstractions.dl [500:1-500:87])_");
if(!(rel_90_RETURNDATACOPY->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_90_RETURNDATACOPY_op_ctxt,rel_90_RETURNDATACOPY->createContext());
CREATE_OP_CONTEXT(rel_91_callToReturnDataOp_To_op_ctxt,rel_91_callToReturnDataOp_To->createContext());
for(const auto& env0 : *rel_90_RETURNDATACOPY) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_91_callToReturnDataOp_To->insert(tuple,READ_OP_CONTEXT(rel_91_callToReturnDataOp_To_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_388(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATALOAD(stmt,a,to) :- 
   Statement_Opcode(stmt,"CALLDATALOAD"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0).
in file tac_instructions.dl [82:63-82:192])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(85))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(85))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_92_CALLDATALOAD->insert(tuple,READ_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_389(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(__agg_single13(@generator_0) :- 
   @generator_0 = count : { CALLDATALOAD(+underscore_895,+underscore_896,+underscore_897) }.
in file  [0:0-0:0])_");
[&](){
CREATE_OP_CONTEXT(rel_92_CALLDATALOAD_op_ctxt,rel_92_CALLDATALOAD->createContext());
CREATE_OP_CONTEXT(rel_93_agg_single13_op_ctxt,rel_93_agg_single13->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel_92_CALLDATALOAD->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_93_agg_single13->insert(tuple,READ_OP_CONTEXT(rel_93_agg_single13_op_ctxt));
}
}
();}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_390(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLDATACOPY(stmt,mem_start,calldata_start,length) :- 
   Statement_Opcode(stmt,"CALLDATACOPY"),
   Statement_Uses(stmt,mem_start,0),
   Statement_Uses(stmt,calldata_start,1),
   Statement_Uses(stmt,length,2).
in file tac_instructions.dl [242:1-246:36])_");
if(!(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt,rel_94_CALLDATACOPY->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(51))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(51))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[1]),ramBitCast(env3[1])}};
rel_94_CALLDATACOPY->insert(tuple,READ_OP_CONTEXT(rel_94_CALLDATACOPY_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_391(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(DIV(stmt,a,b,to) :- 
   Statement_Opcode(stmt,"DIV"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0),
   Statement_Uses(stmt,b,1).
in file tac_instructions.dl [60:67-60:209])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_95_DIV_op_ctxt,rel_95_DIV->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env1[1])}};
rel_95_DIV->insert(tuple,READ_OP_CONTEXT(rel_95_DIV_op_ctxt));
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_392(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLCODE(stmt,gas,target,data_start,data_length,return_start,return_length,success) :- 
   Statement_Opcode(stmt,"CALLCODE"),
   Statement_Defines(stmt,success,_),
   Statement_Uses(stmt,gas,0),
   Statement_Uses(stmt,target,1),
   Statement_Uses(stmt,data_start,2),
   Statement_Uses(stmt,data_length,3),
   Statement_Uses(stmt,return_start,4),
   Statement_Uses(stmt,return_length,5).
in file tac_instructions.dl [219:1-227:42])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_96_CALLCODE_op_ctxt,rel_96_CALLCODE->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(86))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(86))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(4))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(4))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(5))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(5))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env7 : range) {
Tuple<RamDomain,8> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[1]),ramBitCast(env4[1]),ramBitCast(env5[1]),ramBitCast(env6[1]),ramBitCast(env7[1]),ramBitCast(env1[1])}};
rel_96_CALLCODE->insert(tuple,READ_OP_CONTEXT(rel_96_CALLCODE_op_ctxt));
}
}
}
}
}
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_393(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ADDFix(stmt,a,b,aPlusB) :- 
   ADD(stmt,a,b,aPlusB).
in file helpers.dl [27:1-29:27])_");
if(!(rel_8_ADD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
for(const auto& env0 : *rel_8_ADD) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_9_ADDFix->insert(tuple,READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ADDFix(stmt,a,b,aPlusB) :- 
   ADD(stmt,b,a,aPlusB).
in file helpers.dl [27:1-29:27])_");
if(!(rel_8_ADD->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_8_ADD_op_ctxt,rel_8_ADD->createContext());
CREATE_OP_CONTEXT(rel_9_ADDFix_op_ctxt,rel_9_ADDFix->createContext());
for(const auto& env0 : *rel_8_ADD) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env0[1]),ramBitCast(env0[3])}};
rel_9_ADDFix->insert(tuple,READ_OP_CONTEXT(rel_9_ADDFix_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_394(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(CALLStatement(call,3) :- 
   CALL(call,_,_,_,_,_,_,_,_).
in file tac_instructions.dl [338:1-339:38])_");
if(!(rel_53_CALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_53_CALL_op_ctxt,rel_53_CALL->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
for(const auto& env0 : *rel_53_CALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(3))}};
rel_97_CALLStatement->insert(tuple,READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLStatement(call,2) :- 
   STATICCALL(call,_,_,_,_,_,_,_).
in file tac_instructions.dl [341:1-342:41])_");
if(!(rel_55_STATICCALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_55_STATICCALL_op_ctxt,rel_55_STATICCALL->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
for(const auto& env0 : *rel_55_STATICCALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(2))}};
rel_97_CALLStatement->insert(tuple,READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLStatement(call,2) :- 
   DELEGATECALL(call,_,_,_,_,_,_,_).
in file tac_instructions.dl [344:1-345:43])_");
if(!(rel_54_DELEGATECALL->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_54_DELEGATECALL_op_ctxt,rel_54_DELEGATECALL->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
for(const auto& env0 : *rel_54_DELEGATECALL) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(2))}};
rel_97_CALLStatement->insert(tuple,READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(CALLStatement(call,2) :- 
   CALLCODE(call,_,_,_,_,_,_,_).
in file tac_instructions.dl [347:1-348:39])_");
if(!(rel_96_CALLCODE->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_96_CALLCODE_op_ctxt,rel_96_CALLCODE->createContext());
CREATE_OP_CONTEXT(rel_97_CALLStatement_op_ctxt,rel_97_CALLStatement->createContext());
for(const auto& env0 : *rel_96_CALLCODE) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(RamSigned(2))}};
rel_97_CALLStatement->insert(tuple,READ_OP_CONTEXT(rel_97_CALLStatement_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_55_STATICCALL->purge();
if (pruneImdtRels) rel_54_DELEGATECALL->purge();
if (pruneImdtRels) rel_96_CALLCODE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_395(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(LOGIndexedArg(logStmt,indexedArg,(index-2)) :- 
   LOGStatement(logStmt,_),
   Statement_Uses(logStmt,indexedArg,index),
   index > 1.
in file tac_instructions.dl [331:1-334:13])_");
if(!(rel_4_LOGStatement->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_4_LOGStatement_op_ctxt,rel_4_LOGStatement->createContext());
CREATE_OP_CONTEXT(rel_98_LOGIndexedArg_op_ctxt,rel_98_LOGIndexedArg->createContext());
for(const auto& env0 : *rel_4_LOGStatement) {
auto range = rel_7_Statement_Uses->lowerUpperRange_102(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env1 : range) {
if( (ramBitCast<RamDomain>(env1[2]) != ramBitCast<RamDomain>(RamSigned(1)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast((ramBitCast<RamSigned>(env1[2]) - ramBitCast<RamSigned>(RamSigned(2))))}};
rel_98_LOGIndexedArg->insert(tuple,READ_OP_CONTEXT(rel_98_LOGIndexedArg_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_396(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","stmt\tblock"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","TAC_Block.csv"},{"name","Statement_Block"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"stmt\", \"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Statement\", \"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_99_Statement_Block);
} catch (std::exception& e) {std::cerr << "Error loading Statement_Block data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_397(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(ActualArgs(caller,a,(pos-1)) :- 
   Statement_Uses(s,a,pos),
   CALLPRIVATE(s,_),
   pos >= 1,
   Statement_Block(s,caller).
in file decompiler_imports.dl [146:1-150:31])_");
if(!(rel_39_CALLPRIVATE->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_39_CALLPRIVATE_op_ctxt,rel_39_CALLPRIVATE->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_100_ActualArgs_op_ctxt,rel_100_ActualArgs->createContext());
auto range = rel_7_Statement_Uses->lowerUpperRange_002(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env0 : range) {
if( !rel_39_CALLPRIVATE->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_39_CALLPRIVATE_op_ctxt)).empty()) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(1))))}};
rel_100_ActualArgs->insert(tuple,READ_OP_CONTEXT(rel_100_ActualArgs_op_ctxt));
}
}
}
}
();}
if (pruneImdtRels) rel_39_CALLPRIVATE->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_398(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliases.BlockHasFromStmt(block,stmt) :- 
   MLOADFreePtr(stmt),
   Statement_Block(stmt,block).
in file components.dl [33:2-35:33])_");
if(!(rel_28_MLOADFreePtr->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_28_MLOADFreePtr_op_ctxt,rel_28_MLOADFreePtr->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt,rel_101_mloadAliases_BlockHasFromStmt->createContext());
for(const auto& env0 : *rel_28_MLOADFreePtr) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_101_mloadAliases_BlockHasFromStmt->insert(tuple,READ_OP_CONTEXT(rel_101_mloadAliases_BlockHasFromStmt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_399(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.BlockHasFromStmt(block,stmt) :- 
   MSTOREFreePtr(stmt),
   Statement_Block(stmt,block).
in file components.dl [33:2-35:33])_");
if(!(rel_41_MSTOREFreePtr->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_41_MSTOREFreePtr_op_ctxt,rel_41_MSTOREFreePtr->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt,rel_102_mstoreFreePtrOrder_BlockHasFromStmt->createContext());
for(const auto& env0 : *rel_41_MSTOREFreePtr) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_102_mstoreFreePtrOrder_BlockHasFromStmt->insert(tuple,READ_OP_CONTEXT(rel_102_mstoreFreePtrOrder_BlockHasFromStmt_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_400(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mstoreFreePtrOrder.BlockHasToStmt(block,stmt) :- 
   mstoreFreePtrOrder.To(stmt),
   Statement_Block(stmt,block).
in file components.dl [41:2-43:33])_");
if(!(rel_42_mstoreFreePtrOrder_To->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_42_mstoreFreePtrOrder_To_op_ctxt,rel_42_mstoreFreePtrOrder_To->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt,rel_103_mstoreFreePtrOrder_BlockHasToStmt->createContext());
for(const auto& env0 : *rel_42_mstoreFreePtrOrder_To) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_103_mstoreFreePtrOrder_BlockHasToStmt->insert(tuple,READ_OP_CONTEXT(rel_103_mstoreFreePtrOrder_BlockHasToStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_42_mstoreFreePtrOrder_To->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_401(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(DirectThrowBlock(block) :- 
   Statement_Opcode(throw,"THROW"),
   Statement_Opcode(throw,"REVERT"),
   Statement_Block(throw,block).
in file helpers.dl [8:1-10:33])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_104_DirectThrowBlock_op_ctxt,rel_104_DirectThrowBlock->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(87))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(87))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(RamSigned(60))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_104_DirectThrowBlock->insert(tuple,READ_OP_CONTEXT(rel_104_DirectThrowBlock_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_402(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(mloadAliasesPrecise.BlockHasBypassingStmt(block,stmt) :- 
   mloadAliasesPrecise.Bypassing(stmt),
   Statement_Block(stmt,block).
in file components.dl [37:2-39:33])_");
if(!(rel_68_mloadAliasesPrecise_Bypassing->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_68_mloadAliasesPrecise_Bypassing_op_ctxt,rel_68_mloadAliasesPrecise_Bypassing->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt,rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_68_mloadAliasesPrecise_Bypassing) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_105_mloadAliasesPrecise_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_105_mloadAliasesPrecise_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_68_mloadAliasesPrecise_Bypassing->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_403(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.BlockHasBypassingStmt(block,stmt) :- 
   callToReturnDataOp.Bypassing(stmt),
   Statement_Block(stmt,block).
in file components.dl [37:2-39:33])_");
if(!(rel_57_callToReturnDataOp_Bypassing->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_57_callToReturnDataOp_Bypassing_op_ctxt,rel_57_callToReturnDataOp_Bypassing->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt,rel_106_callToReturnDataOp_BlockHasBypassingStmt->createContext());
for(const auto& env0 : *rel_57_callToReturnDataOp_Bypassing) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_106_callToReturnDataOp_BlockHasBypassingStmt->insert(tuple,READ_OP_CONTEXT(rel_106_callToReturnDataOp_BlockHasBypassingStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_57_callToReturnDataOp_Bypassing->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_404(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(MLOAD(stmt,a,to) :- 
   Statement_Opcode(stmt,"MLOAD"),
   Statement_Defines(stmt,to,_),
   Statement_Uses(stmt,a,0).
in file tac_instructions.dl [83:56-83:171])_");
if(!(rel_1_Statement_Defines->empty()) && !(rel_7_Statement_Uses->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_10_MLOAD_op_ctxt,rel_10_MLOAD->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(88))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(88))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_1_Statement_Defines->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env1[1])}};
rel_10_MLOAD->insert(tuple,READ_OP_CONTEXT(rel_10_MLOAD_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_405(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(callToReturnDataOp.BlockHasToStmt(block,stmt) :- 
   callToReturnDataOp.To(stmt),
   Statement_Block(stmt,block).
in file components.dl [41:2-43:33])_");
if(!(rel_91_callToReturnDataOp_To->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_91_callToReturnDataOp_To_op_ctxt,rel_91_callToReturnDataOp_To->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt,rel_107_callToReturnDataOp_BlockHasToStmt->createContext());
for(const auto& env0 : *rel_91_callToReturnDataOp_To) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel_107_callToReturnDataOp_BlockHasToStmt->insert(tuple,READ_OP_CONTEXT(rel_107_callToReturnDataOp_BlockHasToStmt_op_ctxt));
}
}
}
();}
if (pruneImdtRels) rel_91_callToReturnDataOp_To->purge();
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_406(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.In_ActualArgs(caller,a,(pos-1)) :- 
   Statement_Uses(s,a,pos),
   Statement_Opcode(s,"CALLPRIVATE"),
   pos >= 1,
   Statement_Block(s,caller).
in file function_inliner.dl [195:3-199:35])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt,rel_108_inliner_In_ActualArgs->createContext());
auto range = rel_7_Statement_Uses->lowerUpperRange_002(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt));
for(const auto& env0 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(RamSigned(21))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt))) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast((ramBitCast<RamSigned>(env0[2]) - ramBitCast<RamSigned>(RamSigned(1))))}};
rel_108_inliner_In_ActualArgs->insert(tuple,READ_OP_CONTEXT(rel_108_inliner_In_ActualArgs_op_ctxt));
}
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_407(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.ThrowBlock(block) :- 
   Statement_Opcode(throw,"THROW"),
   Statement_Block(throw,block).
in file function_inliner.dl [156:3-158:38])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt,rel_109_inliner_ThrowBlock->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(87))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(87))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_109_inliner_ThrowBlock->insert(tuple,READ_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(inliner.ThrowBlock(block) :- 
   Statement_Opcode(throw,"REVERT"),
   Statement_Block(throw,block).
in file function_inliner.dl [156:3-158:38])_");
if(!(rel_2_Statement_Opcode->empty()) && !(rel_99_Statement_Block->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt,rel_109_inliner_ThrowBlock->createContext());
auto range = rel_2_Statement_Opcode->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(60))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(60))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env1[1])}};
rel_109_inliner_ThrowBlock->insert(tuple,READ_OP_CONTEXT(rel_109_inliner_ThrowBlock_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_408(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionCall.csv"},{"name","CallGraphEdge"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_110_CallGraphEdge);
} catch (std::exception& e) {std::cerr << "Error loading CallGraphEdge data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_409(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fn\ta\tpos"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","FormalArgs.csv"},{"name","FormalArgs"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"fn\", \"a\", \"pos\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Function\", \"s:Variable\", \"i:number\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_111_FormalArgs);
} catch (std::exception& e) {std::cerr << "Error loading FormalArgs data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_410(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(isVariable(x) :- 
   Statement_Uses(_,x,_).
in file decompiler_imports.dl [175:1-176:79])_");
if(!(rel_7_Statement_Uses->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
for(const auto& env0 : *rel_7_Statement_Uses) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_112_isVariable->insert(tuple,READ_OP_CONTEXT(rel_112_isVariable_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(isVariable(x) :- 
   Statement_Defines(_,x,_).
in file decompiler_imports.dl [175:1-176:79])_");
if(!(rel_1_Statement_Defines->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Statement_Defines_op_ctxt,rel_1_Statement_Defines->createContext());
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
for(const auto& env0 : *rel_1_Statement_Defines) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_112_isVariable->insert(tuple,READ_OP_CONTEXT(rel_112_isVariable_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(isVariable(x) :- 
   FormalArgs(_,x,_).
in file decompiler_imports.dl [175:1-176:79])_");
if(!(rel_111_FormalArgs->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_112_isVariable_op_ctxt,rel_112_isVariable->createContext());
for(const auto& env0 : *rel_111_FormalArgs) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_112_isVariable->insert(tuple,READ_OP_CONTEXT(rel_112_isVariable_op_ctxt));
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_411(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(inliner.FunHasArgMismatch(fun) :- 
   CallGraphEdge(callerBlock,fun),
   FormalArgs(fun,_,i),
   Statement_Block(callStmt,callerBlock),
   Statement_Opcode(callStmt,"CALLPRIVATE"),
   !Statement_Uses(callStmt,_,(i+1)).
in file function_inliner.dl [105:3-110:42])_");
if(!(rel_111_FormalArgs->empty()) && !(rel_99_Statement_Block->empty()) && !(rel_110_CallGraphEdge->empty()) && !(rel_2_Statement_Opcode->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt,rel_7_Statement_Uses->createContext());
CREATE_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt,rel_2_Statement_Opcode->createContext());
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_110_CallGraphEdge_op_ctxt,rel_110_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_111_FormalArgs_op_ctxt,rel_111_FormalArgs->createContext());
CREATE_OP_CONTEXT(rel_113_inliner_FunHasArgMismatch_op_ctxt,rel_113_inliner_FunHasArgMismatch->createContext());
for(const auto& env0 : *rel_110_CallGraphEdge) {
auto range = rel_111_FormalArgs->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_111_FormalArgs_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_99_Statement_Block->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_99_Statement_Block_op_ctxt));
for(const auto& env2 : range) {
if( rel_2_Statement_Opcode->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(21))}},READ_OP_CONTEXT(rel_2_Statement_Opcode_op_ctxt)) && !(!rel_7_Statement_Uses->lowerUpperRange_101(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast((ramBitCast<RamSigned>(env1[2]) + ramBitCast<RamSigned>(RamSigned(1))))}},READ_OP_CONTEXT(rel_7_Statement_Uses_op_ctxt)).empty())) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_113_inliner_FunHasArgMismatch->insert(tuple,READ_OP_CONTEXT(rel_113_inliner_FunHasArgMismatch_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","fun"},{"auxArity","0"},{"name","inliner.FunHasArgMismatch"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"fun\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Function\"]}}"}});
if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_113_inliner_FunHasArgMismatch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_412(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","IRFunctionEntry.csv"},{"name","FunctionEntry"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"block\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Block\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_114_FunctionEntry);
} catch (std::exception& e) {std::cerr << "Error loading FunctionEntry data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_413(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","block\tfunction"},{"auxArity","0"},{"delimiter","\t"},{"fact-dir","."},{"filename","InFunction.csv"},{"name","InFunction"},{"operation","input"},{"params","{\"records\": {\"MemoryArgument\": {\"arity\": 3, \"params\": [\"type\", \"extra\", \"memRange\"]}, \"MemoryRange\": {\"arity\": 2, \"params\": [\"index\", \"length\"]}, \"SimpleInductionVariable\": {\"arity\": 2, \"params\": [\"beforeLoopVar\", \"inLoopVar\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}"},{"types","{\"ADTs\": {\"+:MemoryArgumentNew\": {\"arity\": 5, \"branches\": [{\"name\": \"CalldataArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"CodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\"]}, {\"name\": \"ExtCodeArgument\", \"types\": [\"s:Variable\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"ReturndataArgument\", \"types\": [\"s:Statement\", \"s:Variable\", \"s:Variable\"]}, {\"name\": \"VariableArgument\", \"types\": [\"s:Variable\"]}], \"enum\": false}}, \"records\": {\"r:MemoryArgument\": {\"arity\": 3, \"types\": [\"s:symbol\", \"s:VarOrStatement\", \"r:MemoryRange\"]}, \"r:MemoryRange\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}, \"r:SimpleInductionVariable\": {\"arity\": 2, \"types\": [\"s:Variable\", \"s:Variable\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Block\", \"s:Function\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_115_InFunction);
} catch (std::exception& e) {std::cerr << "Error loading InFunction data: " << e.what() << '\n';}
}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
#ifdef _MSC_VER
#pragma warning(disable: 4100)
#endif // _MSC_VER
void subroutine_414(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret) {
signalHandler->setMsg(R"_(Statement_Function(s,f) :- 
   Statement_Block(s,b),
   InFunction(b,f).
in file decompiler_imports.dl [267:1-269:21])_");
if(!(rel_99_Statement_Block->empty()) && !(rel_115_InFunction->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_99_Statement_Block_op_ctxt,rel_99_Statement_Block->createContext());
CREATE_OP_CONTEXT(rel_115_InFunction_op_ctxt,rel_115_InFunction->createContext());
CREATE_OP_CONTEXT(rel_116_Statement_Function_op_ctxt,rel_116_Statement_Function->createContext());
for(const auto& env0 : *rel_99_Statement_Block) {
auto range = rel_115_InFunction->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_115_InFunction_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_116_Statement_Function->insert(tuple,READ_OP_CONTEXT(rel_116_Statement_Function_op_ctxt));
}
}
}
();}
}
#ifdef _MSC_VER
#pragma warning(default: 4100)
#endif // _MSC_VER
};
SouffleProgram *newInstance_fa93e8c04b1c471417d1ec06ed50d344(){return new Sf_fa93e8c04b1c471417d1ec06ed50d344;}
SymbolTable *getST_fa93e8c04b1c471417d1ec06ed50d344(SouffleProgram *p){return &reinterpret_cast<Sf_fa93e8c04b1c471417d1ec06ed50d344*>(p)->getSymbolTable();}

#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_fa93e8c04b1c471417d1ec06ed50d344: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_fa93e8c04b1c471417d1ec06ed50d344();
};
public:
factory_Sf_fa93e8c04b1c471417d1ec06ed50d344() : ProgramFactory("fa93e8c04b1c471417d1ec06ed50d344"){}
};
extern "C" {
factory_Sf_fa93e8c04b1c471417d1ec06ed50d344 __factory_Sf_fa93e8c04b1c471417d1ec06ed50d344_instance;
}
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(/root/projects/ethereum_decompiler/evaluation_scripts_for_esuer/run_tools/gigahorse/gigahorse-toolchain/clientlib/function_inliner.dl)",
R"()",
R"()",
false,
R"()",
1);
if (!opt.parse(argc,argv)) return 1;
souffle::Sf_fa93e8c04b1c471417d1ec06ed50d344 obj;
#if defined(_OPENMP) 
obj.setNumThreads(opt.getNumJobs());

#endif
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir());
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}

#endif
